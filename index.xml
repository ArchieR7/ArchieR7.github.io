<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Archie</title>
        <link>https://www.archie.tw/</link>
        <description>Recent content on Archie</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 09 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.archie.tw/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Markdown 嵌入 YouTube</title>
        <link>https://www.archie.tw/p/markdown-%E5%B5%8C%E5%85%A5-youtube/</link>
        <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/markdown-%E5%B5%8C%E5%85%A5-youtube/</guid>
        <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;一般來說，我們都可以直接使用 YouTube 的嵌入程式碼來直接加入影片，而今天如果要在 Markdown 裡頭製作這段這程式碼的話，我們可以怎麼做？&lt;/p&gt;
&lt;h3 id=&#34;嵌入的程式碼&#34;&gt;嵌入的程式碼&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;iframe width=&amp;quot;560&amp;quot; height=&amp;quot;315&amp;quot; src=&amp;quot;https://www.youtube.com/embed/OyCN04p-uS8&amp;quot; title=&amp;quot;YouTube video player&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&amp;quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown&lt;/h3&gt;
&lt;p&gt;其實就只有一個重點，就是得到影片的 ID；這個你可以從很多地方取得，以&lt;a class=&#34;link&#34; href=&#34;../%e7%b7%9a%e4%b8%8a%e8%ae%80%e6%9b%b8%e6%9c%83-rxswift-%e5%88%86%e4%ba%ab&#34; &gt;線上讀書會 RxSwift 分享&lt;/a&gt;來說&lt;/p&gt;
&lt;p&gt;首先就是先取得縮圖的 URL，格式為&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://img.youtube.com/vi/VIDEO_ID/0.jpg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://img.youtube.com/vi/VIDEO_ID/0.jpg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Full-size thumbnail&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://img.youtube.com/vi/VIDEO_ID/1.jpg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://img.youtube.com/vi/VIDEO_ID/1.jpg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Small thumbnail images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://img.youtube.com/vi/VIDEO_ID/2.jpg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://img.youtube.com/vi/VIDEO_ID/2.jpg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Small thumbnail images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://img.youtube.com/vi/VIDEO_ID/3.jpg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://img.youtube.com/vi/VIDEO_ID/3.jpg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Small thumbnail images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://img.youtube.com/vi/VIDEO_ID/default.jpg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://img.youtube.com/vi/VIDEO_ID/default.jpg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Default thumbnail image&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://img.youtube.com/vi/VIDEO_ID/hqdefault.jpg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://img.youtube.com/vi/VIDEO_ID/hqdefault.jpg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;High-quality default thumbnail image&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://img.youtube.com/vi/VIDEO_ID/mqdefault.jpg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://img.youtube.com/vi/VIDEO_ID/mqdefault.jpg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Medium-quality default thumbnail image&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://img.youtube.com/vi/VIDEO_ID/sddefault.jpg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://img.youtube.com/vi/VIDEO_ID/sddefault.jpg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Standard-definition default thumbnail image&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://img.youtube.com/vi/VIDEO_ID/maxresdefault.jpg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://img.youtube.com/vi/VIDEO_ID/maxresdefault.jpg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Maximum-resolution default thumbnail image&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;於是我拿了一個最大尺寸的來使用&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[![線上讀書會 RxSwift 分享](https://img.youtube.com/vi/OyCN04p-uS8/maxresdefault.jpg)](https://www.youtube.com/watch?=OyCN04p-uS8)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?=OyCN04p-uS8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://img.youtube.com/vi/OyCN04p-uS8/maxresdefault.jpg&#34; &gt;
		&lt;img src=&#34;https://img.youtube.com/vi/OyCN04p-uS8/maxresdefault.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;線上讀書會 RxSwift 分享&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;線上讀書會 RxSwift 分享&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>發票收集雞 - 自己的發票自己收</title>
        <link>https://www.archie.tw/p/%E7%99%BC%E7%A5%A8%E6%94%B6%E9%9B%86%E9%9B%9E-%E8%87%AA%E5%B7%B1%E7%9A%84%E7%99%BC%E7%A5%A8%E8%87%AA%E5%B7%B1%E6%94%B6/</link>
        <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E7%99%BC%E7%A5%A8%E6%94%B6%E9%9B%86%E9%9B%9E-%E8%87%AA%E5%B7%B1%E7%9A%84%E7%99%BC%E7%A5%A8%E8%87%AA%E5%B7%B1%E6%94%B6/</guid>
        <description>&lt;h1 id=&#34;發票收集雞httpsappsapplecomtwapp發票收集雞id1575857521&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://apps.apple.com/tw/app/%e7%99%bc%e7%a5%a8%e6%94%b6%e9%9b%86%e9%9b%9e/id1575857521&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;發票收集雞&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;八月份開始，我拿著去年年初申請的財政部發票應用 API 來做這個個人專案，其主要的功能都圍繞著雲端發票為主，原因為二&lt;/p&gt;
&lt;h3 id=&#34;紙本發票的減少&#34;&gt;紙本發票的減少&lt;/h3&gt;
&lt;p&gt;在財政部的推動下，傳統發票的開立已經比以往少去甚多，取而代之的是電子發票和雲端發票。&lt;/p&gt;
&lt;h3 id=&#34;雲端發票專屬獎httpswwweinvoicenatgovtwein_uploadhtmlesqesq801whtml&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.einvoice.nat.gov.tw/ein_upload/html/ESQ/ESQ801W.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;雲端發票專屬獎&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;而在推動無紙化的過程中，政府加碼開立雲端發票專屬獎，像是最近一期的總獎金為 5.62 億元（100 萬 30 組、2,000 元 16,000 組、500 元 100 萬組）。所以基本上我自己的話，能存載具就會存載具；而這部分另一個優勢是，可以自動對獎並匯入至指定的帳戶！&lt;/p&gt;
&lt;p&gt;基於上述兩個原因，我每兩個月會需要對獎的發票數量銳減至十幾張，而這樣的話，對於我而言也就少了需要人工對獎的功能。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1630032452058.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1630032452058.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;為什麼寫這個-app&#34;&gt;為什麼寫這個 App&lt;/h2&gt;
&lt;p&gt;主要是以自己的需求出發，來練一些技術，在 SwiftUI 推出後一直都還沒有機會拿來作為一個產品的開發架構，於是便起心動念開工！&lt;/p&gt;
&lt;h3 id=&#34;使用到了什麼服務和技術&#34;&gt;使用到了什麼服務和技術&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;🆕 SwiftUI：嘗試以 &lt;a class=&#34;link&#34; href=&#34;https://github.com/nalexn/clean-architecture-swiftui&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Clean architechture&lt;/a&gt; 作為架構，而非過往在 UIKit 自己所熟悉的 MVVM&lt;/li&gt;
&lt;li&gt;Firebase：目前使用到 Auth、Crashlytics、Cloud functions、Storage 和 Firestore&lt;/li&gt;
&lt;li&gt;CoreData：搭配 CloudKit 作為使用者資料備份的地方&lt;/li&gt;
&lt;li&gt;🆕 CloudKit：嘗試使用 CloudKit 來取代其他的 remote database&lt;/li&gt;
&lt;li&gt;🆕 Apple Wallet：在 Cloud functions 上寫了一個動態產生 PKPass 的功能並和 app 互動&lt;/li&gt;
&lt;li&gt;RevenueCat：作為 In App Purchase 的管理機制&lt;/li&gt;
&lt;li&gt;🆕 訂閱制：第一次推出訂閱制的服務，其主要的費用會用來支付上述的一些開銷&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;發票收集雞的營利方式&#34;&gt;發票收集雞的營利方式&lt;/h2&gt;
&lt;h3 id=&#34;廣告&#34;&gt;廣告&lt;/h3&gt;
&lt;p&gt;透過一些橫幅和一些功能類型啟動時的插頁廣告作為營利方式。&lt;/p&gt;
&lt;h3 id=&#34;訂閱制&#34;&gt;訂閱制&lt;/h3&gt;
&lt;p&gt;這邊來聊一下為什麼這次會推出訂閱制的付費方式，主要為 Firebase 的部分功能，如 Cloud Functions 的使用，已經從免費方案中被排除，需要開啟 Blaze 方案（用多少付多少）才能夠開啟。
以及之後打算做的功能需要使用到 Storage，這個東西基本上也是照流量來計費的，於是在算了一下之後決定，部分功能可以透過廣告收益來支付，而其他比較現實的部分就得要使用者付費才能開啟了。&lt;/p&gt;
&lt;p&gt;當然，如果你不喜歡看下面一條廣告擺在那的話，可以選擇直接選擇訂閱制的方式！&lt;/p&gt;
&lt;h3 id=&#34;只有上述這兩種營利模式&#34;&gt;只有上述這兩種營利模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;沒有任何一家公司是慈善機構&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這個專案對於我而言，能夠得到利益的地方就是這些少少的來源；而若當一個 App 沒有任何付費制度或是廣告等，那大家可以想想看他們是要怎麼賺錢？&lt;/p&gt;
&lt;p&gt;基本上其餘的發票應用都是拿你的資料去變現的，像是不同的網購平台就會想取得其他家平台的消費資料來做一些分析和廣告的評估等。&lt;/p&gt;
&lt;p&gt;這部分點到為止，而我也是不想要把自己的資料被拿去販售和利用所以選擇自己寫一個。&lt;/p&gt;
&lt;h2 id=&#34;目前支援的功能&#34;&gt;目前支援的功能&lt;/h2&gt;
&lt;p&gt;大家可以在&lt;a class=&#34;link&#34; href=&#34;https://archiechang.notion.site/aa73fb60d50f4013992f682a1760325b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;發票收集雞的許願板&lt;/a&gt;查看我目前的開發進度和預計上線的功能。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1630032426248.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1630032426248.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;臉書社團httpswwwfacebookcomgroupsinvoicechickenpubliclocaletw_tw&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.facebook.com/groups/invoice.chicken.public?locale=tw_TW&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;臉書社團&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果有什麼關於這個 App 想討論、想新增的功能（或是覺得 UX/UI 太醜）都可以直接來這邊討論！&lt;/p&gt;
&lt;h3 id=&#34;開發歷程&#34;&gt;開發歷程&lt;/h3&gt;
&lt;p&gt;在經過幾次的 rejected 之後，終於在 2021/8/26 23:20 上線啦！&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1630029996827.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1630029996827.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其主要的 rejected 原因為幾點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;沒有放上 EULA：這次新學到的是原來可以使用 &lt;a class=&#34;link&#34; href=&#34;https://www.apple.com/legal/internet-services/itunes/dev/stdeula/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Apple 提供的公版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;已經有其他發票應用：這部分就要直接回覆這個 App 和其他發票應用有什麼不同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最後寫給使用情境和我類似的你&#34;&gt;最後，寫給使用情境和我類似的你&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果你平常也都是存載具，只是想有個查看發票明細的地方&lt;/li&gt;
&lt;li&gt;如果你記帳都是自己用自己習慣的表格紀錄，只需要有個工具幫你匯出發票資料&lt;/li&gt;
&lt;li&gt;如果你習慣用 Apple Pay 付款，想直接在同一個畫面選擇載具出來刷&lt;/li&gt;
&lt;li&gt;如果你不想要發票資料和載具驗證碼存在別人的伺服器之中（記得改驗證碼讓其他 App 無法代登入取得你的資料）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者是有其他使用情境我沒想到的，都歡迎提出來，我每週都會撥時間來維護這個 App 😂&lt;/p&gt;
</description>
        </item>
        <item>
        <title>iOS 開發環境設置</title>
        <link>https://www.archie.tw/p/ios-%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83%E8%A8%AD%E7%BD%AE/</link>
        <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/ios-%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83%E8%A8%AD%E7%BD%AE/</guid>
        <description>&lt;p&gt;來算一算這是我第幾次來設置開發環境了⋯&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;2014 - 買了自己的第一台 MacBook Pro&lt;/li&gt;
&lt;li&gt;2015 - 第一份工作所配發的 MacBook Pro&lt;/li&gt;
&lt;li&gt;2018 - 換工作所配發的 iMac&lt;/li&gt;
&lt;li&gt;2018 - 換工作所配發的 iMac&lt;/li&gt;
&lt;li&gt;2020 - 換工作所配發的 iMac&lt;/li&gt;
&lt;li&gt;2020 - 向 Apple 所申請的 DTK&lt;/li&gt;
&lt;li&gt;2021 - 為了加速開發 side project，買了 MacBook Air M1（正在弄）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前面六次的開發環境設置，都隨著物換星移地不斷迭代；從 &lt;code&gt;bash&lt;/code&gt; -&amp;gt; &lt;code&gt;zsh&lt;/code&gt;、&lt;code&gt;oh-my-zsh&lt;/code&gt; -&amp;gt; &lt;code&gt;zim&lt;/code&gt;，加上還因為 DTK 的先行使用，踩了一些當時尚未支援的坑⋯這次再來紀錄一下這過程，讓之後的第八次能夠更順利一些（？&lt;/p&gt;
&lt;h2 id=&#34;brewhttpsbrewsh&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://brew.sh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;brew&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先，勢必是得從 brew 開始安裝起，也可以簡化後續很多的安裝流程。而這邊主要已經避開了當時還不支援 Apple silicon CPU 的坑，所以十分地順利！&lt;/p&gt;
&lt;h3 id=&#34;git&#34;&gt;git&lt;/h3&gt;
&lt;p&gt;自從上次 git 發生了資安問題後，我都習慣用 brew 所安裝的 git 為主。&lt;/p&gt;
&lt;h2 id=&#34;iterm2httpsiterm2com&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://iterm2.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iTerm2&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接著下載 iTerm2 來取代原先的 Terminal，並客製化一下這部分。&lt;/p&gt;
&lt;h3 id=&#34;刪除的快捷鍵&#34;&gt;刪除的快捷鍵&lt;/h3&gt;
&lt;p&gt;在 Profiles -&amp;gt; Keys -&amp;gt; Key Mappings 這邊新增兩個&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Send Hex Codes: 0x15（command + delete）&lt;/li&gt;
&lt;li&gt;Send Hex Codes: 0x17（option + delete）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這樣就可以在 iTerm2 上使用和 Xcode 一樣的刪除快捷鍵了。&lt;/p&gt;
&lt;h3 id=&#34;color-theme&#34;&gt;Color theme&lt;/h3&gt;
&lt;p&gt;我個人都習慣使用 &lt;a class=&#34;link&#34; href=&#34;https://draculatheme.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dracula&lt;/a&gt; 來套用到所有的工具配色上，安裝方法可以直接參照。&lt;/p&gt;
&lt;h2 id=&#34;sublime-texthttpswwwsublimetextcomdownload&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.sublimetext.com/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Sublime Text&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;這是一套很讚的文字編輯器，我這邊會做幾個客製化的功能&lt;/p&gt;
&lt;h3 id=&#34;install-package-control&#34;&gt;Install Package control&lt;/h3&gt;
&lt;p&gt;command + shift + P 可以叫出操作列，並輸入 Install Package control 便可以安裝套件管理工具。&lt;/p&gt;
&lt;p&gt;這邊順道提供一個我常拿來處理 JSON 格式的套件：Pretty JSON。&lt;/p&gt;
&lt;h3 id=&#34;command-line-interfacehttpswwwsublimetextcomdocscommand_linehtml&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.sublimetext.com/docs/command_line.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Command Line Interface&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 zsh 的環境下，可以直接透過下列的程式碼來達到效果&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo &#39;export PATH=&amp;quot;/Applications/Sublime Text.app/Contents/SharedSupport/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zprofile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這麼一來，我們就可以使用 &lt;code&gt;subl&lt;/code&gt; 的指令了。&lt;/p&gt;
&lt;h3 id=&#34;color-theme-1&#34;&gt;Color theme&lt;/h3&gt;
&lt;p&gt;一樣透過 Dracula 的安裝方式來更換成一致的配色。&lt;/p&gt;
&lt;h2 id=&#34;zim&#34;&gt;[zim]&lt;/h2&gt;
&lt;p&gt;輸入下列程式碼即可開始安裝&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;powerlevel10khttpsgithubcomromkatvpowerlevel10k&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/romkatv/powerlevel10k&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;powerlevel10k&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/romkatv/powerlevel10k#zim&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Zim 的安裝方式&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;xcodesapphttpsgithubcomrobotsandpencilsxcodesapp&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/RobotsAndPencils/XcodesApp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Xcodes.app&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;透過 brew 來安裝 Xcodes.app，作為 Xcode 管理套件。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install --cask xcodes
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;npmhttpswwwnpmjscom&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.npmjs.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;npm&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;也是透過 brew 來安裝 npm&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install npm
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;commitizenhttpswwwarchietw20180508commitizen&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.archie.tw/2018/05/08/commitizen/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Commitizen&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接著就透過 npm 來安裝 Commitizen。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;npm install -g commitizen
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;rbenvhttpsgithubcomrbenvrbenvinstallation&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/rbenv/rbenv#installation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;rbenv&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;透過 brew 安裝 rbenv 來做 Ruby 的版本管理&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install rbenv
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接著來查看目前可安裝的版本列表&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rbenv install -l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再來安裝特定的版本，如我這邊安裝 3.0.2&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rbenv install 3.0.2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安裝完想用的版本後，就可以在特定的資料夾指定 Ruby 所使用的版本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rbenv local 3.0.2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再來要去 &lt;code&gt;.zshrc&lt;/code&gt; 裡頭註明一下 rbenv 的路徑&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# rbenv
export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;quot;
eval &amp;quot;$(rbenv init -)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;bundler&#34;&gt;bundler&lt;/h2&gt;
&lt;p&gt;可以先確認一下目前使用的 Ruby 是不是剛剛所制定的版本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;which ruby
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安裝 bundler 來管理專案裡頭的 gem 套件們&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo gem install bundler
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最後執行更新 bundler 列表的套件即可&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bundle update --bundler
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如我目前專案裡頭的 Gemfile 內容包含了&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gem &#39;fastlane&#39;
gem &#39;cocoapods&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就可以順利地透過 bundle 和 rbenv 來安裝相關的套件了&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Fastlane 503 Service Temporarily Unavailable</title>
        <link>https://www.archie.tw/p/fastlane-503-service-temporarily-unavailable/</link>
        <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/fastlane-503-service-temporarily-unavailable/</guid>
        <description>&lt;h1 id=&#34;fastlane-503-service-temporarity-unavaiable&#34;&gt;Fastlane 503 Service Temporarity Unavaiable&lt;/h1&gt;
&lt;p&gt;當我們利用 Match 來更新 provisioning profiles 時，有時候會因為使用量過大而導致發生 &lt;code&gt;503 Service Temporarity Unavaiable&lt;/code&gt;，這時候有幾種方式來處理。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一次不要操作太多 Match action&lt;/li&gt;
&lt;li&gt;清除 &lt;code&gt;fastlane&lt;/code&gt; spaceship 的 cookie&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第二種的使用方式就是直接執行下列指令就可以再次嘗試了&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rm $HOME/.fastlane/spaceship/*/cookie
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>從 Terminal 讓模擬器開啟連結</title>
        <link>https://www.archie.tw/p/%E5%BE%9E-terminal-%E8%AE%93%E6%A8%A1%E6%93%AC%E5%99%A8%E9%96%8B%E5%95%9F%E9%80%A3%E7%B5%90/</link>
        <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E5%BE%9E-terminal-%E8%AE%93%E6%A8%A1%E6%93%AC%E5%99%A8%E9%96%8B%E5%95%9F%E9%80%A3%E7%B5%90/</guid>
        <description>&lt;p&gt;一般在開發的時候，如果需要在模擬器測試 Deep link 的話，則需要做一個開啟連結的動作；比較手動的就會開啟一個 Safari，輸入特定的連結後前往，而這邊分享一個指令。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;xcrun simctl openurl booted &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;xcrun&lt;/code&gt; 主要就是執行 Xcode 的一個工具，而 &lt;code&gt;simctl&lt;/code&gt; 則是和模擬器的管理工具，而 &lt;code&gt;booted&lt;/code&gt; 是指目前開啟著的模擬器。&lt;/p&gt;
&lt;h3 id=&#34;步驟&#34;&gt;步驟&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;打開模擬器&lt;/li&gt;
&lt;li&gt;打開任何 Terminal 的 app&lt;/li&gt;
&lt;li&gt;輸入上述的指令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這樣模擬器便會開啟連結了！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>WWDC21 - Platforms State of the Union</title>
        <link>https://www.archie.tw/p/wwdc21-platforms-state-of-the-union/</link>
        <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/wwdc21-platforms-state-of-the-union/</guid>
        <description>&lt;h3 id=&#34;xcode-cloud&#34;&gt;Xcode Cloud&lt;/h3&gt;
&lt;p&gt;一般我們的發佈流程為，從寫程式到測試，接著整合後發佈，再來接著收集資訊後再進行下一輪開發。
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1623429314442.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1623429314442.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Xcode Cloud 將這一切整合在同一個服務之中，讓我們可以直接寫完程式之後，建立 workflow 並整合 Git 服務（GitHub, GitLab 等），接著串接 App Store Connect 進行 TestFlight 和發佈。
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1623429354737.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1623429354737.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我們之後就可以從單一的 Xcode Cloud 介面處理完上述的所有事情，而建立這些 CI/CD 只需要一分鐘的時間。&lt;/p&gt;
&lt;p&gt;相比之前弄 GitHub action，應該可以算是更加容易許多（？&lt;/p&gt;
&lt;h4 id=&#34;建構四步驟&#34;&gt;建構四步驟&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;選擇 product&lt;/li&gt;
&lt;li&gt;確認 workflow&lt;/li&gt;
&lt;li&gt;授權相對應的 source code&lt;/li&gt;
&lt;li&gt;連接 App Store Connect&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 CI/CD 的測試以及 Code Review 上的體驗都會比原先使用其他服務上好很多，畢竟是原生的體驗，在 DEMO 影片上看起來都蠻有趣的。&lt;/p&gt;
&lt;p&gt;目前可以透過&lt;a class=&#34;link&#34; href=&#34;https://developer.apple.com/xcode-cloud/beta/request/#!/agree&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;這個連結來註冊 Beta 使用&lt;/a&gt;，若有機會的話再來詳細寫一篇這部分的體驗。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1623431306073.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1623431306073.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;swift-concurrency&#34;&gt;Swift concurrency&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 的來臨讓我們能夠取代原先的 completion handler&lt;/p&gt;
&lt;p&gt;Completion handler&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;prepareForShow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;completion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;escaping&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
	&lt;span class=&#34;n&#34;&gt;danceCompany&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;warmUp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minutes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; 
		&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;success&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dancers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; 
				&lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fetchStageScenery&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scenery&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; 
					&lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setStage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scenery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;openingScene&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; 
						&lt;span class=&#34;n&#34;&gt;dancers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moveToPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;openingScene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; 
							&lt;span class=&#34;n&#34;&gt;completion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
						&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
					&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
				&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
			&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;failure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; 
			  &lt;span class=&#34;n&#34;&gt;completion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;failure&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;await&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;prepareForShow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scene&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
	&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dancers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;danceCompany&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;warmUp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minutes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;scenery&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;crew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fetchStageScenery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; 
	&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;openingScene&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setStage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scenery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dancers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moveToPosition&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;openingScene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不過這邊另一個問題是，Swift Concurrency 只有支援 iOS 15 / macOS 12 以後的版本⋯
相關的討論串可以看
&lt;a class=&#34;link&#34; href=&#34;https://forums.swift.org/t/will-swift-concurrency-deploy-back-to-older-oss/49370&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Will Swift Concurrency deploy back to older OSs?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;structured-concurrency&#34;&gt;Structured Concurrency&lt;/h3&gt;
&lt;p&gt;如果我們想讓 dances 和 scenery 同時進行，便可以改成 &lt;code&gt;async&lt;/code&gt; 的方式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;prepareForShow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scene&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
	&lt;span class=&#34;n&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dancers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;danceCompany&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;warmUp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minutes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; 
	&lt;span class=&#34;n&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;scenery&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;crew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fetchStageScenery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;openingScene&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setStage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scenery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dancers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moveToPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;openingScene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;actors&#34;&gt;Actors&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;StageManager&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Stage&lt;/span&gt; 
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;stage&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 

  &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setStage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scenery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scenery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;completion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;escaping&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
  	&lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backdrop&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scenery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backdrop&lt;/span&gt; 
      &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scenery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;props&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
      	&lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addProp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    	&lt;span class=&#34;n&#34;&gt;completion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentScene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;過去我們利用 &lt;code&gt;DispatchQueue&lt;/code&gt; 的 &lt;code&gt;async&lt;/code&gt; 方式來確保物件不會被同時寫入的問題。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;actor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StageManager&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Stage&lt;/span&gt; 

  &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setStage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scenery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scenery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scene&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  	&lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backdrop&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scenery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backdrop&lt;/span&gt; 
  	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scenery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;props&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
  		&lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addProp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentScene&lt;/span&gt; 
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;現在可以透過改以 Actor 的方式，它能夠達到上述的效果並且自動避免 race conditions；於是我們便不用手動地去執行 sync 的動作。&lt;/p&gt;
&lt;p&gt;而如果有特定的 function 必須在 main thread 上執行的話，則可以使用 &lt;code&gt;@MainActor&lt;/code&gt; 的方式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MainActor&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;swiftui&#34;&gt;SwiftUI&lt;/h3&gt;
&lt;p&gt;現在已經有不少原生的 apps 是使用 SwiftUI 寫出來的（像是天氣.app），而也有越來越多系統的元件也是使用 SwiftUI（如 Apple pay sheet）。&lt;/p&gt;
&lt;p&gt;而這一次也更新了許多新的 features 和 api，並支援了 #if else 來依照不同的 statement 也可以在 SwiftUI 上實作。&lt;/p&gt;
&lt;p&gt;詳細的內容等其他篇再來一同整理。&lt;/p&gt;
&lt;h3 id=&#34;swift-playground-4&#34;&gt;Swift Playground 4&lt;/h3&gt;
&lt;p&gt;Swift Playground 4 將今年上線，使用者可以直接在上頭 build app 並上傳到 App Store 去，意味著只使用 iPad 作為開發者裝置的可行性出現了。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1623467033840.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1623467033840.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1623467129289.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1623467129289.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;arkit&#34;&gt;ARKit&lt;/h3&gt;
&lt;p&gt;過往建立一個模型需要花費上小時的時間，而 Object Capture 可以利用 iPhone 或是 iPad 在幾分鐘的時間內建立一個 3D 模型。&lt;/p&gt;
&lt;p&gt;輸出的格式支援 USDZ，且利用 Procedural Geometry API 可以製作出更多新的效果，如食物上的熱氣或是火焰。&lt;/p&gt;
&lt;h3 id=&#34;focus&#34;&gt;Focus&lt;/h3&gt;
&lt;p&gt;算是勿擾模式的一個延伸，讓使用者有更多客製化的勿擾模式設定，而這些設定也會被套用在所有的平台上。&lt;/p&gt;
&lt;h3 id=&#34;notifications&#34;&gt;Notifications&lt;/h3&gt;
&lt;p&gt;Notifications 分成新的三種等級&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Passive：當使用者正在使用手機的時候，才會看到&lt;/li&gt;
&lt;li&gt;Active：原本的通知方式&lt;/li&gt;
&lt;li&gt;Time sensitive：有時效性的通知，並且 Siri 會透過 AirPods 來告知使用者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以管理個人化的 summary of notifications，而在新的 iMessage 下，notifications 將會把原先的 app icon 換成那個人的頭像。&lt;/p&gt;
&lt;h3 id=&#34;widget&#34;&gt;Widget&lt;/h3&gt;
&lt;p&gt;Widgets 支援擺放在 iPad 的主畫面，和 iOS 目前的效果一樣，並且可以設計更大尺寸的 widget。&lt;/p&gt;
&lt;h3 id=&#34;share-play-api&#34;&gt;Share Play API&lt;/h3&gt;
&lt;p&gt;開放新的 GroupActivities framework，讓使用者在 Facetime 通話中可以 share 自己的播放內容或者一起做某些事（so dome app activity together）。&lt;/p&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwdcnotes.com/notes/wwdc21/102/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WWDCNotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.apple.com/videos/play/wwdc2021/102&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Platforms State of the Union&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Magic Keyboard 2 藍牙連接延遲修正</title>
        <link>https://www.archie.tw/p/magic-keyboard-2-%E8%97%8D%E7%89%99%E9%80%A3%E6%8E%A5%E5%BB%B6%E9%81%B2%E4%BF%AE%E6%AD%A3/</link>
        <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/magic-keyboard-2-%E8%97%8D%E7%89%99%E9%80%A3%E6%8E%A5%E5%BB%B6%E9%81%B2%E4%BF%AE%E6%AD%A3/</guid>
        <description>&lt;p&gt;前陣子我的 Magic Keyboard 2 若沒有連接著線，則打字會有延遲的情況；一開始還以為是電腦卡頓的問題，但 Magic Trackpad 卻滑動地很順暢⋯
便接著線工作了一段時間，直到剛剛決定嘗試修復這問題&lt;/p&gt;
&lt;p&gt;以 &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; 點擊藍牙，我先是「重置藍牙模組」後仍沒有排除延遲的問題，後來選擇了「將所有連接的 Apple 裝置重置為出廠值」，
之後便一切恢復正常了！&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1623427646574.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1623427646574.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>設計學習補助計畫</title>
        <link>https://www.archie.tw/p/%E8%A8%AD%E8%A8%88%E5%AD%B8%E7%BF%92%E8%A3%9C%E5%8A%A9%E8%A8%88%E7%95%AB/</link>
        <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E8%A8%AD%E8%A8%88%E5%AD%B8%E7%BF%92%E8%A3%9C%E5%8A%A9%E8%A8%88%E7%95%AB/</guid>
        <description>&lt;p&gt;站在公司的角度來看，學習補助計畫是一個對於勞資雙方都有利的福利措施，不論員工的學習補助是投入在工作技能上或是日常生活的其他技能；如運動健身、廚藝或是音樂上，都能夠有機會使團隊成員在工作之餘學習新知，提升各成員的能力。&lt;/p&gt;
&lt;p&gt;而這邊我會以個人的角度，站在公司和員工的立場之間做思考和設計，有興趣的人可以一同分享你目前公司的補助方式或是想法。&lt;/p&gt;
&lt;h3 id=&#34;成本問題&#34;&gt;成本問題&lt;/h3&gt;
&lt;p&gt;我從 Yourator 上做了一些查詢，簡單舉四家新創公司的學習補助計畫&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;公司&lt;/th&gt;
&lt;th&gt;金額&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CodePro酷博兒童程式創客教育&lt;/td&gt;
&lt;td&gt;$2,000 月（$24,000 / 年？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;有物報告&lt;/td&gt;
&lt;td&gt;$10,000 / 年&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;均一平台教育基金會&lt;/td&gt;
&lt;td&gt;$5,000 / 年&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Surveycake&lt;/td&gt;
&lt;td&gt;$20,000 / 年&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;從這四家的金額來看，範圍落在 $5,000 - $24,000 / 年之間，假設有一個年薪 100 萬的員工來申請的話，意味著公司投入了 0.5 - 2.4% / 年的額外支出；而若這件事能夠使這名員工在工作上得到 0.5 - 2.4% 的成長，不論是工作表現或是團隊氣氛等，那在我看來都是一項划算的投資。&lt;/p&gt;
&lt;p&gt;其中 Survercake 的方案為補助學費的 50%，代表員工本身在學習這一塊上也得投入一半的費用，這也許是一個不錯的方式，能讓員工更正視學習，畢竟自己也有投入一定的成本。&lt;/p&gt;
&lt;h3 id=&#34;非工作相關的課程補助&#34;&gt;非工作相關的課程補助&lt;/h3&gt;
&lt;p&gt;如健身、音樂、廚藝等非工作相關的課程，我先簡單找了幾個課程費用來評估&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名稱&lt;/th&gt;
&lt;th&gt;費用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;丙級廚師證照班&lt;/td&gt;
&lt;td&gt;$18,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大安國民運動中心&lt;/td&gt;
&lt;td&gt;$50 / 小時&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;健身一對一教練課&lt;/td&gt;
&lt;td&gt;$1,200 / 次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;鋼琴家教&lt;/td&gt;
&lt;td&gt;$500 - 1,000 / 小時&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;工作相關的年度盛會門票價格&#34;&gt;工作相關的年度盛會門票價格&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名稱&lt;/th&gt;
&lt;th&gt;門票金額&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Google I/O&lt;/td&gt;
&lt;td&gt;USD $1,150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WWDC&lt;/td&gt;
&lt;td&gt;USD $1,599&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPlayground&lt;/td&gt;
&lt;td&gt;TWD $1,800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pycon&lt;/td&gt;
&lt;td&gt;TWD $3,500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IxDA&lt;/td&gt;
&lt;td&gt;TWD $9,800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOPCON&lt;/td&gt;
&lt;td&gt;TWD $800&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;這邊列出來幾個和我工作比較相關聯的開發 / 設計大會，這類門票除了國外的 Google I/O 和 WWDC 以外，其餘的金額皆算是上述補助方案的範圍之內。&lt;/p&gt;
&lt;h3 id=&#34;個人想法&#34;&gt;個人想法&lt;/h3&gt;
&lt;p&gt;學習補助的方式以是否和工作技能相關來區分，而這點由員工自由心證即可；如 Android 工程師報名了 Pycon 等，就不會刻意去詢問是否該列為非工作技能的補助。&lt;/p&gt;
&lt;p&gt;在上限固定的情況下，分成這兩種模式申請和補助&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;補助&lt;/th&gt;
&lt;th&gt;方式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;工作技能相關課程&lt;/td&gt;
&lt;td&gt;全額補助&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非工作技能相關課程&lt;/td&gt;
&lt;td&gt;50% 補助&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;而如 iPlayground、Pycon、IxDA 等門票類型的學習，則在公司內主動發起團體票的模式詢問員工是否有意願參加，來增加團隊成員一同出席的機率和節省支出（團體票價比較便宜）。&lt;/p&gt;
&lt;p&gt;以上為我個人目前的設計方向和規劃，你們公司有什麼值得分享的方式歡迎提出一同羨慕！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Apple Watch App 開發除錯心得</title>
        <link>https://www.archie.tw/p/apple-watch-app-%E9%96%8B%E7%99%BC%E9%99%A4%E9%8C%AF%E5%BF%83%E5%BE%97/</link>
        <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/apple-watch-app-%E9%96%8B%E7%99%BC%E9%99%A4%E9%8C%AF%E5%BF%83%E5%BE%97/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;前陣子在幫&lt;a class=&#34;link&#34; href=&#34;https://apps.apple.com/tw/app/%e6%b0%b4%e6%bb%b4%e7%99%bc%e7%a5%a8/id1522605672&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;水滴發票&lt;/a&gt;加入 Apple Watch 的功能，這篇文章會紀錄下開發的一些想法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;資料傳遞方面&#34;&gt;資料傳遞方面&lt;/h3&gt;
&lt;p&gt;因為 Watch app 本身可以為一個獨立的 app，所以 &lt;code&gt;UserDefaults&lt;/code&gt; 的部分則會擁有自己的一份，也就是說兩者之間無法像是 Widget 一般透過同一個 Group 的 &lt;code&gt;UserDefault&lt;/code&gt; 來同步資料。&lt;/p&gt;
&lt;h3 id=&#34;解決方法&#34;&gt;解決方法&lt;/h3&gt;
&lt;p&gt;利用 &lt;code&gt;WCSession&lt;/code&gt; 來做傳遞資料。&lt;/p&gt;
&lt;h3 id=&#34;實機測試時wcsessionisreachable-始終為-false&#34;&gt;實機測試時，WCSession.isReachable 始終為 false&lt;/h3&gt;
&lt;p&gt;主要就是手機和手錶之間一直無法透過 &lt;code&gt;WCSession&lt;/code&gt; 連接上彼此，會造成幾個問題如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apple Watch App 一直卡在安裝中，無法順利安裝&lt;/li&gt;
&lt;li&gt;無法透過 WCSession 從 iOS app 傳遞資料過去給 Watch app&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解決方法-1&#34;&gt;解決方法&lt;/h3&gt;
&lt;p&gt;我遇到這情況是都選擇重開 iPhone 來處理。&lt;/p&gt;
&lt;h3 id=&#34;apple-watch-模擬器和實機上的測試結果不同&#34;&gt;Apple Watch 模擬器和實機上的測試結果不同&lt;/h3&gt;
&lt;p&gt;在這次的開發之中，我們有使用到比較大的數字在中間傳遞，而原先沒多考慮就以 &lt;code&gt;Int&lt;/code&gt; 來存 &lt;code&gt;Timestamp&lt;/code&gt;，並在 Apple Watch 的模擬器上測試過幾輪沒出現問題；直到發佈 TestFlight 後才陸續出現在實體裝置上。
進而才意會到模擬器上的 &lt;code&gt;Int&lt;/code&gt; 是 64 bit（Int.max = 9223372036854775807），而實際上以 Apple Watch SE6 來說，是 32 bit（Int.max = 2147483647），所以根本不能這樣存。&lt;/p&gt;
&lt;h3 id=&#34;解決方法-2&#34;&gt;解決方法&lt;/h3&gt;
&lt;p&gt;重新審視一次當初自己疏忽掉的 size 問題，並寫篇筆記提醒自己以後開發 Apple Watch app 的時候要注意 CPU 上的差異。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>新創神秘故事：造假的學經歷背景</title>
        <link>https://www.archie.tw/p/%E6%96%B0%E5%89%B5%E7%A5%9E%E7%A7%98%E6%95%85%E4%BA%8B%E9%80%A0%E5%81%87%E7%9A%84%E5%AD%B8%E7%B6%93%E6%AD%B7%E8%83%8C%E6%99%AF/</link>
        <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E6%96%B0%E5%89%B5%E7%A5%9E%E7%A7%98%E6%95%85%E4%BA%8B%E9%80%A0%E5%81%87%E7%9A%84%E5%AD%B8%E7%B6%93%E6%AD%B7%E8%83%8C%E6%99%AF/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;新創神秘故事的內容來自親朋好友以及自身經驗，寫出來的宗旨為提供求職者或是在新創圈奮鬥的工程師們一個借鏡，以避免重蹈覆轍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;這些話寫在前面&#34;&gt;這些話寫在前面&lt;/h3&gt;
&lt;p&gt;這故事和 &lt;a class=&#34;link&#34; href=&#34;../%e6%96%b0%e5%89%b5%e7%a5%9e%e7%a7%98%e6%95%85%e4%ba%8b%e8%80%81%e9%97%86%e7%9a%84%e5%bc%9f%e5%bc%9f/&#34; &gt;老闆的弟弟&lt;/a&gt; 是不同家公司，所以兩者之間並沒有關聯，神秘的地方也有所不同，這次的故事主角並非是 Founder / Co-Founder 的，而是某位神秘的員工。&lt;/p&gt;
&lt;h2 id=&#34;故事開始&#34;&gt;故事開始&lt;/h2&gt;
&lt;p&gt;在加入這家公司時，已經有一些成員在裡頭，像是 backend、Android、UI / UX、HR 等，以一個新創團隊來說是相對完整的；不過其中最微妙的就是，在我剛進入的時候，公司有數個負責行銷、市場的實習生，詳細的人數有些忘了，印象中是 5 - 10 個這種數字。&lt;/p&gt;
&lt;p&gt;不過我確定的是，工程師包含我只有三人，也就是上述提及的三個工程師職位而已。&lt;/p&gt;
&lt;p&gt;這些實習生的 owner，是一位負責行銷和市場驗證的；他將這些實習生分成幾個功能面向，有些負責行銷發想，有些負責市場分析、有些負責調查，而實習生們會定期分享他們的成果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這件事本身沒什麼問題，問題在於發生的時間點&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;工程和行銷之間的失衡&#34;&gt;工程和行銷之間的失衡&lt;/h2&gt;
&lt;p&gt;剛進去的時候，是預計要做一個新的 app 出來，也就是要做一個 MVP 的意思；而在還沒有產品的時候，公司卻投入了大量的人力和資源去做行銷這一塊，是有些本末倒置的。&lt;/p&gt;
&lt;p&gt;而在還沒有產品可以推出的時候，行銷團隊基本上只能做市場的調查和分析，以及使用者訪談等釐清功能的優先順序之類的。&lt;/p&gt;
&lt;p&gt;不過事情總是不可能如此順遂，一來是實習生能提供的多數是人力上的協助，產出的分析和調查能力有限、二來是當我們工程團隊的產出能量不及行銷團隊發想的爆炸速度時，多半後續的發想都偏向空想居多；也就是說無法在產品推出後先驗證一下市場，再進行下一步的規劃和分析調查。&lt;/p&gt;
&lt;p&gt;那段時間還會時不時地出現一顆顆的隕石砸落在工程團隊上，用新的分析或是功能設計來推翻前一次的結論等，也就加劇了彼此之間的失衡。&lt;/p&gt;
&lt;p&gt;這其中一個問題便是在 MVP 並沒有被定義清楚，導致產出上不斷地重新定義許多功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這時候不經讓我們思考，為何需要在這麼前期的時候聘用那麼多行銷實習生？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;重新調整組織&#34;&gt;重新調整組織&lt;/h2&gt;
&lt;p&gt;這時候，上頭的人決定去和負責的同仁討論這部分的問題，不過該同仁十分堅決地表示自己需要這數量的實習生們協助她做這些調查和分析，才能夠好好做事；並開始放招，將過往的經歷一一拿出來來佐證自己的決策是可行的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這部分其實也沒什麼問題，拿自身經驗來告知團隊決策的依據是什麼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不過她的一些行為開始讓我們有些懷疑，她過往的那些經歷和公司真的會使她能夠做出這種決策嗎？&lt;/p&gt;
&lt;p&gt;這時，她提及的這些經歷在其他人的心中產生了一些不確定性，於是我們決定查驗一下。&lt;/p&gt;
&lt;h2 id=&#34;dd---due-diligence&#34;&gt;DD - Due Diligence&lt;/h2&gt;
&lt;p&gt;在新創圈這個詞應該算是蠻常見的，主要是投資方和被投資方去實際查核對方是的背景和談判的內容是否如實地在運行。&lt;/p&gt;
&lt;p&gt;而使用在人身上，便是去查核其履歷上提及的資訊，簡單來說就是徵信社的概念。&lt;/p&gt;
&lt;p&gt;這邊就會呼應到一件事，就是其實新創團隊在初期的時候並沒有那麼多資源可以投入在查核履歷這方面；有更多的時間和人力多半都會投資在開發 MVP 之上，而非花時間和精力去查核一個員工的履歷內容是否如其所說的。&lt;/p&gt;
&lt;p&gt;多半都會選擇相信對方來降低這部分的成本，除非⋯&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;選擇繼續相信的潛在成本已經高於查核這件事所需要的成本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;開始柯南式的調查&#34;&gt;開始柯南式的調查&lt;/h2&gt;
&lt;p&gt;首先，我們從他的學歷開始調查，於是便致電到他履歷上所寫的畢業系所去詢問一下；而這時候得到令人發寒的回訊⋯&lt;/p&gt;
&lt;p&gt;該系所的系秘告知，該同學在大學 O 年級的時候，因為一些原因便休學了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「！」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;辦公室氣氛開始陷入一個謎樣的狀態，我自己是有一種莫名的興奮，比較白話的心路歷程大概就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「幹！三小啊！」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這時候就更好奇其他履歷上的資訊內容了⋯於是便一一地去查核了各個 title，而分別是得到&lt;/p&gt;
&lt;p&gt;「他在我們這邊只工作過一小段時間哦，而且職位並非是 OOO。」
「他只是 OOO，並非負責 OOO 哦！」&lt;/p&gt;
&lt;p&gt;諸如此類的答覆，基本上就確定了一件事情，就是他的話並沒有實際上地那麼可信任。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;請容許我說得十分保留&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;後續&#34;&gt;後續&lt;/h2&gt;
&lt;p&gt;其實就是攤牌，然後發生了一些雜事和麻煩事，而處理這些突發事項也消耗了我們大量的時間和資源；不論是花時間去談、去 DD 或是影響其他人的工作心情等，都是十分讓人頭疼的，況且又是在公司初期。&lt;/p&gt;
&lt;p&gt;這段時間的影響也十分顯著地反應在各個層面上。&lt;/p&gt;
&lt;h2 id=&#34;學到了什麼&#34;&gt;學到了什麼？&lt;/h2&gt;
&lt;p&gt;在初期招募團隊成員的時候，基本上還是需要投入一些時間去了解對方的背景；這也可以理解為什麼初期創業的時候，大家都會先選擇從自己認識的人開始涉略。
可以一定程度地避免掉創業初期的黃金時間都浪費在不必要的瑣事上，進而耽誤了驗證市場的時機點。&lt;/p&gt;
&lt;p&gt;還有對於任何事情的決策都要保有一定程度的懷疑，並時常練習去詢問、去了解對方做這件事背後的目的性，而非輕易地相信別人的學經歷。&lt;/p&gt;
&lt;p&gt;建議的做法是初期先以一些較小的專案或是功能來嘗試合作，培養起彼此之間的默契和信任後再放手給對方去做；不論對方是合夥人、團隊成員甚 junior 的工程師或實習生等。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>新創神秘故事：老闆的弟弟</title>
        <link>https://www.archie.tw/p/%E6%96%B0%E5%89%B5%E7%A5%9E%E7%A7%98%E6%95%85%E4%BA%8B%E8%80%81%E9%97%86%E7%9A%84%E5%BC%9F%E5%BC%9F/</link>
        <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E6%96%B0%E5%89%B5%E7%A5%9E%E7%A7%98%E6%95%85%E4%BA%8B%E8%80%81%E9%97%86%E7%9A%84%E5%BC%9F%E5%BC%9F/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;新創神秘故事的內容來自親朋好友以及自身經驗，寫出來的宗旨為提供求職者或是在新創圈奮鬥的工程師們一個借鏡，以避免重蹈覆轍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;故事開始&#34;&gt;故事開始&lt;/h2&gt;
&lt;p&gt;曾加入過一家新創 / 小公司，公司成員的組成為 CEO、CTO、PM、backend、Android、設計以及我負責 iOS。&lt;/p&gt;
&lt;p&gt;在面試的時候，是由 PM 來交辦面試流程，她會給你一個測驗用的專案，裡頭有 3 個 bugs 需要修，修完之後通知她，接著她就會照規格去驗證；從這個面試流程不難想像合作的時候，工作流程就是如此。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這部分我反倒覺得不錯，因為可以在面試的時候就先了解這公司的開發流程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而這專案的 Xcode 和 Swift 版本都不是最新的，這部分就反應了兩個潛在問題需要釐清&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面試的專案並沒有在維護&lt;/li&gt;
&lt;li&gt;目前開發的專案本身就是舊版本的 Xcode + Swift 在開發&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果是後者的話，那就是一個蠻細心的面試題。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不過答案是前者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接著就進到和 CEO 談 offer 的階段，這邊部分的面試給我的感覺還不錯，感覺的到對方是真的有希望你能夠加入；並有提及該職缺向上就是 CTO，且 CTO 人在國外，所以彼此會需要磨合開發的流程。&lt;/p&gt;
&lt;p&gt;而 CEO 有提到，他並不會介入我們的開發規劃，所以只要 CTO 做的決策他這邊都可以接受。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這點也是好事，CEO 不會介入開發的時程安排，至少確定隕石流開發的可能降低了一半。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不過恐怖的事情也是如此發生的⋯&lt;/p&gt;
&lt;h2 id=&#34;報到第一天&#34;&gt;報到第一天&lt;/h2&gt;
&lt;p&gt;我所拿到的開發裝置是一台 iMac，PM 吩咐我說每天下班的時候都要記得關機（？），說這是上頭要求的。
在我對這事情還沒有太多頭緒，只覺得有點問號的時候，打開了這台 iMac 要開始安裝 Xcode 等軟體時發現⋯&lt;/p&gt;
&lt;p&gt;我並沒有權限可以直接安裝任何軟體。&lt;/p&gt;
&lt;p&gt;PM：「技術長有和我說，如果你有需要安裝什麼軟體的話，列出來他會負責安裝進去。」&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;意思就是技術長有遠端可以操控這台電腦的權限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我當下就覺得這件事情十分的不妙，於是便要求直接開權限給我，不過這件事被駁回了。&lt;/p&gt;
&lt;p&gt;「不然就先來看看工作內容吧⋯」&lt;/p&gt;
&lt;p&gt;當時我們要做一個通訊的功能，CTO 其實早有規劃要使用一個第三方套件來做，所以要我去研究並將那套件的流程架構圖畫出來給他看。
於是我便網頁開著，加上公司的電腦權限一堆都沒開，所以我就用自己的電腦打開 demo project 開始研究。&lt;/p&gt;
&lt;p&gt;下班後便配合公司要求關機，離開公司。&lt;/p&gt;
&lt;p&gt;題外話是，公司要求大家 09:00 - 09:15 之間上班，18:30 以後才能下班；我詢問了為什麼是 9.5 小時，PM 的答覆是上頭（CEO + CTO）說大部分人都會抽菸，一天大概會佔據半小時的時間，所以大家都是會補那半小時的工作時間⋯&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先不管抽菸休息要補時間這件事情合不合理，問題是我不抽菸啊！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一天就帶著各種問號的心情下班，更多的是覺得怎麼在下次面試的時候避開這些雷⋯&lt;/p&gt;
&lt;h2 id=&#34;隔天到當週結束&#34;&gt;隔天到當週結束&lt;/h2&gt;
&lt;p&gt;PM 一早遇到我，便反應我昨天是否都沒有進度（？），於是我和他討論了可以引入這第三方套件的哪些元件，而哪些其實我們可以自己寫，彈性比較好；不過 PM 則面有難色的表示 CTO 希望全部使用那套件的東西就好，因為他已經評估過了。&lt;/p&gt;
&lt;p&gt;接著從一些和其他人閒聊之中得知，CTO 會從國外在背景遠端看你正在幹嘛⋯&lt;/p&gt;
&lt;p&gt;這有著蠻嚴重的問題，是技術長明顯不信任員工，且是蠻誇張的那種不信任，而他只能接受員工照他的方式開發&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;畫流程圖 -&amp;gt; 和他報告確認是否和他理解的一致 -&amp;gt; 確認你打算做的都和他一模一樣 -&amp;gt; 開發&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而這情況還建立在對方對於 iOS 上的熟悉度明顯不足，就是一個有寫過、會使用套件的程度而已。&lt;/p&gt;
&lt;p&gt;經過幾次討論後，技術長並不接受我的想法，而我也強烈地感受到無能為力的痛苦，於是便和 PM 以及其他 backend 同事聊了一下狀況，發現其實技術長的問題不少，只是大家都吞忍著配合；一個同事私下和我說，前一個離開的 iOS 也是因為技術長的刁難，而選擇離開。&lt;/p&gt;
&lt;p&gt;在當週五，我便決定和 CEO 攤牌這些事，希望能夠有效地解決這些問題，殊不知⋯&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CTO 就是 CEO 的親弟弟，且驗證了他當時說的一句話。「技術長做的決策我都會接受」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CEO 也有表示他知道 CTO 的狀況，所以公司是希望能找到一位能夠與他配合的工程師，能力是其次；
頓時我就決定攤牌攤一攤，選擇離開這鬼地方（應該是說讓他們資遣我），快速逃離！離開的當下真的有一種解脫感，一個禮拜的鳥事都解脫的愉悅！&lt;/p&gt;
&lt;h2 id=&#34;家族企業的縮影&#34;&gt;家族企業的縮影&lt;/h2&gt;
&lt;p&gt;這也是蠻特別的經驗，能夠在新創小公司遇到這種事，有時候也在想若我是該哥哥的話，是否也會做出一樣的決策來鞏固自己家人的位置，還是會選擇相信員工們的聲音做出調整呢？&lt;/p&gt;
&lt;h3 id=&#34;學到了什麼&#34;&gt;學到了什麼？&lt;/h3&gt;
&lt;p&gt;在面試的時候，需要花一些時間在討論成員組成的關係，新創公司的初期成員更是重要，如這位技術長真的是因為技術條件突出而被招募進來的，還是只是會技術的一個親友，所以老闆就選擇讓他加入？&lt;/p&gt;
</description>
        </item>
        <item>
        <title>為什麼加入新創公司？</title>
        <link>https://www.archie.tw/p/%E7%82%BA%E4%BB%80%E9%BA%BC%E5%8A%A0%E5%85%A5%E6%96%B0%E5%89%B5%E5%85%AC%E5%8F%B8/</link>
        <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E7%82%BA%E4%BB%80%E9%BA%BC%E5%8A%A0%E5%85%A5%E6%96%B0%E5%89%B5%E5%85%AC%E5%8F%B8/</guid>
        <description>&lt;h2 id=&#34;為什麼加入____公司&#34;&gt;為什麼加入____公司？&lt;/h2&gt;
&lt;p&gt;如果你已經工作一段時間，或者是正打算開始求職的新鮮人，不妨先花個幾分鐘的時間思考一下這問題。&lt;/p&gt;
&lt;p&gt;接著，我來回答這個問題&lt;/p&gt;
&lt;h2 id=&#34;為什麼加入新創公司&#34;&gt;為什麼加入新創公司？&lt;/h2&gt;
&lt;p&gt;從幾個層面來分析我在求職上的選擇和考量&lt;/p&gt;
&lt;h3 id=&#34;學歷&#34;&gt;學歷&lt;/h3&gt;
&lt;p&gt;我是名輔仁大學電機工程學系的學士畢業生，在求學期間並沒有額外去修資工的課程，憑著自己在替代役期間對於 iOS 開發的好奇和興趣，而走向了 iOS 工程師的職涯選擇。&lt;/p&gt;
&lt;p&gt;對於許多公司而言，我的學歷背景並非能夠吸引到他們，特別是比較有規模的公司。&lt;/p&gt;
&lt;p&gt;他們看重新鮮人的學歷，甚至以此為核薪的依據，畢竟拿學歷直接評斷一個人的能力，是一件相對輕鬆的事；他們就可以少花一些心力在了解求職者的想法上，讀書成績不錯，基本上確保了你這個人至少在學科上是有能力的。&lt;/p&gt;
&lt;p&gt;於是，在我第一次去參加某上市公司的 Junior iOS 工程師面試時，被要求要帶畢業證書影本（證明真的有大學畢業）和準備成績單這種事，似乎就不怎麼意外了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「輔大畢業想領 OOK？我們這邊台大畢業生都只有 OOK 了！我這邊只願意開 OOK 給你！」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當下的感覺挺不舒服的（對，就是不爽），便直接婉拒後續的面談離開。&lt;/p&gt;
&lt;p&gt;在有了經驗後，我開始刻意地避開要求學歷或本科系的 Junior 職缺，而尋找對於求職者比較 open mind 的職缺內容介紹。&lt;/p&gt;
&lt;p&gt;沒有學歷加分的情況下，我在準備面試的策略是個人的 side project，並尋找願意聽我分享開發 side project 心路歷程的公司。&lt;/p&gt;
&lt;p&gt;自己當時篩選的條件為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公司文化開放&lt;/li&gt;
&lt;li&gt;做產品導向的公司，而非外包&lt;/li&gt;
&lt;li&gt;不限本科系學生&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而恰好多數的台灣新創都保留類似的特質，也給了我一個真正開始做產品的機會。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新創神秘故事：當公司十分看重學歷時&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;彈性&#34;&gt;彈性&lt;/h3&gt;
&lt;p&gt;多數的新創公司都是責任制，上下班的時間較為彈性；這部分有些人喜歡，有些人反感。&lt;/p&gt;
&lt;p&gt;但以我的個性，本來就不適合太制式化的上班環境，像是穿制服、遲到要扣錢之類的，都不是心目中理想的工作環境。&lt;/p&gt;
&lt;p&gt;舉凡連假前能夠提早離開來避開車潮、遇到週末補班時選擇放假或是輕鬆的工作模式等，我認為都是新創比一般或是傳產較為願意調整的地方。&lt;/p&gt;
&lt;p&gt;上述談的是物理上的彈性，而實際上新創的工作氛圍還需要提供大家思維上的彈性空間，也就是讓多數人能夠且願意表達自己的想法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新創神秘故事：表面上彈性，背地裏算計&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;參與產品的程度&#34;&gt;參與產品的程度&lt;/h3&gt;
&lt;p&gt;在投入到新創的產業中，多半都有更多的機會可以參與到整個產品的開發和設計走向；不會只是單純做一個功能的維護開發或是效能的優化調教。&lt;/p&gt;
&lt;p&gt;這部分也是見仁見智，有些人喜歡專研特定的技術並走得深入、有些人喜歡做產品，就得多碰許多不同層面的東西，但就沒那麼多心力可以投入在單一的點上。&lt;/p&gt;
&lt;p&gt;而新創團隊人數通常在一開始都不會太多，所以十分容易出現一個人負責一個平台，並需要常常跨平台、跨領域的去和其他人進行溝通討論。&lt;/p&gt;
&lt;p&gt;反之，若當公司的發展和產品的規劃，漸漸地都是由有權力的少數人在掌控時，那也就漸漸脫離新創的特質。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新創神秘故事：沒拿薪水的人說的算？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;參與公司文化的建立&#34;&gt;參與公司文化的建立&lt;/h3&gt;
&lt;p&gt;已經有一定規模的公司，基本上文化的部分是吸引人才加入的原因；而新創的話則是提供你一個可以去影響公司文化的舞台，簡單來說就是你的所作所為都有可能推動或是改變公司特定的風氣。&lt;/p&gt;
&lt;p&gt;在這方面上，已經和單純的軟體開發工作有一些落差；在新創裡頭，我們不只需要維護程式碼的品質，甚至是成員間的互動和想像。&lt;/p&gt;
&lt;p&gt;特別是越早加入的成員，影響公司的文化風氣越深；所以若有機會進入越早期的團隊，越有機會將團隊文化帶向你所期望的地方去。不過相對的就會越不穩定，個人的風險就會越高。&lt;/p&gt;
&lt;h3 id=&#34;高風險追求高報酬&#34;&gt;高風險追求高報酬&lt;/h3&gt;
&lt;p&gt;新創提供不了大公司的穩定職涯環境，取而代之的是有爆發的潛力；多半的新創團隊在找尋人才時，需要提供相對高的利益條件（股權、薪資、休假福利等）才會越有機會說服對方捨棄大公司的穩定來一搏。&lt;/p&gt;
&lt;p&gt;不過錢燒完了若拿不到下一輪投資或者自己變現的話，就差不多宣告解散！&lt;/p&gt;
&lt;h3 id=&#34;最後一點有趣&#34;&gt;最後一點，有趣&lt;/h3&gt;
&lt;p&gt;新創團隊會遇到各種光怪陸離的事情，基本上不是一般 iOS 開發工作會碰上的事⋯也就在年輕的時候可以多多體會這個創業的世界是如何在運轉，並看清各種神秘操作來學習提升自我的價值和社會觀。&lt;/p&gt;
&lt;p&gt;也就可以在事過境遷之後寫下一堆不可思議的故事⋯&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新創神秘故事：消失的投資人&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;../%e6%96%b0%e5%89%b5%e7%a5%9e%e7%a7%98%e6%95%85%e4%ba%8b%e9%80%a0%e5%81%87%e7%9a%84%e5%ad%b8%e7%b6%93%e6%ad%b7%e8%83%8c%e6%99%af/&#34; &gt;新創神秘故事：造假的學經歷背景&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;../%e6%96%b0%e5%89%b5%e7%a5%9e%e7%a7%98%e6%95%85%e4%ba%8b%e8%80%81%e9%97%86%e7%9a%84%e5%bc%9f%e5%bc%9f/&#34; &gt;新創神秘故事：老闆的弟弟&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;所有的選擇都是學習&#34;&gt;所有的選擇都是學習&lt;/h3&gt;
&lt;p&gt;上面的新創神秘故事系列是我在寫這篇文章時，想到過去發生的神秘事件們；之後會在陸續挑出來和大家聊聊！&lt;/p&gt;
&lt;p&gt;也歡迎大家分享神秘的故事給我聽聽！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>RxSwift 6 上線啦！</title>
        <link>https://www.archie.tw/p/rxswift-6-%E4%B8%8A%E7%B7%9A%E5%95%A6/</link>
        <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/rxswift-6-%E4%B8%8A%E7%B7%9A%E5%95%A6/</guid>
        <description>&lt;p&gt;2021 的開始，&lt;a class=&#34;link&#34; href=&#34;https://github.com/ReactiveX/RxSwift&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RxSwift 6&lt;/a&gt; 悄悄地上線啦！你可以從&lt;a class=&#34;link&#34; href=&#34;https://dev.to/freak4pc/what-s-new-in-rxswift-6-2nog&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;這個網站&lt;/a&gt;來看看有哪些更新，或看看這篇筆記📒&lt;/p&gt;
&lt;h3 id=&#34;這次更新的項目為&#34;&gt;這次更新的項目為&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;新的 logo&lt;/li&gt;
&lt;li&gt;將 &lt;code&gt;Binder&lt;/code&gt; 從 RxCocoa 移植到 RxSwift&lt;/li&gt;
&lt;li&gt;RxSwift 新增 &lt;code&gt;withUnretained&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;透過 &lt;code&gt;@dynamicMemberLookup&lt;/code&gt; 來自動建立 &lt;code&gt;Binder&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Infallible&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Observable&amp;lt;Data&amp;gt;&lt;/code&gt; 新增 &lt;code&gt;decode(type:decoder:)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Variadic drive() 和 emit()&lt;/li&gt;
&lt;li&gt;將 &lt;code&gt;Single&lt;/code&gt; 的結果調整成 &lt;code&gt;Result&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distinctUntilChange(at:)&lt;/code&gt; 支援 &lt;code&gt;Key Paths&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新增 &lt;code&gt;ReplayRelay&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新增 &lt;code&gt;DisposeBag&lt;/code&gt; 的 functional builder&lt;/li&gt;
&lt;li&gt;重新命名運算子&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;新的-logo&#34;&gt;新的 logo&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://res.cloudinary.com/practicaldev/image/fetch/s--Ue13KboV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xt6qirm3yfvnxyc5dhrd.gif&#34;  title=&#34;powered by dev.to&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://res.cloudinary.com/practicaldev/image/fetch/s--Ue13KboV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xt6qirm3yfvnxyc5dhrd.gif&#34; &gt;
		&lt;img src=&#34;https://res.cloudinary.com/practicaldev/image/fetch/s--Ue13KboV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xt6qirm3yfvnxyc5dhrd.gif&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;powered by dev.to&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;powered by dev.to&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;將-binder-從-rxcocoa-移植到-rxswift&#34;&gt;將 &lt;code&gt;Binder&lt;/code&gt; 從 RxCocoa 移植到 RxSwift&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;原本 &lt;code&gt;Binder&lt;/code&gt; 是屬於 RxCocoa 裡頭的元件，而在社群大家的討論下，便在這一次的更新內容，將其收納進了 RxSwift 之中。&lt;/p&gt;
&lt;h3 id=&#34;rxswift-新增-withunretained&#34;&gt;RxSwift 新增 &lt;code&gt;withUnretained&lt;/code&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;我們在寫 &lt;code&gt;RxSwift&lt;/code&gt; 時，還是得注意 retain cycle 的問題，而多半我們處理的方式如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;someObservable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onNext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;weak&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;disposed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disposeBag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而在導入了 &lt;code&gt;withUnretained&lt;/code&gt; 之後，便等於是直接包裝掉這部分的處理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;someObservable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withUnretained&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onNext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;soSomething&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;disposed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disposeBag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;透過-dynamicmemberlookup-來自動建立-binders&#34;&gt;透過 &lt;code&gt;@dynamicMemberLookup&lt;/code&gt; 來自動建立 &lt;code&gt;Binder&lt;/code&gt;s&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;在 Swift 5.1 導入了 &lt;code&gt;@dynamicMemberLookup&lt;/code&gt; 機制之後，RxSwift 6 也做出了相對應的處理；若沒有要做特定的動作的話，我們將可以不用將元件的變數一個一個地去撰寫 &lt;code&gt;Binder&lt;/code&gt;，而是可以直接使用 &lt;code&gt;@dynamicMemberLookup&lt;/code&gt; 所提供的好處。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.archie.tw/wp-content/uploads/2021/01/image-1609899943346.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1609898542190.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1609898542190.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如上述圖片顯示，我們不必 &lt;code&gt;import RxCocoa&lt;/code&gt; 也可以直接對 &lt;code&gt;UILabel().rx.text&lt;/code&gt; 做 binder 原本做的事。&lt;/p&gt;
&lt;h3 id=&#34;infallible&#34;&gt;Infallible&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;簡單來說，&lt;code&gt;Infalliable&lt;/code&gt; 就是字面上的意思，為一個只可以發送 &lt;code&gt;.completed&lt;/code&gt; 和 &lt;code&gt;.next(Element)&lt;/code&gt; 的元件；不同於原本在 RxCocoa 裡頭的 &lt;code&gt;Driver&lt;/code&gt; 和 &lt;code&gt;Signal&lt;/code&gt;，它並不會被要求在 &lt;code&gt;MainScheduler&lt;/code&gt; 下執行且它隸屬於 RxSwift。&lt;/p&gt;
&lt;h3 id=&#34;observabledata-新增-decodetypedecoder&#34;&gt;&lt;code&gt;Observable&amp;lt;Data&amp;gt;&lt;/code&gt; 新增 &lt;code&gt;decode(type:decoder:)&lt;/code&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;Observable&amp;lt;Data&amp;gt;&lt;/code&gt; 提供了 &lt;code&gt;decode(type:decoder:)&lt;/code&gt;，讓網路請求的處理可以更簡潔！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rx&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fetchJSONUsers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Observable&amp;lt;Data&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JSONDecoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Observable&amp;lt;[User]&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;variadic-drive-和-emit&#34;&gt;Variadic drive() 和 emit()&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;在 RxSwift 5 裡頭有介紹到 variadic &lt;code&gt;bind&lt;/code&gt; 的使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;viewModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而 RxSwift 6 則在 &lt;code&gt;drive()&lt;/code&gt; 和 &lt;code&gt;emit()&lt;/code&gt; 上提供了 variadic 的操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;viewModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;viewModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;emit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;將-single-的結果調整成-result&#34;&gt;將 &lt;code&gt;Single&lt;/code&gt; 的結果調整成 &lt;code&gt;Result&lt;/code&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;Single&lt;/code&gt; 現在的 action 從原本的 &lt;code&gt;onSuccess&lt;/code&gt; 和 &lt;code&gt;onError&lt;/code&gt; 調整成 &lt;code&gt;Result&lt;/code&gt; 的格式，也就是 &lt;code&gt;onSuccess&lt;/code&gt; 以及 &lt;code&gt;onFailure&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;distinctuntilchangedat-支援-key-paths&#34;&gt;&lt;code&gt;distinctUntilChanged(at:)&lt;/code&gt; 支援 Key Paths&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;distinctUntilChanged&lt;/code&gt; 提供了一種支援 Key Paths 的方式，讓我們能夠從原先的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;someObservable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;distinctUntilChanged&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;someVariable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;someVariable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改成對該物件的變數去操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;someObservable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;distinctUntilChanged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;someVariable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;新增-replayrelay&#34;&gt;新增 &lt;code&gt;ReplayRelay&lt;/code&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;ReplayRelay&lt;/code&gt; 就直接上 code 來理解！
&lt;a class=&#34;link&#34; href=&#34;https://www.archie.tw/wp-content/uploads/2021/01/image-1609899943346.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1609899943346.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1609899943346.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;新增-disposebag-的-functional-builder&#34;&gt;新增 &lt;code&gt;DisposeBag&lt;/code&gt; 的 functional builder&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;這邊直接複製 &lt;a class=&#34;link&#34; href=&#34;https://dev.to/freak4pc/what-s-new-in-rxswift-6-2nog&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;原文&lt;/a&gt; 的教學內容&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;disposeBag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DisposeBag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
    &lt;span class=&#34;n&#34;&gt;observable1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;observable2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;observable3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onNext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; 
        &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Got &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Also works for insertions&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;disposeBag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;observable4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;observable5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;重新命名運算子&#34;&gt;重新命名運算子&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;RxSwift 5&lt;/th&gt;
&lt;th&gt;RxSwift 6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;catchError(_:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;catch(_:)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;catchErrorJustReturn(_:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;catchAndReturn(_:)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;elementAt(_:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;element(at:)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;retryWhen(_:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;retry(when:)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;takeUntil(_:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;take(until:)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;takeUntil(behavior:_:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;take(until:behavior:)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;takeWhile(_:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;take(while:)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;takeWhile(behavior:_:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;`take(while:behavior:)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;take(.seconds(3))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;`take(for: .seconds(3))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;skipWhile(_:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;`skip(while:)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;takeUntil(_:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;take(until:)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;observeOn(_:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;`observe(on:)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;subscribeOn(_:)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;subscribe(on:)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>職缺與履歷的互動 - 以水滴信用為例</title>
        <link>https://www.archie.tw/p/%E8%81%B7%E7%BC%BA%E8%88%87%E5%B1%A5%E6%AD%B7%E7%9A%84%E4%BA%92%E5%8B%95-%E4%BB%A5%E6%B0%B4%E6%BB%B4%E4%BF%A1%E7%94%A8%E7%82%BA%E4%BE%8B/</link>
        <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E8%81%B7%E7%BC%BA%E8%88%87%E5%B1%A5%E6%AD%B7%E7%9A%84%E4%BA%92%E5%8B%95-%E4%BB%A5%E6%B0%B4%E6%BB%B4%E4%BF%A1%E7%94%A8%E7%82%BA%E4%BE%8B/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://https://s3cdn.yourator.co/banners/banners/000/001/523/home/ce53fd42866bb72a43c9ac7f6382251203e2571f.png?1608089950&#34;  title=&#34;Credidi Inc.&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://s3cdn.yourator.co/banners/banners/000/001/523/home/ce53fd42866bb72a43c9ac7f6382251203e2571f.png?1608089950&#34; &gt;
		&lt;img src=&#34;https://s3cdn.yourator.co/banners/banners/000/001/523/home/ce53fd42866bb72a43c9ac7f6382251203e2571f.png?1608089950&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Credidi Inc.&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Credidi Inc.&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章是以我個人的角度來看「職缺與履歷的互動」這件事，並以我目前服務的公司 - &lt;a class=&#34;link&#34; href=&#34;https://www.yourator.co/companies/credidi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;水滴信用在 Yourator&lt;/a&gt; 上開的職缺為例。&lt;/p&gt;
&lt;h1 id=&#34;職缺&#34;&gt;職缺&lt;/h1&gt;
&lt;p&gt;在目前所開出的四個職缺當中，我所負責職缺內容為下列兩個&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.yourator.co/companies/credidi/jobs/14373&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Junior iOS Engineer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.yourator.co/companies/credidi/jobs/13564&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Senior Android Engineer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以在這，我能夠負責回答在整理這兩份職缺時的想法。&lt;/p&gt;
&lt;h2 id=&#34;工作內容&#34;&gt;工作內容&lt;/h2&gt;
&lt;h3 id=&#34;seniod-android-engineer&#34;&gt;Seniod Android Engineer&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1609748999616.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1609748999616.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;junior-ios-engineer&#34;&gt;Junior iOS Engineer&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1609748821129.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1609748821129.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;這一段裡頭，框起來的文字是我所撰寫的；目標是在幾句話內讓求職者大略地了解自己會接觸到怎樣的架構和必要的工具。&lt;/p&gt;
&lt;p&gt;基本上不論是 iOS 或是 Android，都是以 &lt;code&gt;MVVM + Rx&lt;/code&gt; 作為主要的架構；而 iOS 的部分多了 &lt;code&gt;Coordinator&lt;/code&gt; 的使用。&lt;/p&gt;
&lt;p&gt;而 iOS 和 Android 這兩份職缺另一個不同的點是，Android 的需求是一位 Senior 的成員；我們期望他 / 她能夠參與前端架構的討論並協助負責其 repository 的 pull requests review 工作。&lt;/p&gt;
&lt;p&gt;這部分算是解釋了我們團隊目前所選擇的框架，也一定程度地透露了團隊在技術面上的喜好；以框架而言，我們期望可以找到對 Reactive 有興趣的人進來聊聊，而若你並不怎麼喜歡這技術的話，在投遞履歷前也可以多加評估。&lt;/p&gt;
&lt;h2 id=&#34;條件要求&#34;&gt;條件要求&lt;/h2&gt;
&lt;h3 id=&#34;senior-android-engineer&#34;&gt;Senior Android Engineer&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1609749861414.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1609749861414.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;junior-ios-engineer-1&#34;&gt;Junior iOS Engineer&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1609749851680.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1609749851680.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;從這兩者的條件要求來看，其中 Seniod Android Engineer 得要具有的條件較為明確；如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在過往的專案中有使用過 Room 或是其他資料庫套件&lt;/li&gt;
&lt;li&gt;了解並實作過 Android 的多線程處理&lt;/li&gt;
&lt;li&gt;有使用過 RxKotlin / RxJava&lt;/li&gt;
&lt;li&gt;在專案中撰寫過 Unit Test，包含 async 的測試方式&lt;/li&gt;
&lt;li&gt;在專案中使用過 Dependency Injection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 Junior iOS Engineer 的條件則較為寬鬆，僅需要有熱情和有基本認知&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;對於多線程有基本的認知&lt;/li&gt;
&lt;li&gt;對 CoreData 或是其他資料庫套件有基本的認知&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整理一下上述的資訊，意味著我個人對於 Seniod Android Engineer 這份職缺的想像是需要一個知識和技能點有符合的人來扛起來！而 Junior iOS Engineer 則沒有那麼明確的要求，只要你都有基本的認識且願意來學習的話，我們都是十分歡迎！&lt;/p&gt;
&lt;p&gt;加分條件就透露出了你進來之後，我們會希望你陸續補齊的技能點，所以可以從一個職缺的加分條件來看看對方（公司）是怎麼看待你有可能的發展方向。&lt;/p&gt;
&lt;p&gt;看完了職缺所提供的資訊後，來聊聊我個人想在履歷上看到的東西。&lt;/p&gt;
&lt;h1 id=&#34;履歷&#34;&gt;履歷&lt;/h1&gt;
&lt;p&gt;一個大方向就是，請提供「有用的資訊」。&lt;/p&gt;
&lt;h3 id=&#34;基本資料&#34;&gt;基本資料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;電話、信箱：方便聯絡、邀約面試&lt;/li&gt;
&lt;li&gt;姓名或英文名字：方便得知怎麼稱呼&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其餘的項目，除非你覺得對於這履歷有加分到，不然都是沒什麼幫助；像是放一張不知道在幹嘛的照片，就蠻讓人問號的⋯&lt;/p&gt;
&lt;h3 id=&#34;學經歷&#34;&gt;學經歷&lt;/h3&gt;
&lt;p&gt;學經歷的部分，請把重點放在該職缺相關的項目上就好！&lt;/p&gt;
&lt;p&gt;像是丟軟體工程師履歷，裡頭寫做過 3 年保險、2 年動畫設計、1 年產品經理，最後寫在某某 iOS / Android 課程班畢業，這部分就只有最後這個會被採用。
除非就是有轉職的心路歷程文章之類的附在下頭，我可能會有興趣看一下這故事；不過前提都是在有時間的情況下。&lt;/p&gt;
&lt;p&gt;簡單來說就是請你將有符合條件要求和加分條件的項目多闡述即可。&lt;/p&gt;
&lt;p&gt;而學歷的部分，我個人的態度是沒有經歷的履歷，才看一下學歷；而如果你唸的非本職缺相關的學歷，也就不用太著墨在上頭。&lt;/p&gt;
&lt;h3 id=&#34;github&#34;&gt;GitHub&lt;/h3&gt;
&lt;p&gt;我個人很喜歡點開履歷裡頭的 GitHub 來看，這部分可以分享一下我會看哪些點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看看你是真的有在用，還是只是貼上來爽的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這種就讓我有些興趣想看看他都在做什麼&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1609751821163.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1609751821163.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而這種的就不知道貼上來是幹嘛用的⋯&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1609751953576.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1609751953576.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git commit message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1609752156182.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1609752156182.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1609752190143.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1609752190143.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在這邊和大家提倡一下，除非你的 GitHub 有好好地在使用，不論是 commit message / PR / issues 等，不然貼出來都對你這次的求職不會有什麼加分⋯&lt;/p&gt;
&lt;h3 id=&#34;技能點&#34;&gt;技能點&lt;/h3&gt;
&lt;p&gt;履歷的呈現，就像賣東西給公司一樣（職缺也像是賣東西給求職者），請以對方有興趣的項目多做宣傳，其餘的保持越乾淨越好；除非一頁的履歷塞不滿，否則別寫一些容易被挑戰的技能。&lt;/p&gt;
&lt;p&gt;舉個例子就是在丟 iOS 的職缺，寫你會 Python 之類的其他語言，基本上我都會好奇地在面試時詢問你這部分會的程度（儘管和職缺需求無關），而下一個問題通常都是「那你寫進來的用意是什麼？」&lt;/p&gt;
&lt;p&gt;如果你是說你之後想轉 Backend 或是自己會寫一些測試的 local server 的話，我都覺得是不錯的回答！若你自己都不知道幹嘛塞這個進履歷的話⋯&lt;/p&gt;
&lt;h1 id=&#34;總結&#34;&gt;總結&lt;/h1&gt;
&lt;p&gt;職缺和履歷之間，有一個順序性；職缺開出來之後，求職者可以透過對其的觀察來適度地調整履歷的方向和內容，希望大家在準備履歷的時候，可以盡可能地展現出自己的優勢和吸引人的地方！&lt;/p&gt;
&lt;p&gt;當然，職缺的部分也是！職缺寫得不好也會讓求職者看了就倒彈，所以也得不斷地去修正才能讓彼此都處在一個舒適且有用的內容。&lt;/p&gt;
&lt;p&gt;最後工商一下，水滴信用持續有在擴編徵才中！對我們的職缺內容有想法或是有興趣投遞的，都歡迎聯繫！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>GitHub Actions &#43; Fastlane &#43; Cache = 👍</title>
        <link>https://www.archie.tw/p/github-actions-fastlane-cache/</link>
        <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/github-actions-fastlane-cache/</guid>
        <description>&lt;p&gt;這篇文章的內容主要是分享過去這兩天，我在專案上啟用 &lt;a class=&#34;link&#34; href=&#34;https://github.com/features/actions&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Actions&lt;/a&gt; 的筆記&lt;/p&gt;
&lt;h1 id=&#34;github-actions&#34;&gt;GitHub Actions&lt;/h1&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1598001620510.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1598001620510.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如上面圖示所言，GitHub 現在也提供了 workflows 讓我們可以在上頭做 CI/CD，而最大的優點就是它本身即掌管程式碼的所在地，所以在 trigger 方面自然會比其他單純做 CI/CD 的服務有一些優勢。&lt;/p&gt;
&lt;h2 id=&#34;建立方式&#34;&gt;建立方式&lt;/h2&gt;
&lt;p&gt;首先，你得在你的專案裏頭建立一個 &lt;code&gt;workflows&lt;/code&gt; 的資料夾，其路徑得為&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/.github/workflows
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;並在裡頭新增一個 &lt;code&gt;.yml&lt;/code&gt; 檔案，來讓 GitHub 讀取。&lt;/p&gt;
&lt;h2 id=&#34;yml-編輯&#34;&gt;yml 編輯&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;name: Workflow name

on:
	workflow_dispatch
	push:
		branches: [ master ]
	pull_request:
		branches: [ master ]
jobs:
	build:

	runs-on: macos-latest

	steps:
		- uses: actions/checkout@v2

		- name: Setup SSH key
		   run: |
		       mkdir -p ~/.ssh
		       echo &amp;quot;${{ secrets.CERTIFICATE_SSH_KEY }}&amp;quot; &amp;gt;&amp;gt; ~/.ssh/id_rsa
		       echo &amp;quot;${{ secrets.OTHER_SSH_KEY }}&amp;quot; &amp;gt;&amp;gt; ~/.ssh/other
			   chmod 600 ~/.ssh/id_rsa
			   chmod 600 ~/.ssh/other
			   ssh-add ~/.ssh/id_rsa
			   ssh-add ~/.ssh/other
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;從上述的小範例來解釋，首先第一個 &lt;code&gt;name&lt;/code&gt; 是指 workflow 的名稱，會顯示在這&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1598002254474.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1598002254474.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;on:&lt;/code&gt; 的話，則是 trigger 的定義方式，像我們這邊這樣寫的話，就是當 &lt;code&gt;master&lt;/code&gt; 有 pull request 或是 push 的話，就會執行下方的 &lt;code&gt;jobs&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;另一個 &lt;code&gt;workflow_dispatch&lt;/code&gt; 則是可以透過手動的方式去驅動它，並且可以在這邊加入一些 &lt;code&gt;inputs&lt;/code&gt;，這部分的文件可以查看&lt;a class=&#34;link&#34; href=&#34;https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;這邊&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1598002381258.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1598002381258.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接著下方可以建立不同的 &lt;code&gt;jobs&lt;/code&gt;，主要要注意的是這些 jobs 會是同時進行的，所以若是有需要同時做其他事情的話，可以建立多個 jobs 在同一個 workflows 裡頭。&lt;/p&gt;
&lt;p&gt;這邊要考量一點是，我們是使用貴貴的 macos ⋯
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1598004974191.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1598004974191.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以我們的一些限制會與其他主機不同。&lt;/p&gt;
&lt;p&gt;以這個範例來說，在執行完這個步驟之後，CI 的系統會有兩把 SSH key 可以做使用。
而我們可以將敏感的資料放在 &lt;code&gt;Secrets&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1598002732205.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1598002732205.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;並在 &lt;code&gt;yml&lt;/code&gt; 裡頭使用 &lt;code&gt;${{ secrets.VARIABLE_NAME }}&lt;/code&gt; 來取出並加以利用。&lt;/p&gt;
&lt;h2 id=&#34;cache&#34;&gt;Cache&lt;/h2&gt;
&lt;p&gt;為了加速這個過程，我們可以將 install dependecies 的結果做成 cache，這樣我們就可以不用每次都從新安裝所有的 pods&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- uses: actions/cache@v1
	id: pods-cache
	with:
	path: Pods
	key: ${{ runner.os }}-pods-${{ hashFiles(&#39;**/Podfile.lock&#39;) }}
	restore-keys: |
	${{ runner.os }}-pods-

- name: Install Dependecies
	if: steps.pods-cache.outputs.cache-hit != &#39;true&#39;
		run: |
			pod install --repo-update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所有的 cache 都可以利用上述的作法來實作，像是 &lt;code&gt;bundle install&lt;/code&gt; 的結果也是如此。&lt;/p&gt;
&lt;h2 id=&#34;雷坑&#34;&gt;雷坑&lt;/h2&gt;
&lt;h3 id=&#34;sshconfig-無效&#34;&gt;~/.ssh/config 無效&lt;/h3&gt;
&lt;p&gt;由於此專案有兩個不同的 private repository 需要去拉東西，而我不打算建立一組 ssh key 在帳號底下並傳到 CI 上頭共用，所以便利用了 &lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/developers/overview/managing-deploy-keys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Deploy key&lt;/a&gt; 的特色，建立了兩組 deploy key 並個別加入到 &lt;code&gt;Secrets&lt;/code&gt; 之中。&lt;/p&gt;
&lt;p&gt;原先我以為可以利用 &lt;a class=&#34;link&#34; href=&#34;https://archie.tw/2017/07/14/%e5%a4%9a%e5%80%8b%e5%b8%b3%e8%99%9f%e7%9a%84-ssh-config-%e8%a8%ad%e5%ae%9a/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ssh config&lt;/a&gt; 的設定方式，透過不同的 host 來自動選取不同的 ssh key 去做事，結果幾次下來都失敗⋯&lt;/p&gt;
&lt;h3 id=&#34;解決方法&#34;&gt;解決方法&lt;/h3&gt;
&lt;p&gt;直接在 clone 的時候宣告使用的 ssh key 是哪一把，並將預設的 &lt;code&gt;id_rsa&lt;/code&gt; 留給後面的 &lt;code&gt;Fastlane match&lt;/code&gt; 使用&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh-agent bash -c &#39;ssh-add ~/.ssh/other; git clone git@github.com:owner/project.git&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;fastlane_apple_application_specific_password-的設立&#34;&gt;FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD 的設立&lt;/h3&gt;
&lt;p&gt;我寫了一個步驟來上傳打包結果到 TestFlight 上&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- name: fastlane upload
        env:
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        run: |
          bundle exec fastlane upload_beta --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原先在本地端測試時，都可以在 ~/.zshrc 裡頭直接宣告這個變數&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=&#39;Your password&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;並在使用 &lt;code&gt;upload_to_testflight&lt;/code&gt; 時，都會自己拿去使用來上傳到 TestFlight 上，但在 GitHub Actions 裡頭卻始終報錯&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1598003485596.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1598003485596.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;解決方法-1&#34;&gt;解決方法&lt;/h3&gt;
&lt;p&gt;首先，我們先在 &lt;code&gt;Fastfile&lt;/code&gt; 的上傳的 lane 加上目標 app 的 Apple Id&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;upload_to_testflight(
	apple_id: &amp;quot;Your app&#39;s apple ID&amp;quot;,
	skip_waiting_for_build_processing: true,
	skip_submission: true
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;並且將原本的名稱從 &lt;code&gt;FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD&lt;/code&gt; 改成 &lt;code&gt;FASTLANE_PASSWORD&lt;/code&gt;，簡單來說就是使用應用程式密碼來當作你帳號的密碼登入。&lt;/p&gt;
&lt;p&gt;便可以順利上傳了！&lt;/p&gt;
&lt;h3 id=&#34;題外話&#34;&gt;題外話&lt;/h3&gt;
&lt;p&gt;1 macOS minute counts as 10 regular minutes&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1598005520491.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1598005520491.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Go 的環境變數使用</title>
        <link>https://www.archie.tw/p/go-%E7%9A%84%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/go-%E7%9A%84%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;p&gt;在 Go 裡頭，使用環境變數的方式為&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import (
	&amp;quot;os&amp;quot;
)
os.Setenv(&amp;quot;變數名稱&amp;quot;, &amp;quot;變數值&amp;quot;)
os.Getenv(&amp;quot;變數名稱&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而這邊要順帶介紹的是 &lt;a class=&#34;link&#34; href=&#34;https://github.com/joho/godotenv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GoDotEnv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具體使用的方式為&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import (
	&amp;quot;github.com/joho/godotenv&amp;quot;
)

err := godotenv.Load()
if err != nil {
	//something wrong
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣就可以去讀專案底下的 &lt;code&gt;.env&lt;/code&gt; 檔案，也可以將這份檔案加入到 &lt;code&gt;.gitignore&lt;/code&gt; 來忽略上傳，讓我們的程式碼可以開源也不會將自己的私鑰上傳上去。&lt;/p&gt;
&lt;p&gt;若不打算處理錯誤的話，可以更改為&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import (
	_ &amp;quot;github.com/joho/godotenv/autoload&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;便會在 package &lt;code&gt;init()&lt;/code&gt; 的時候就自動 &lt;code&gt;Load()&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Archie 的斜槓紀錄 2020-03</title>
        <link>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E7%B4%80%E9%8C%84-2020-03/</link>
        <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E7%B4%80%E9%8C%84-2020-03/</guid>
        <description>&lt;h1 id=&#34;這個月-archie-的斜槓記錄又來啦&#34;&gt;這個月 Archie 的斜槓記錄又來啦！&lt;/h1&gt;
&lt;h2 id=&#34;adsense&#34;&gt;AdSense&lt;/h2&gt;
&lt;p&gt;這個月並沒有上架新的 App，所以數字並沒有上升的趨勢，處在 $ 162.31&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1586928125514.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1586928125514.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;bitfinex&#34;&gt;Bitfinex&lt;/h2&gt;
&lt;p&gt;因應疫情，收益有大幅下降的情況，目前一天大概都是在 USD $ 0.6 左右（$ 18.14）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1586928567054.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1586928567054.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;三月份共計 USD$ 36.07，相比&lt;a class=&#34;link&#34; href=&#34;../archie-%e7%9a%84%e6%96%9c%e6%a7%93%e7%b4%80%e9%8c%84-2020-02/&#34; &gt;上個月&lt;/a&gt;的 USD$ 64.31 ，幾乎是腰折等級😭&lt;/p&gt;
&lt;h2 id=&#34;股利&#34;&gt;股利&lt;/h2&gt;
&lt;p&gt;0050.tw 在 3/6 時發送的股利，我只有買一些些，故得股利 $ 653。&lt;/p&gt;
&lt;h2 id=&#34;upwork&#34;&gt;Upwork&lt;/h2&gt;
&lt;p&gt;在三月份的時候，開始在 Upwork 上找案子做看看，投遞了幾個並得到一個小案子🎉一共獲利 USD$ 40&lt;/p&gt;
&lt;h2 id=&#34;apple-connect&#34;&gt;Apple Connect&lt;/h2&gt;
&lt;p&gt;透過找飲料的 IAP，獲利了 $ 182&lt;/p&gt;
&lt;h2 id=&#34;總收入&#34;&gt;總收入&lt;/h2&gt;
&lt;p&gt;折合台幣 $ 3,092.42&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Xcode 11.4 archive issue</title>
        <link>https://www.archie.tw/p/xcode-11.4-archive-issue/</link>
        <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/xcode-11.4-archive-issue/</guid>
        <description>&lt;p&gt;今天使用了 Xcode 11.4 來打包&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;找飲料 1.2.1 版本&lt;/a&gt;卻遇上了未知的錯誤，
而這邊就紀錄目前所找到的解法&lt;/p&gt;
&lt;h3 id=&#34;xcode-114---archiving-project---segmentation-fault-11httpsstackoverflowcomquestions60865057xcode-11-4-archiving-project-segmentation-fault-11&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/60865057/xcode-11-4-archiving-project-segmentation-fault-11&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Xcode 11.4 - Archiving project - Segmentation Fault 11&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;經實測後無效&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;xcode-114-error-segmentation-fault-11httpsgithubcomxmartlabseurekaissues1988&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/xmartlabs/Eureka/issues/1988&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Xcode 11.4, error: Segmentation fault: 11&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;經實測後可以順利打包上傳到 App Store&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【iOS 逆向】下載 Instagram 動態照片</title>
        <link>https://www.archie.tw/p/ios-%E9%80%86%E5%90%91%E4%B8%8B%E8%BC%89-instagram-%E5%8B%95%E6%85%8B%E7%85%A7%E7%89%87/</link>
        <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/ios-%E9%80%86%E5%90%91%E4%B8%8B%E8%BC%89-instagram-%E5%8B%95%E6%85%8B%E7%85%A7%E7%89%87/</guid>
        <description>&lt;p&gt;這篇文章的起點是從 ZheChgLi 所發表的 &lt;a class=&#34;link&#34; href=&#34;https://medium.com/zrealm-ios-dev/ios-%e9%80%86%e5%90%91%e5%b7%a5%e7%a8%8b%e5%88%9d%e9%ab%94%e9%a9%97-7498e1ff93ce&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iOS 逆向初體驗&lt;/a&gt;，我會紀錄自己在 Instagram.app 上的操作流程，並補足一些細節部分。&lt;/p&gt;
&lt;h1 id=&#34;環境&#34;&gt;環境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;macOS:&lt;/strong&gt; 10.15.4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iOS 裝置&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;iPhone 6 iOS 12.4 （越獄）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iPhone X iOS 13.4&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Xcode&lt;/strong&gt; 11.4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我這邊準備了兩個裝置，其中越獄的方式可以參考之前的文章 - &lt;a class=&#34;link&#34; href=&#34;../reveal2loader-ios-12.4/&#34; &gt;Reveal2Loader + iOS 12.4&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;連上越獄裝置&#34;&gt;連上越獄裝置&lt;/h1&gt;
&lt;p&gt;流程如同之前所提及的，先開啟 &lt;code&gt;iproxy&lt;/code&gt; 來代理 22 port&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;iproxy 2222 22
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;並透過 ssh 的方式連上越獄裝置&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh -p 2222 root@127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;密碼預設會是 &lt;code&gt;alpine&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;提取-ipa&#34;&gt;提取 .ipa&lt;/h1&gt;
&lt;p&gt;我照著 medium 上的教學，使用 &lt;a class=&#34;link&#34; href=&#34;https://github.com/AloneMonkey/frida-ios-dump&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;frida-ios-dump&lt;/a&gt; 作為提取的方式。&lt;/p&gt;
&lt;h2 id=&#34;frida-ios-dump-安裝&#34;&gt;frida-ios-dump 安裝&lt;/h2&gt;
&lt;p&gt;首先，先在 iOS 裝置上安裝 Frida&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585645854648.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585645854648.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;這邊會取決於你的裝置是哪一種 CPU 而不同。&lt;/p&gt;
&lt;p&gt;接著 clone frida-ios-dump 的 repository 並使用 pip 來安裝需要的套件。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pip install -r requirements.txt --upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;都完成了之後，就可以透過 &lt;code&gt;dump.py&lt;/code&gt; 來操作，像是列出裝置上所有應用程式&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python3 dump.py -l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585646173983.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585646173983.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;找到目標之後來提取相對應的 .ipa&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python3 dump.py com.burbn.instagram -o /PathToSave/instagram.ipa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你便可以得到一個脫殼的 &lt;code&gt;instagram.ipa&lt;/code&gt; 了！&lt;/p&gt;
&lt;h1 id=&#34;使用-monkeydevhttpsgithubcomalonemonkeymonkeydev&#34;&gt;使用 &lt;a class=&#34;link&#34; href=&#34;https://github.com/AloneMonkey/MonkeyDev&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MonkeyDev&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;再來介紹這個很厲害的工具 - MonkeyDev，它是一個 Xcode 的插件，讓我們可以在非越獄上的裝置安裝脫殼完的 ipa，進而實現一些 hook！
這邊就可以來介紹一下如何在非越獄的裝置上查看 Reveal！&lt;/p&gt;
&lt;h2 id=&#34;安裝-monkeydevhttpsgithubcomalonemonkeymonkeydevwiki安装&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AloneMonkey/MonkeyDev/wiki/%e5%ae%89%e8%a3%85&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;安裝 MonkeyDev&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;安裝 &lt;a class=&#34;link&#34; href=&#34;https://github.com/theos/theos/wiki/Installation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;theos&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo git clone --recursive https://github.com/theos/theos.git /opt/theos
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安裝 ldid&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install ldid
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;執行安裝指令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo /bin/sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/AloneMonkey/MonkeyDev/master/bin/md-install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;安裝錯誤找不到-xcode&#34;&gt;安裝錯誤：找不到 Xcode&lt;/h4&gt;
&lt;p&gt;它會安裝在預設的 Xcode 路徑上，也就是 &lt;code&gt;xcode-select -p&lt;/code&gt; 的位置，而經過我的測試，若你的 Xcode 名稱有空格的話，會發生它找不到 Xcode 路徑的錯誤。
如 &lt;code&gt;Xcode 11.4.app&lt;/code&gt; 就會找不到，我的做法是把空格刪去吧。&lt;/p&gt;
&lt;h2 id=&#34;使用-monkeydev&#34;&gt;使用 MonkeyDev&lt;/h2&gt;
&lt;p&gt;我們來打開 Xcode，便可以找到下方有 &lt;code&gt;MonkeyDev&lt;/code&gt; 的欄位，選擇 &lt;code&gt;MonkeyApp&lt;/code&gt; 來使用&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585648082516.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585648082516.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;建立好專案之後，將上面輸出的 .ipa 拖到專案之中按下 &lt;code&gt;command + B&lt;/code&gt; 來 build 一下。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585659072482.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585659072482.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你也可以直接安裝到你的手機上，這樣其實就達成了一個多開的功效了；畢竟它們的 bundle identifier 並不同。
一個重點是，你必須將越獄的裝置也同時接著線才行，MonkeyDev 在那裝的時候&lt;/p&gt;
&lt;h2 id=&#34;打開-reveal-查看&#34;&gt;打開 Reveal 查看&lt;/h2&gt;
&lt;p&gt;這時候打開 Reveal 便可以發現，剛剛安裝 app 有出現在列表上了！&lt;/p&gt;
&lt;p&gt;但你點擊後可能會發現和&lt;a class=&#34;link&#34; href=&#34;https://archie.tw/2020/02/02/reveal2loader-ios-12-4/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;上次遇到一樣的問題 - RevealServer 版本過舊&lt;/a&gt; 這時候就將 &lt;code&gt;/Users/Archie/Library/Application Support/Reveal/RevealServer&lt;/code&gt; 複製到 &lt;code&gt;/opt/MonkeyDev/Frameworks/&lt;/code&gt; 取代並再 run 一次即可。&lt;/p&gt;
&lt;h2 id=&#34;加入-flexhttpsgithubcomflipboardflex&#34;&gt;加入 &lt;a class=&#34;link&#34; href=&#34;https://github.com/Flipboard/FLEX&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FLEX&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;FLEX 是一個可以在 app 裡頭查看資訊的 debug 工具，MonkeyDev 如同一般的 Xcode 專案一樣，有支援 CocoaPods，所以我們可以透過 pods 的方式來加入 FLEX。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585660595694.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585660595694.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;唯一的重點就是，FLEX 是要加入到 Dylib 裡頭透過 hook 的方式注入，所以 Podfile 那邊要寫對地方。
並在 instagramDylib.m 裡頭加入相對應的程式碼：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585660579870.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585660579870.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如此一來，在裝置上就可以使用 FLEX 了&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585660764177.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585660764177.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;靈感發想&#34;&gt;靈感發想&lt;/h1&gt;
&lt;p&gt;我這次打算加入個功能，讓我可以透過一些操作來直接取得圖片；
於是得先來分析一下如何取得照片。&lt;/p&gt;
&lt;h2 id=&#34;利用-flex-來定位元件&#34;&gt;利用 FLEX 來定位元件&lt;/h2&gt;
&lt;p&gt;首先來使用 select 的功能，點擊一下圖片得知是一個 &lt;code&gt;IGImageView&lt;/code&gt; 的 class&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585713489306.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585713489306.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再透過 views 的功能找到上層的元件是 &lt;code&gt;IGImageProgressView&lt;/code&gt; 和 &lt;code&gt;IGFeedPhotoView&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585713471799.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585713471799.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;點進去可以查看 &lt;code&gt;IGFeedPhotoView&lt;/code&gt; 的 properties，嘗試了一下得知 instagram 是將 url 存在一個叫做 &lt;code&gt;IGImageSpecifier&lt;/code&gt; 的 class 裡頭&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585713642767.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585713642767.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;於是我們就可以開始 hook 了！&lt;/p&gt;
&lt;h2 id=&#34;建立-header&#34;&gt;建立 Header&lt;/h2&gt;
&lt;p&gt;我們先到 instagramDylib 的資料夾中，建立兩個檔案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;htps://github.com/ArchieR7/InstagramHook/blob/master/instagramDylib/Hook/InstagramHeader.h&#34; &gt;InstagramHeader.h&lt;/a&gt;：來寫一些原本 Instagram 本身的 header&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ArchieR7/InstagramHook/blob/master/instagramDylib/Hook/IGFeedPhotoViewHook.m&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IGFeedPhotoViewHook.m&lt;/a&gt;：來寫 hook&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instagramheaderh&#34;&gt;InstagramHeader.h&lt;/h3&gt;
&lt;p&gt;這裡頭就宣告一些我們打算使用到的 properties 就好了
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585713915196.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585713915196.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;igfeedphotoviewhookm&#34;&gt;IGFeedPhotoViewHook.m&lt;/h3&gt;
&lt;p&gt;查看了一下，發現有個 &lt;code&gt;_onDoubleTap&lt;/code&gt; 的 method，應該就是雙擊給愛心的功能&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585714061293.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585714061293.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;這部分我打算就來透過修改雙擊的動作來跳出一個選單，選單內可以選擇給 ❤️ 或是儲存到相簿&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585714246621.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585714246621.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;p&gt;我將程式放上了 &lt;a class=&#34;link&#34; href=&#34;https://github.com/ArchieR7/InstagramHook&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;，你可以直接來查看！
不過 Instagram.ipa 有點過大所以有些 framework 沒有傳上，所以你要玩的話最好自己覆蓋過去一份新的。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://github.com/ArchieR7/InstagramHook/raw/master/DEMO.gif&#34; &gt;
		&lt;img src=&#34;https://github.com/ArchieR7/InstagramHook/raw/master/DEMO.gif&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Demo&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Demo&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;相關的參考資料&#34;&gt;相關的參考資料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/TpwZtPu0DKOwm2d6B9fTmg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;给微信添加聊天记录截图功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sherlockz.github.io/2017/10/22/ios-hook/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;不懂汇编,如何逆向(iOS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_21051503/article/details/85586275&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;基于MonkeyDev实现不越狱修改钉钉位置打卡和签到&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/yca8939/article/details/50638368&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iOS越狱插件编写 - 支付宝自动咻咻 （一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://medium.com/zrealm-ios-dev/ios-%e9%80%86%e5%90%91%e5%b7%a5%e7%a8%8b%e5%88%9d%e9%ab%94%e9%a9%97-7498e1ff93ce&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iOS 逆向工程初體驗&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>iOS App launch time 心得</title>
        <link>https://www.archie.tw/p/ios-app-launch-time-%E5%BF%83%E5%BE%97/</link>
        <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/ios-app-launch-time-%E5%BF%83%E5%BE%97/</guid>
        <description>&lt;h1 id=&#34;如何減少-ios-app-launch-time&#34;&gt;如何減少 iOS App launch time&lt;/h1&gt;
&lt;p&gt;這篇文章就來紀錄一下今日的研究項目，主要的起因是前一篇&lt;a class=&#34;link&#34; href=&#34;https://www.archie.tw/2020/03/26/%e4%bd%bf%e7%94%a8-xcode-%e5%bb%ba%e7%ab%8b%e4%b8%80%e5%80%8b-framework/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;使用 Xcode 建立一個 Framework&lt;/a&gt;有談到如何選擇要創建的是 static library 還是 dynamic framework，其中一個差異是 dyld ( dynamic loader ) 會在 pre main 的時候去載入 dynanmic frameworks，所以若是有越多的 dynamic frameworks 需要載入時，便會花上越多時間。而&lt;a class=&#34;link&#34; href=&#34;https://developer.apple.com/videos/play/wwdc2016/406/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Apple也建議我們不要使用超過 6 個非系統的 dynamic frameworks&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;再來搭配服用 &lt;a class=&#34;link&#34; href=&#34;https://weakself.dev/episodes/25&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;weak self - 25:  難道公司發大財了！？App Launch Time 加速面面觀&lt;/a&gt;，一併做一個筆記整理。&lt;/p&gt;
&lt;h2 id=&#34;app-啟動的三個階段&#34;&gt;App 啟動的三個階段&lt;/h2&gt;
&lt;h3 id=&#34;pre-main-loading-macho--dylib--rebase--binding--objc-setup--initializer&#34;&gt;Pre-main: Loading (MachO + dylib) / Rebase &amp;amp; Binding / ObjC Setup / Initializer&lt;/h3&gt;
&lt;h4 id=&#34;如何查看-pre-main-time&#34;&gt;如何查看 pre main time&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585297124930.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585297124930.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;透過在 Target 的 Environment Variables 加入 &lt;code&gt;DYLD_PRINT_STATISTICS&lt;/code&gt; 並設為 &lt;code&gt;1&lt;/code&gt; 便可以在 Debug console log 得到資訊。&lt;/p&gt;
&lt;h4 id=&#34;減少-dynamic-frameworks-數量來加速&#34;&gt;減少 dynamic frameworks 數量來加速&lt;/h4&gt;
&lt;p&gt;這是蠻有效的一種方式，我分別對 &lt;a class=&#34;link&#34; href=&#34;https://www.archie.tw/2020/02/06/%f0%9f%92%aa%e6%89%be%e5%81%a5%e8%ba%ab%f0%9f%92%aa-%e5%85%8d%e7%b6%81%e7%b4%84%e5%96%ae%e6%ac%a1%e6%94%b6%e8%b2%bb%e5%81%a5%e8%ba%ab%e6%88%bf%e6%b8%85%e5%96%ae/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;找健身&lt;/a&gt;做了個兩次執行得到下面的結果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585297316708.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585297316708.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我們可以看到將 CocoaPods 的所有 pods 都以 Static library 的方式產生時， pre-main 的時間是明顯降低的。&lt;/p&gt;
&lt;p&gt;而 CocoaPods 要如何將 pods 生成為 statis library 的型態呢？&lt;/p&gt;
&lt;h4 id=&#34;在-abi-source-compatibility-之後&#34;&gt;在 ABI Source Compatibility 之後&lt;/h4&gt;
&lt;p&gt;在 Xcode 9 beta 4 有了 ABI 穩定之後，我們才開始可以以 Swift 的方式來寫一個 static library，而 CocoaPods 1.5 之後也跟進了！&lt;/p&gt;
&lt;p&gt;我們便可以將 &lt;code&gt;use_framework!&lt;/code&gt; 換成 &lt;code&gt;use_modular_headers!&lt;/code&gt;，這樣所產生出來的 pods 便會以 static library 的方式連結。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585297223190.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585297223190.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;main&#34;&gt;Main&lt;/h3&gt;
&lt;p&gt;在 podcast 裡頭，Pofat 有提到 Swift 裡頭的 main 是利用 &lt;code&gt;@UIApplication&lt;/code&gt; 的方式來辨別並由系統自己做掉了，若有自己做的打算的話，則可以移除掉該行並寫一個 &lt;code&gt;main.swift&lt;/code&gt; 即可（附上 &lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/pofat/dd1ec8e5082f4ad698e7b67aaeca4849&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pofat 的程式碼&lt;/a&gt;）&lt;/p&gt;
&lt;h3 id=&#34;post-main&#34;&gt;Post-main&lt;/h3&gt;
&lt;p&gt;這邊就如同 Podcast 裡頭提及的重點，盡量不要一開始就在 main thread 上做太多事！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用 Xcode 建立一個 Framework</title>
        <link>https://www.archie.tw/p/%E4%BD%BF%E7%94%A8-xcode-%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B-framework/</link>
        <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E4%BD%BF%E7%94%A8-xcode-%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B-framework/</guid>
        <description>&lt;p&gt;之前有介紹過&lt;a class=&#34;link&#34; href=&#34;https://archie.tw/2018/09/15/create-cocoapods-by-yourself/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何建立一個 CocoaPods&lt;/a&gt;，而這篇文章則是紀錄一下這次直接在 Xcode 上建立 Framework 會遇上的問題。&lt;/p&gt;
&lt;h2 id=&#34;建立-framework-專案&#34;&gt;建立 Framework 專案&lt;/h2&gt;
&lt;p&gt;首先我們先打開 Xcode，並選擇 iOS 類別底下的 Framework &amp;amp; Library 裡頭的 Framework&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585214704363.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585214704363.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;並依照所需要的欄位填寫相關資訊，這邊目前都和直接建立一個專案一致流程。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585214821701.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585214821701.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而如果你有打算在裡頭寫測試的話，就將 Include Unit Tests ☑️&lt;/p&gt;
&lt;h3 id=&#34;framework-開發&#34;&gt;Framework 開發&lt;/h3&gt;
&lt;p&gt;使用 Xcode 建立起來和 CocoaPods 創建，在開發上並沒有什麼差異；所以就依照著相對應的存取限制來設計你的 framework 即可。&lt;/p&gt;
&lt;p&gt;這篇的重點會落在一些參數設定。&lt;/p&gt;
&lt;h3 id=&#34;mach-o-type-決定方式&#34;&gt;Mach-O Type 決定方式&lt;/h3&gt;
&lt;p&gt;在這個 framework 的 target 之中，我們可以從 Build Settings 的 Mach-O Type 來決定它是一個怎樣的 framework&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585215154937.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585215154937.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而要如何取捨這個 framework 的輸出型態，可以依據一些使用方式來判斷&lt;/p&gt;
&lt;h4 id=&#34;static-library&#34;&gt;Static Library&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;有使用到其他 static library&lt;/li&gt;
&lt;li&gt;使用 Singleton&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dynamic-library&#34;&gt;Dynamic Library&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;有包含其他檔案，如圖片、JSON 之類的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;輸出成-framework&#34;&gt;輸出成 .framework&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585215683562.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585215683562.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;輸出成 .framework 的方式很簡單，你只要 build 這個專案就會產生出相對應的 .framework 檔案；但重點會是，若你今天使用模擬器 build 的話，它會建立一個 &lt;code&gt;Debug-iphonesimulator&lt;/code&gt; 的資料夾，裡頭包含只支援模擬器的 .framework，而使用 &lt;code&gt;Generic iOS Device&lt;/code&gt; 的話，就會產生出 &lt;code&gt;Debug-iphoneos&lt;/code&gt; 的資料夾，裡頭的 .framework 也只會支援實體裝置。&lt;/p&gt;
&lt;p&gt;這邊可以透過 lipo 的指令將兩者融合成一個同時支援模擬器又支援實體裝置的 .framework，或者可以建立一個新的 target 做這件事👌&lt;/p&gt;
&lt;h4 id=&#34;建一個-aggregate-來跑-script&#34;&gt;建一個 Aggregate 來跑 script&lt;/h4&gt;
&lt;p&gt;首先在 TARGETS 那邊點擊 + 來建立一個 Aggregate&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585215960325.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585215960325.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;並在它的 Build Phases 欄位中加入一個 &lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/cromandini/1a9c4aeab27ca84f5d79&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Run script&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh

UNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/${CONFIGURATION}-universal

# make sure the output directory exists
mkdir -p &amp;quot;${UNIVERSAL_OUTPUTFOLDER}&amp;quot;

# Step 1. Build Device and Simulator versions
xcodebuild -target &amp;quot;${PROJECT_NAME}&amp;quot; ONLY_ACTIVE_ARCH=NO -configuration ${CONFIGURATION} -sdk iphoneos  BUILD_DIR=&amp;quot;${BUILD_DIR}&amp;quot; BUILD_ROOT=&amp;quot;${BUILD_ROOT}&amp;quot; clean build
xcodebuild -target &amp;quot;${PROJECT_NAME}&amp;quot; -configuration ${CONFIGURATION} -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO BUILD_DIR=&amp;quot;${BUILD_DIR}&amp;quot; BUILD_ROOT=&amp;quot;${BUILD_ROOT}&amp;quot; clean build

# Step 2. Copy the framework structure (from iphoneos build) to the universal folder
cp -R &amp;quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/${PROJECT_NAME}.framework&amp;quot; &amp;quot;${UNIVERSAL_OUTPUTFOLDER}/&amp;quot;

# Step 3. Copy Swift modules from iphonesimulator build (if it exists) to the copied framework directory
SIMULATOR_SWIFT_MODULES_DIR=&amp;quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${PROJECT_NAME}.framework/Modules/${PROJECT_NAME}.swiftmodule/.&amp;quot;
if [ -d &amp;quot;${SIMULATOR_SWIFT_MODULES_DIR}&amp;quot; ]; then
cp -R &amp;quot;${SIMULATOR_SWIFT_MODULES_DIR}&amp;quot; &amp;quot;${UNIVERSAL_OUTPUTFOLDER}/${PROJECT_NAME}.framework/Modules/${PROJECT_NAME}.swiftmodule&amp;quot;
fi

# Step 4. Create universal binary file using lipo and place the combined executable in the copied framework directory
lipo -create -output &amp;quot;${UNIVERSAL_OUTPUTFOLDER}/${PROJECT_NAME}.framework/${PROJECT_NAME}&amp;quot; &amp;quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${PROJECT_NAME}.framework/${PROJECT_NAME}&amp;quot; &amp;quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/${PROJECT_NAME}.framework/${PROJECT_NAME}&amp;quot;

# Step 5. Convenience step to copy the framework to the project&#39;s directory
cp -R &amp;quot;${UNIVERSAL_OUTPUTFOLDER}/${PROJECT_NAME}.framework&amp;quot; &amp;quot;${PROJECT_DIR}&amp;quot;

# Step 6. Convenience step to open the project&#39;s directory in Finder
open &amp;quot;${PROJECT_DIR}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1585215924044.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1585215924044.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;這樣在 build 這個 Aggregate target 時，就會產生出一個 universal 的 .framework 在專案裡頭了！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>麥當勞報報 API 分析</title>
        <link>https://www.archie.tw/p/%E9%BA%A5%E7%95%B6%E5%8B%9E%E5%A0%B1%E5%A0%B1-api-%E5%88%86%E6%9E%90/</link>
        <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E9%BA%A5%E7%95%B6%E5%8B%9E%E5%A0%B1%E5%A0%B1-api-%E5%88%86%E6%9E%90/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;2020.12.25 目前麥當勞的 API 已經從 Restful 轉成 WebSocket 的形式，所以該篇文章的方式目前是無法實作的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;麥當勞報報簡單來說就是麥當勞的會員 app，你可以每日在上頭得到一些優惠券，不過是採取簽到的方式領取；也就是說如果今天你忘了登入領取的話，隔天也不會變成有兩種優惠可以領取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;麥當勞報報-api-分析&#34;&gt;麥當勞報報 API 分析&lt;/h1&gt;
&lt;p&gt;透過一些工具，我們可以得到麥當勞報報的 API 路徑和內容，其中分成三種 base url&lt;/p&gt;
&lt;h2 id=&#34;httpsapimcddailycomtw&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://api.mcddaily.com.tw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://api.mcddaily.com.tw&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;從列表來看，我目前有使用到的是這五個 API&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1583115755262.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1583115755262.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;分別是&lt;/p&gt;
&lt;h3 id=&#34;verify_member_access_token&#34;&gt;/verify_member_access_token&lt;/h3&gt;
&lt;p&gt;驗證 access token 是否還有效&lt;/p&gt;
&lt;h3 id=&#34;update_attributes&#34;&gt;/update_attributes&lt;/h3&gt;
&lt;p&gt;從內容看不太出來是幹嘛用的，不過我想對於我們而言也沒什麼特別的用途&lt;/p&gt;
&lt;h3 id=&#34;get_info&#34;&gt;/get_info&lt;/h3&gt;
&lt;p&gt;從 Response body 來看的話，算是麥當勞報報登入成功後第一支得呼叫的 API；
裡頭含有 &lt;code&gt;member_info&lt;/code&gt; 的資訊為主&lt;/p&gt;
&lt;h3 id=&#34;logout&#34;&gt;/logout&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;access_token&lt;/code&gt; 就可以登出了，不過這邊有個問題是登出後 &lt;code&gt;access_token&lt;/code&gt; 並不會過期⋯
也就是就算我已經呼叫過了登出這支 API，但仍然可以使用原先的 &lt;code&gt;access_token&lt;/code&gt; 來打其他 API⋯
&lt;del&gt;也就是可以做別的事，不用怕 token 登出就無效了&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&#34;login_by_fb&#34;&gt;/login_by_fb&lt;/h3&gt;
&lt;p&gt;就是基本的從 Facebook 取得 token 去換麥當勞報報的 &lt;code&gt;access_token&lt;/code&gt; 和使用者資料，基本上看起來 response body 和 /get_info 的一模一樣。&lt;/p&gt;
&lt;h2 id=&#34;httpsapi1mcddailycomtw&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://api1.mcddaily.com.tw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://api1.mcddaily.com.tw&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;基本上商業邏輯都在這個 base url 上執行，而我的重點只有一支 API，也是我分析的目的&lt;/p&gt;
&lt;h3 id=&#34;lotteryget_item&#34;&gt;/lottery/get_item&lt;/h3&gt;
&lt;p&gt;這就是每天可以呼叫一次來取得每日優惠的 API&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1583116554945.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1583116554945.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;httpsapi2mcddailycomtw&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://api2.mcddaily.com.tw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://api2.mcddaily.com.tw&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;這邊我只有看到一種 API，就是類似 remote config 的那種使用情境，只用來取得一些 config 內容而已，並沒有什麼其他資訊可以得到。&lt;/p&gt;
&lt;h1 id=&#34;將每日簽到的動作自動化&#34;&gt;將每日簽到的動作自動化&lt;/h1&gt;
&lt;p&gt;我在 Heroku 上有一台每天會跑 script 的機器，每天去爬 PTT 的一些內容並整理發送到不同的地方；
檢查並測試了一下麥當勞報報的這個 API，唯一必填的 request body 欄位只有 access_token，那麼就好處理多了！&lt;/p&gt;
&lt;p&gt;就再寫個 curl 的 script 每天一起執行，應該就可以了吧？&lt;/p&gt;
&lt;p&gt;這幾天跑一下測試再來更新後續！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Archie 的斜槓紀錄 2020-02</title>
        <link>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E7%B4%80%E9%8C%84-2020-02/</link>
        <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E7%B4%80%E9%8C%84-2020-02/</guid>
        <description>&lt;h1 id=&#34;這個月-archie-的斜槓記錄又來啦&#34;&gt;這個月 Archie 的斜槓記錄又來啦！&lt;/h1&gt;
&lt;h2 id=&#34;adsense&#34;&gt;AdSense&lt;/h2&gt;
&lt;p&gt;AdSense 的部分，這個月寫了兩款 App：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;../%e6%89%be%e5%81%a5%e8%ba%ab-%e5%85%8d%e7%b6%81%e7%b4%84%e5%96%ae%e6%ac%a1%e6%94%b6%e8%b2%bb%e5%81%a5%e8%ba%ab%e6%88%bf%e6%b8%85%e5%96%ae/&#34; &gt;找健身&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.archie.tw/%e9%a3%b2%e6%96%99%e5%ba%97%e8%8f%9c%e5%96%ae/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;找飲料&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以 AdSense 的部分是上升的，但距離養活自己還是有很巨大的差距啊！&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1583067886425.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1583067886425.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;bitfinex&#34;&gt;Bitfinex&lt;/h2&gt;
&lt;p&gt;收益為 US$ 64.31
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1583068458262.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1583068458262.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;統一發票兌獎&#34;&gt;統一發票兌獎&lt;/h2&gt;
&lt;p&gt;這個月電子發票中了一張 200 元，不無小補👍&lt;/p&gt;
&lt;h2 id=&#34;總收入&#34;&gt;總收入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AdSense $191.36&lt;/li&gt;
&lt;li&gt;Bitfinex $1,944&lt;/li&gt;
&lt;li&gt;統一發票 $200&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ 2,335&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用 API 來讀取 GitHub repository</title>
        <link>https://www.archie.tw/p/%E4%BD%BF%E7%94%A8-api-%E4%BE%86%E8%AE%80%E5%8F%96-github-repository/</link>
        <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E4%BD%BF%E7%94%A8-api-%E4%BE%86%E8%AE%80%E5%8F%96-github-repository/</guid>
        <description>&lt;p&gt;這篇文章將來介紹一下如何使用 API 來讀取 GitHub repository 上的檔案，而為什麼需要這樣做呢？&lt;/p&gt;
&lt;h3 id=&#34;因為我專精的是-ios-啊&#34;&gt;因為我專精的是 iOS 啊&lt;/h3&gt;
&lt;p&gt;以一個 iOS 工程師而言，我們若需要自己維護一個 side project（如 &lt;a class=&#34;link&#34; href=&#34;https://www.archie.tw/2020/02/06/%f0%9f%92%aa%e6%89%be%e5%81%a5%e8%ba%ab%f0%9f%92%aa-%e5%85%8d%e7%b6%81%e7%b4%84%e5%96%ae%e6%ac%a1%e6%94%b6%e8%b2%bb%e5%81%a5%e8%ba%ab%e6%88%bf%e6%b8%85%e5%96%ae/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;找健身&lt;/a&gt;），那我們就得想一些簡單一點的 server 方案；其中一個就是可以將一個 JSON 檔案放到 GitHub 的某個私人 repository 上，並透過 GitHub API 的方式去讀取它，達到 GET 的效果。&lt;/p&gt;
&lt;p&gt;這樣便可以有效率地開發 iOS 的部分，而不必花太多心思在維護後端，至少不必煩惱伺服器的費用和穩定😂&lt;/p&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;h3 id=&#34;取得-api-token&#34;&gt;取得 API Token&lt;/h3&gt;
&lt;p&gt;首先我們得先到 GitHub 的設定頁之中，去建立一組 API token&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581653754557.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581653754557.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;file&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;file&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;選取 Developer settings&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581653784216.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581653784216.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;file&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;file&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;選擇 Personal access tokens 並建立一組&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581653813496.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581653813496.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;file&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;file&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再來依據你的需求選擇 scopes，像是 repo 存取全開&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581653863434.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581653863434.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;file&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;file&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接著就會拿到一組 Token！&lt;/p&gt;
&lt;h3 id=&#34;api-的使用方式&#34;&gt;API 的使用方式&lt;/h3&gt;
&lt;p&gt;首先我們得在 Headers 加上兩個 KEY-Value&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Authorization: token YourAccessToken&lt;/code&gt;
&lt;code&gt;Accept: application/vnd.github.v3.raw&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而 URL 則是&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://api.github.com/repos/GitHubUserName/RepositoryName/contents/PathOfFile/FileName.json?ref=master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;記得改成你的 GitHub user name 以及所對應的 repository 名稱和檔案路徑，而 Params 可以帶入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ref: master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;master 可以改成其他 branch 的名稱，這樣便可以讀取到檔案的 raw 了！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>💪找健身💪-免綁約單次收費健身房清單</title>
        <link>https://www.archie.tw/p/%E6%89%BE%E5%81%A5%E8%BA%AB-%E5%85%8D%E7%B6%81%E7%B4%84%E5%96%AE%E6%AC%A1%E6%94%B6%E8%B2%BB%E5%81%A5%E8%BA%AB%E6%88%BF%E6%B8%85%E5%96%AE/</link>
        <pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E6%89%BE%E5%81%A5%E8%BA%AB-%E5%85%8D%E7%B6%81%E7%B4%84%E5%96%AE%E6%AC%A1%E6%94%B6%E8%B2%BB%E5%81%A5%E8%BA%AB%E6%88%BF%E6%B8%85%E5%96%AE/</guid>
        <description>&lt;p&gt;近年來健身風氣盛行
許多人會依靠健身來雕塑身形、增強身體機能、增加運動表現
但這些都必須依靠長期的運動習慣來達成&lt;/p&gt;
&lt;p&gt;當你過年回家想健身卻找不到健身房
當你出門旅遊想健身卻找不到健身房
當你被派到外縣市出差一個月卻找不到健身房
這些困擾 我們懂&lt;/p&gt;
&lt;p&gt;所以我們開發了一款 app
能幫助大家迅速找到最近的、收費最合理的單次收費健身房
只要開啟定位
所有困難就能迎刃而解&lt;/p&gt;
&lt;p&gt;另外 app 內也設有使用者回報機制
當你發現有新開的單次收費健身房也歡迎回報
一起完整這個健身網！&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://apps.apple.com/app/id1497860482?fbclid=IwAR0v0Rt14D5ud628P8CsIlGbCzHvyk5DtyqezpTgy4v7AhOV4qxZibmszFQ&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iOS 下載點&lt;/a&gt;
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581003366354.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581003366354.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;緣起&#34;&gt;緣起&lt;/h2&gt;
&lt;p&gt;在這幾年健身的風氣逐漸熱絡，健身房的類型也越來越多種類；舉凡綁約制、課程型、月費制、單次收費等，健身的產業帶動了相關人才的產出，使得一般大眾接觸健身的門檻降低不少。&lt;/p&gt;
&lt;p&gt;撇除一般知名度較大的連鎖會員制健身房，若我們想要在周遭找到一間不用綁約、單次收費的健身房，那麼則需要花上一些時間做功課。於是便在某天發現了&lt;a class=&#34;link&#34; href=&#34;https://www.facebook.com/duncancoach/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;扣取港 Coach Duncan&lt;/a&gt;的一篇動態，有為這類需求的人做一份清單。
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581002466625.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581002466625.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
從 2018年7月27日開始並有持續地在更新維護。&lt;/p&gt;
&lt;p&gt;而 &lt;a class=&#34;link&#34; href=&#34;https://www.ptt.cc/bbs/MuscleBeach/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PTT MuscleBeach 版&lt;/a&gt;也有相關文章在討論「單次」這個關鍵字：
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581003127787.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581003127787.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
於是乎便萌生了整合這類資訊的念頭，進而生出了這個 app&lt;/p&gt;
&lt;h2 id=&#34;過程紀錄&#34;&gt;過程紀錄&lt;/h2&gt;
&lt;h3 id=&#34;202023-萌生這個念頭&#34;&gt;2020/2/3 萌生這個念頭&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581003524978.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581003524978.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;202025-送出第一版28-家健身房&#34;&gt;2020/2/5 送出第一版（28 家健身房）&lt;/h3&gt;
&lt;p&gt;2020/2/6 04:21 出現在架上🎉
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581003638894.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581003638894.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;202026-1547-第一次-side-project-站上排行榜&#34;&gt;2020/2/6 15:47 第一次 Side project 站上排行榜📈&lt;/h3&gt;
&lt;p&gt;第 52 名
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581003894579.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581003894579.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;202026-1822-一度還跑到了前-50-名&#34;&gt;2020/2/6 18:22 一度還跑到了前 50 名😂&lt;/h3&gt;
&lt;p&gt;第 45 名
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581004004863.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581004004863.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;202026-2342-在送出-110-版前的排名&#34;&gt;2020/2/6 23:42 在送出 1.1.0 版前的排名&lt;/h3&gt;
&lt;p&gt;第 50 名
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581003785230.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581003785230.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;202028-0217-在送出-111-版前的排名&#34;&gt;2020/2/8 02:17 在送出 1.1.1 版前的排名&lt;/h3&gt;
&lt;p&gt;第 31 名
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581099481621.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581099481621.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;202029-1228-111-版本到達了目前最高的名次&#34;&gt;2020/2/9 12:28 1.1.1 版本到達了目前最高的名次&lt;/h3&gt;
&lt;p&gt;第 25 名
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1581320588230.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1581320588230.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;店家資訊&#34;&gt;店家資訊&lt;/h1&gt;
&lt;h2 id=&#34;10&#34;&gt;1.0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;練一下&lt;/li&gt;
&lt;li&gt;芳鄰健身 Family Fitness&lt;/li&gt;
&lt;li&gt;芳鄰健身 Family Fitness 景美店&lt;/li&gt;
&lt;li&gt;給力健身房&lt;/li&gt;
&lt;li&gt;阿基里斯&lt;/li&gt;
&lt;li&gt;勁能健身&lt;/li&gt;
&lt;li&gt;桑富士&lt;/li&gt;
&lt;li&gt;KAT Fitness&lt;/li&gt;
&lt;li&gt;體育客輔大店&lt;/li&gt;
&lt;li&gt;體育客和平店&lt;/li&gt;
&lt;li&gt;FitMania健身狂潮&lt;/li&gt;
&lt;li&gt;MYWAY Fitness&lt;/li&gt;
&lt;li&gt;SomebodyFitness 建國店&lt;/li&gt;
&lt;li&gt;台北運動健身中心&lt;/li&gt;
&lt;li&gt;練健康&lt;/li&gt;
&lt;li&gt;河馬力士複合式運動館&lt;/li&gt;
&lt;li&gt;健身魂 大安店&lt;/li&gt;
&lt;li&gt;MOREFIT 師大店&lt;/li&gt;
&lt;li&gt;Our Gym 青年健身院&lt;/li&gt;
&lt;li&gt;怪獸健身中心&lt;/li&gt;
&lt;li&gt;麥克叔叔Uncle Mike Fitness&lt;/li&gt;
&lt;li&gt;原動力PowerForceFitness&lt;/li&gt;
&lt;li&gt;運動特區 Sport Zone&lt;/li&gt;
&lt;li&gt;77健身俱樂部&lt;/li&gt;
&lt;li&gt;Oneway 啟動模式&lt;/li&gt;
&lt;li&gt;新力量健身俱樂部&lt;/li&gt;
&lt;li&gt;Boss健身工作室&lt;/li&gt;
&lt;li&gt;好客 Fitness&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;110&#34;&gt;1.1.0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;全民運動健身中心-中和店&lt;/li&gt;
&lt;li&gt;全民運動健身中心 八德小巨蛋店&lt;/li&gt;
&lt;li&gt;全民運動健身房 內湖港墘店&lt;/li&gt;
&lt;li&gt;銳棒肌力與體能訓練&lt;/li&gt;
&lt;li&gt;宜蘭國民運動中心—健身房&lt;/li&gt;
&lt;li&gt;臺南市永華國民運動中心&lt;/li&gt;
&lt;li&gt;臺北市中正運動中心&lt;/li&gt;
&lt;li&gt;心運動體能訓練中心-Mind Fitness&lt;/li&gt;
&lt;li&gt;FitBull Gym 鬥犬健身中心&lt;/li&gt;
&lt;li&gt;植健身 fit plant&lt;/li&gt;
&lt;li&gt;武甲總合武術運動館 古亭館&lt;/li&gt;
&lt;li&gt;武甲總合武術運動館 大直館&lt;/li&gt;
&lt;li&gt;臺北萬華運動中心&lt;/li&gt;
&lt;li&gt;Beyond GYM超悅健身中心&lt;/li&gt;
&lt;li&gt;Sport 77 Fitness Club 健身俱樂部&lt;/li&gt;
&lt;li&gt;人人有功練健身工坊&lt;/li&gt;
&lt;li&gt;北安運動休閒會館&lt;/li&gt;
&lt;li&gt;Mmanang摩瑪浪健身俱樂部&lt;/li&gt;
&lt;li&gt;核心肌地 Underground fitness&lt;/li&gt;
&lt;li&gt;三健客 3musclers-內湖店&lt;/li&gt;
&lt;li&gt;三健客 3musclers -板橋店&lt;/li&gt;
&lt;li&gt;硬骨頭體能空間-羅東&lt;/li&gt;
&lt;li&gt;風鈴體能 Windbell Fitness - 羅東店&lt;/li&gt;
&lt;li&gt;三鶯國民運動中心&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;111&#34;&gt;1.1.1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hypercore Fitness 超核心健身中心 桃園藝文店&lt;/li&gt;
&lt;li&gt;Hypercore Fitness 超核心健身中心 林口四維店&lt;/li&gt;
&lt;li&gt;自由重量健身俱樂部&lt;/li&gt;
&lt;li&gt;自由重量健身俱樂部北門館&lt;/li&gt;
&lt;li&gt;新北市新莊國民運動中心&lt;/li&gt;
&lt;li&gt;士林運動中心&lt;/li&gt;
&lt;li&gt;健生活&lt;/li&gt;
&lt;li&gt;成吉思汗健身俱樂部 進化綜合格鬥中心（蘆洲館）&lt;/li&gt;
&lt;li&gt;ACTION FITNESS 啟動健身中心&lt;/li&gt;
&lt;li&gt;ACTION FITNESS 啟動健身中心 中科店&lt;/li&gt;
&lt;li&gt;Top Gym運動空間&lt;/li&gt;
&lt;li&gt;Top Gym運動空間-中原店&lt;/li&gt;
&lt;li&gt;Fitbox Gym - 飛比特 大雅館&lt;/li&gt;
&lt;li&gt;FITBOX 新豐健身房&lt;/li&gt;
&lt;li&gt;FITBOX Gym健身房-太原館&lt;/li&gt;
&lt;li&gt;Fitbox Gym 竹科館&lt;/li&gt;
&lt;li&gt;FITBOX 竹北健身房&lt;/li&gt;
&lt;li&gt;板橋國民運動中心&lt;/li&gt;
&lt;li&gt;台北健身院(八德店)&lt;/li&gt;
&lt;li&gt;Muku Gym慕谷健身房&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;資訊來源&#34;&gt;資訊來源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.facebook.com/duncancoach/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;扣取港 Duncan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.facebook.com/profile.php?id=100001723845268&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;阿南教練 Wu Nan Yi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.facebook.com/mingsvolleylife/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ming’s VolleyLife 銘排生活&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ptt.cc/bbs/MuscleBeach/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PTT MuscleBeach 版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用者來信回報&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Archie 的斜槓紀錄 2020-01</title>
        <link>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E7%B4%80%E9%8C%84-2020-01/</link>
        <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E7%B4%80%E9%8C%84-2020-01/</guid>
        <description>&lt;h1 id=&#34;這個月-archie-的斜槓記錄又來啦&#34;&gt;這個月 Archie 的斜槓記錄又來啦！&lt;/h1&gt;
&lt;h2 id=&#34;adsense&#34;&gt;AdSense&lt;/h2&gt;
&lt;p&gt;AdSense 的部分，沒什麼新作品加上文章幾乎兩個都沒在更新，所以收益下滑😭&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1580651581104.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1580651581104.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;bitfinex&#34;&gt;Bitfinex&lt;/h2&gt;
&lt;p&gt;1 月份的走勢
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1580651672843.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1580651672843.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由於在前陣子突然一波高漲，目前我的放貸還有幾個高利率檔期中，各放了 30 天的長期&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1580651747903.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1580651747903.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;故上個月的收益很讚讚👏來到了 USD$ 58.25&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1580651808982.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1580651808982.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;總收入&#34;&gt;總收入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AdSense $76.56&lt;/li&gt;
&lt;li&gt;Bitfinex $1760.84&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ 1837.4&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Reveal2Loader &#43; iOS 12.4</title>
        <link>https://www.archie.tw/p/reveal2loader-ios-12.4/</link>
        <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/reveal2loader-ios-12.4/</guid>
        <description>&lt;p&gt;首先先來介紹 &lt;a class=&#34;link&#34; href=&#34;https://github.com/zidaneno5/Reveal2Loader&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Reveal2Loader&lt;/a&gt;，它是一款可以在越獄的裝置上讓 &lt;a class=&#34;link&#34; href=&#34;https://revealapp.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Reveal&lt;/a&gt; 讀取任何 app 的插件，至於 Reveal 的使用方式就先不在這邊提了。&lt;/p&gt;
&lt;p&gt;我們可以透過這個方式來查看別人的 app 是怎麼設計 UI 的，以 Twitter 的 iOS app 為例子&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1580648212367.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1580648212367.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我們可以看到他們所使用的字型、大小、顏色以及元件名稱等，像是這邊就是他們自己定義的 &lt;code&gt;T1StatusAttributedTextView&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;越獄&#34;&gt;越獄&lt;/h2&gt;
&lt;p&gt;我是使用 iOS 12.4 的 iPhone 6 搭配 &lt;a class=&#34;link&#34; href=&#34;https://unc0ver.dev&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;unc0ver&lt;/a&gt; 來進行越獄，你可以很輕易地使用手機來開啟這個網頁來進行操作，這步驟沒什麼難度。&lt;/p&gt;
&lt;h2 id=&#34;安裝-reveal2loader&#34;&gt;安裝 Reveal2Loader&lt;/h2&gt;
&lt;p&gt;透過 Cydia 來安裝 Reveal2Loader，如果安裝的時候出現了找不到來源的錯誤時，可以重新讀取 Sources 試試看。&lt;/p&gt;
&lt;h2 id=&#34;安裝-dropbear&#34;&gt;安裝 Dropbear&lt;/h2&gt;
&lt;p&gt;我的 SSH 是使用 Dropbear，你可以透過 &lt;code&gt;http://cydia.ichitaso.com&lt;/code&gt; 這個 Source 來安裝。&lt;/p&gt;
&lt;h2 id=&#34;安裝-usbmuxd&#34;&gt;安裝 usbmuxd&lt;/h2&gt;
&lt;p&gt;我是使用 USB 的方式來連接手機裝置的，所以先在 macOS 上安裝 &lt;code&gt;usbmuxd&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install usbmuxd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;並且透過指令將特定的 port 來代理原本用來連接 ssh 的 port 22。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;iproxy 5678 22
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接著我們就可以利用 port &lt;code&gt;5678&lt;/code&gt; 來連上裝置了。&lt;/p&gt;
&lt;h2 id=&#34;操作流程&#34;&gt;操作流程&lt;/h2&gt;
&lt;p&gt;安裝完 &lt;code&gt;Reveal2Loader&lt;/code&gt; 之後，你會發現在&lt;code&gt;設定&lt;/code&gt;裡頭多了 &lt;code&gt;Reveal&lt;/code&gt; 的選項&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1580649201599.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1580649201599.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;!&lt;/p&gt;
&lt;p&gt;接著在 &lt;code&gt;Enabled Applications&lt;/code&gt; 裡頭打開你要觀看的 &lt;code&gt;USER APPLICATIONS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1580649283472.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1580649283472.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;!&lt;/p&gt;
&lt;p&gt;在還沒有更新 RevealServer 的情況下，打開 Reveal 會跳出 You may need to update the Reveal library in your app 的訊息。&lt;/p&gt;
&lt;p&gt;那麼首先就先將 RevealServer 搬運到裝置內&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scp -p 5678 /Users/YourUserName/Library/Application\ Support/Reveal/RevealServer/iOS/RevealServer.framework/RevealServer root@127.0.0.1:/Library/MobileSubstrate/DynamicLibraries
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以及 RevealServer.framework 複製一份到 frameworks&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scp -P 5678 -r /Users/YourUserName/Library/ApplicationSupport/Reveal/RevealServer/iOS/RevealServer.framework root@127.0.0.1:/Library/Frameworks
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最後記得補上&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;killall SpringBoard
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;來重新啟動 SpringBoard 來加載剛剛加入的 framework，這樣就可以在 Reveal 上看到我們剛剛開啟的 app 了！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Archie 的斜槓記錄 2019-12</title>
        <link>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E8%A8%98%E9%8C%84-2019-12/</link>
        <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E8%A8%98%E9%8C%84-2019-12/</guid>
        <description>&lt;h1 id=&#34;這個月-archie-的斜槓記錄又來啦&#34;&gt;這個月 Archie 的斜槓記錄又來啦！&lt;/h1&gt;
&lt;h2 id=&#34;adsense&#34;&gt;AdSense&lt;/h2&gt;
&lt;p&gt;AdSense 的部分，12 月的獲利是 106.05 元，加入了 &lt;a class=&#34;link&#34; href=&#34;https://www.afen.tw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;阿芬的菜園&lt;/a&gt; 的廣告，所以突破 100 元！
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1578389424612.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1578389424612.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;bitfinex&#34;&gt;Bitfinex&lt;/h2&gt;
&lt;p&gt;12 月份的走勢
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1578389542887.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1578389542887.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;月初的時候一波下探，但後來有拉起來，所以整月份的收入為 $35.08
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1578389665045.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1578389665045.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;台股就沒什麼獲利了，所以都要等明年了😂&lt;/p&gt;
&lt;h1 id=&#34;總收入&#34;&gt;總收入&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;AdSense $106.05&lt;/li&gt;
&lt;li&gt;Bitfinex $1,054.15&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這個月總收入為 $1,160.2&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Active Compilation Conditions</title>
        <link>https://www.archie.tw/p/active-compilation-conditions/</link>
        <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/active-compilation-conditions/</guid>
        <description>&lt;p&gt;在 Xcode 7 以前的版本，我們若需要設立一些環境變數，需要透過 &lt;code&gt;Other Swift Flags&lt;/code&gt; 來處理；
像是 &lt;code&gt;-DDEBUG&lt;/code&gt; &lt;code&gt;-DRELEASE&lt;/code&gt; 等，且在使用的時候，並不會自動檢查出是否正確。&lt;/p&gt;
&lt;p&gt;而在 Xcode 8 加入了一個 &lt;code&gt;Active Compilation Conditions&lt;/code&gt;，現在我們可以在裡頭新增 &lt;code&gt;DEBUG&lt;/code&gt;、&lt;code&gt;RELEASE&lt;/code&gt; 即可達到原先的效果，並且會在寫程式的時候，自動補全了！&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1576552330941.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1576552330941.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;file&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;file&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;我竟然到 Xcode 11 出來後才發現這點，畢竟原本就都寫好了😂&lt;/del&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Archie 的斜槓記錄 2019-11</title>
        <link>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E8%A8%98%E9%8C%84-2019-11/</link>
        <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E8%A8%98%E9%8C%84-2019-11/</guid>
        <description>&lt;h1 id=&#34;這個月-archie-的斜槓記錄又來啦&#34;&gt;這個月 Archie 的斜槓記錄又來啦！&lt;/h1&gt;
&lt;h2 id=&#34;adsense&#34;&gt;AdSense&lt;/h2&gt;
&lt;p&gt;AdSense 的部分，上個月的獲利是 US$2.33 元，沒特別多做任何事，所以沒有特別的成長。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1575251294907.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1575251294907.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;bitfinex&#34;&gt;Bitfinex&lt;/h2&gt;
&lt;p&gt;十一月份的每日獲利走勢&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1575251472499.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1575251472499.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;總獲利一共 US$36.23&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1575251139885.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1575251139885.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;台股獲利&#34;&gt;台股獲利&lt;/h2&gt;
&lt;p&gt;0056 的股利在這個月發放，共計 $6,637&lt;/p&gt;
&lt;h2 id=&#34;總收入&#34;&gt;總收入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AdSense US$2.33&lt;/li&gt;
&lt;li&gt;Bitfinex US$36.23&lt;/li&gt;
&lt;li&gt;股利 $6,637&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這個月總收入 $7,812.1&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AWS Certificate Manager 申請流程</title>
        <link>https://www.archie.tw/p/aws-certificate-manager-%E7%94%B3%E8%AB%8B%E6%B5%81%E7%A8%8B/</link>
        <pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/aws-certificate-manager-%E7%94%B3%E8%AB%8B%E6%B5%81%E7%A8%8B/</guid>
        <description>&lt;h2 id=&#34;aws-certificate-manager-申請流程&#34;&gt;AWS Certificate Manager 申請流程&lt;/h2&gt;
&lt;p&gt;我的這個網站架設在 AWS 的 EC2 上，搭配 Route 53 和 Load Balancer 以及這篇的主角 AWS Certificate Manager，這邊要迅速的記錄操作流程！&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;../aws-ec2-with-wordpress/&#34; &gt;環境架設的文章寫在這&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;h3 id=&#34;申請憑證&#34;&gt;申請憑證&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1574913298126.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1574913298126.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;新增網域名稱&#34;&gt;新增網域名稱&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/h../img/image-1574913315192.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/h../img/image-1574913315192.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;這邊要注意的是，像我之前是申請 &lt;code&gt;*.Archie.tw&lt;/code&gt;，這會導致一個問題就是 &lt;a class=&#34;link&#34; href=&#34;https://Archie.tw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://Archie.tw&lt;/a&gt; 就不會符合申請的格式，而我一直到昨天才修正這件事⋯⋯
這邊建議是填寫 &lt;code&gt;www.Archie.tw&lt;/code&gt; 和 &lt;code&gt;Archie.tw&lt;/code&gt;，這樣不管使用者有沒有補上 &lt;code&gt;www&lt;/code&gt; 都可以取得信任的大鎖🔒。&lt;/p&gt;
&lt;h3 id=&#34;選取驗證方式&#34;&gt;選取驗證方式&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1574913497809.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1574913497809.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你是和我一樣，使用 Route 53，就選擇 &lt;code&gt;DNS &lt;/code&gt; 驗證&lt;/p&gt;
&lt;h3 id=&#34;新增標籤&#34;&gt;新增標籤&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1574913628816.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1574913628816.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;這邊看個人，算是一個 tag 提醒自己用而已，我是沒有填寫。&lt;/p&gt;
&lt;p&gt;最後 AWS Certificate Manager 就會要求你&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1574913705474.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1574913705474.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就直接按下去就好了👌&lt;/p&gt;
&lt;p&gt;以上便是透過 AWS Certificate Manager 申請憑證的流程，搞清楚的話不用幾分鐘就可以處理好了👍&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Disable dark mode on iOS 13 in your application</title>
        <link>https://www.archie.tw/p/disable-dark-mode-on-ios-13-in-your-application/</link>
        <pubDate>Fri, 22 Nov 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/disable-dark-mode-on-ios-13-in-your-application/</guid>
        <description>&lt;p&gt;在使用 Xcode 11 以後的版本開發時，應用程式會自動在 iOS 13 以後的系統跑 Dark mode；
而在還沒有準備好支援 dark mode 的情況下，會直接是一個悲劇的 UI⋯⋯&lt;/p&gt;
&lt;p&gt;這時候你可以選擇⋯⋯&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;調整大部分的 UI 來支援 Dark mode&lt;/li&gt;
&lt;li&gt;在你的應用程式中設立成一般模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在你有新功能要上線且還未準備的情況下，建議你選擇後者會比較符合效益👌&lt;/p&gt;
&lt;p&gt;方法就是這篇文章的主軸&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1574404310536.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1574404310536.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;file&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;file&lt;/figcaption&gt;
	
&lt;/figure&gt;
就是在 Info.plist 設立 &lt;code&gt;UIUserInterfaceStyle&lt;/code&gt; 為 &lt;code&gt;light&lt;/code&gt; 或是 &lt;code&gt;dark&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果只有特定的 &lt;code&gt;UIWindow&lt;/code&gt;、&lt;code&gt;UIViewController&lt;/code&gt;、&lt;code&gt;UIView&lt;/code&gt;等需要調整時，可以找到它們底下的這個參數 &lt;code&gt;overrideUserInterfaceStyle &lt;/code&gt; 來去做調整即可👌&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Archie 的斜槓記錄 2019-10</title>
        <link>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E8%A8%98%E9%8C%84-2019-10/</link>
        <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E8%A8%98%E9%8C%84-2019-10/</guid>
        <description>&lt;p&gt;這個月 Archie 的斜槓記錄又來啦！&lt;/p&gt;
&lt;h1 id=&#34;adsense&#34;&gt;AdSense&lt;/h1&gt;
&lt;p&gt;少少的 US$1.41&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1572571942867.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1572571942867.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;bitfinex&#34;&gt;Bitfinex&lt;/h1&gt;
&lt;p&gt;這個月的年利率大約都落在 7 - 10 % 之間，不過最近因為習近平的一句話，有幾天上漲到 15 % 左右，但沒過多久就回歸到 9 % 的位置&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1572493319764.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1572493319764.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以這個月每日的利息走勢圖如下，多半時間是低於一塊美金的：
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1572493406442.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1572493406442.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而這個月的收益為&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1572571673269.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1572571673269.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;台股獲利&#34;&gt;台股獲利&lt;/h1&gt;
&lt;p&gt;這個月買賣股票加上屁偉（我弟弟）抽中上海商銀直接賣掉的分紅，一共獲利 $10,760 元。&lt;/p&gt;
&lt;h1 id=&#34;總收入&#34;&gt;總收入&lt;/h1&gt;
&lt;p&gt;美金持續下滑到 30.54 左右，所以 Bitfinex 那邊依然是被匯差吃死死⋯⋯😭&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AdSense US$1.41 -&amp;gt; $43 元&lt;/li&gt;
&lt;li&gt;Bitfinex US$24.68 -&amp;gt; $754.47 元&lt;/li&gt;
&lt;li&gt;台股獲利 $$10,759 元&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這個月的斜槓收入為
$$11551.45 / 50,000 = 23.10%&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[||||______ 23% __________]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;目前看起來 AdSense 那一塊真的太少了😂需要好好思考一下怎麼增加那一部分的收益🤔️
而 11 月還會領到元大高股息 0056 的現金股利，希望台股獲利可以穩定👌&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Checklist template</title>
        <link>https://www.archie.tw/p/checklist-template/</link>
        <pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/checklist-template/</guid>
        <description>&lt;p&gt;這是一個新的分類，不侷限於 iOS 或是程式開發的層面，對於我而言是一個新的領域；這有點像是&lt;strong&gt;檢查清單&lt;/strong&gt;、&lt;strong&gt;必做清單&lt;/strong&gt;或是 &lt;strong&gt;SOP&lt;/strong&gt; 等概念，簡單舉幾個例子&lt;/p&gt;
&lt;h2 id=&#34;雙-np-流程&#34;&gt;雙 NP 流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;確認原電信合約&lt;/li&gt;
&lt;li&gt;和原電信商解約&lt;/li&gt;
&lt;li&gt;攜碼至另一家電信的預付卡&lt;/li&gt;
&lt;li&gt;至通訊行辦理攜碼方案&lt;/li&gt;
&lt;li&gt;等預付卡開通，使用其卡片&lt;/li&gt;
&lt;li&gt;等原電信商開通&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cocoapods-binary-流程&#34;&gt;Cocoapods binary 流程&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1570204471498.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1570204471498.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gem install cocoapods-binary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 Podfile 最上方加入 &lt;code&gt;plugin &#39;cocoapods-binary&#39;&lt;/code&gt; 和 &lt;code&gt;all_binary!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;阿齊推薦的宜蘭十個小吃&#34;&gt;阿齊推薦的宜蘭十個小吃&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;阿德魯肉飯&lt;/li&gt;
&lt;li&gt;⋯⋯&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;諸如此類的，這些流程它可以是一個個人的 SOP 或是有點像是小教學，而這當然只是一個我自己的範本，你可以刪刪減減成自己的版本👌&lt;/p&gt;
&lt;p&gt;十月份先以這個分類為測試，若流量大一些的話，再擴大這個專案吧！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【Checklist】雙 NP 流程</title>
        <link>https://www.archie.tw/p/checklist%E9%9B%99-np-%E6%B5%81%E7%A8%8B/</link>
        <pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/checklist%E9%9B%99-np-%E6%B5%81%E7%A8%8B/</guid>
        <description>&lt;h2 id=&#34;checklist雙-np-流程&#34;&gt;【Checklist】雙 NP 流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;確認原電信合約&lt;/li&gt;
&lt;li&gt;和原電信商解約&lt;/li&gt;
&lt;li&gt;攜碼至另一家電信的預付卡&lt;/li&gt;
&lt;li&gt;至通訊行辦理攜碼方案&lt;/li&gt;
&lt;li&gt;等預付卡開通，使用其卡片&lt;/li&gt;
&lt;li&gt;等原電信商開通&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;../%e9%9b%99-np%e4%b8%ad%e8%8f%af%e9%9b%bb%e4%bf%a1%EF%B8%8F%e5%8f%b0%e7%81%a3%e5%a4%a7%e5%93%a5%e5%a4%a7%EF%B8%8F%e4%b8%ad%e8%8f%af%e9%9b%bb%e4%bf%a1-v2&#34; &gt;2019 執行的心得文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;../%e9%9b%99-np%e4%b8%ad%e8%8f%af%e9%9b%bb%e4%bf%a1%EF%B8%8F%e5%8f%b0%e7%81%a3%e5%a4%a7%e5%93%a5%e5%a4%a7%EF%B8%8F%e4%b8%ad%e8%8f%af%e9%9b%bb%e4%bf%a1/&#34; &gt;2017 執行的心得文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Archie 的斜槓記錄 2019-09</title>
        <link>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E8%A8%98%E9%8C%84-2019-09/</link>
        <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E8%A8%98%E9%8C%84-2019-09/</guid>
        <description>&lt;h2 id=&#34;這個月-archie-的斜槓記錄又來啦&#34;&gt;這個月 Archie 的斜槓記錄又來啦！&lt;/h2&gt;
&lt;h3 id=&#34;adsense&#34;&gt;AdSense&lt;/h3&gt;
&lt;p&gt;廣告部分，九月份上架了兩個 App；
一個是 iOS 13+ 的匯率計算機、一個是 Flip clock，而流量都還是十分低的狀態，不過金額比上個月多了 US$ 1.2，來到了 US$ 2.53 。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1569891876656.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1569891876656.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;bitfinex&#34;&gt;Bitfinex&lt;/h3&gt;
&lt;p&gt;而九月份的放貸收入為 US$ 30.33，受到了虛擬貨幣價格走低的影響，這部分是比上個月來得少的，少了 US$ 1.35。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1569892092953.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1569892092953.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;台股獲利&#34;&gt;台股獲利&lt;/h3&gt;
&lt;p&gt;這個月領了合作金庫的股利 4,653 元，以及買賣其他股票小賺了 985 元。&lt;/p&gt;
&lt;h3 id=&#34;總收入&#34;&gt;總收入&lt;/h3&gt;
&lt;p&gt;加上目前美金匯率也降到了 31，使得總獲利其實沒什麼成長。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AdSense US$ 2.53 ➡️ $78.43&lt;/li&gt;
&lt;li&gt;Bitfinex US$ 30.33 ➡️ $940.23&lt;/li&gt;
&lt;li&gt;台股獲利 $5,548&lt;/li&gt;
&lt;li&gt;額外收入 $1,500&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這個月斜槓收入為 $8,066.55&lt;/p&gt;
&lt;p&gt;8,066.55 / 50,000 = 16.1331 %&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[|||_______ 16% __________]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不過十月份印象中沒有股利可領，下一篇大概會少上許多吧😭&lt;/p&gt;
</description>
        </item>
        <item>
        <title>雙 NP：中華電信➡️台灣大哥大➡️中華電信 v2</title>
        <link>https://www.archie.tw/p/%E9%9B%99-np%E4%B8%AD%E8%8F%AF%E9%9B%BB%E4%BF%A1%EF%B8%8F%E5%8F%B0%E7%81%A3%E5%A4%A7%E5%93%A5%E5%A4%A7%EF%B8%8F%E4%B8%AD%E8%8F%AF%E9%9B%BB%E4%BF%A1-v2/</link>
        <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E9%9B%99-np%E4%B8%AD%E8%8F%AF%E9%9B%BB%E4%BF%A1%EF%B8%8F%E5%8F%B0%E7%81%A3%E5%A4%A7%E5%93%A5%E5%A4%A7%EF%B8%8F%E4%B8%AD%E8%8F%AF%E9%9B%BB%E4%BF%A1-v2/</guid>
        <description>&lt;p&gt;繼上次&lt;a class=&#34;link&#34; href=&#34;../%e9%9b%99-np%e4%b8%ad%e8%8f%af%e9%9b%bb%e4%bf%a1%EF%B8%8F%e5%8f%b0%e7%81%a3%e5%a4%a7%e5%93%a5%e5%a4%a7%EF%B8%8F%e4%b8%ad%e8%8f%af%e9%9b%bb%e4%bf%a1/&#34; &gt;雙 NP&lt;/a&gt; 之後，合約又來到了即將到期的時候，而今日因昨晚發燒請了病假，中午狀況好轉後便順道處理了合約的問題。&lt;/p&gt;
&lt;p&gt;這次打算申辦的是&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1569567145477.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1569567145477.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;購機-699&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;購機-699&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;每月費用大約如下
699 - 7,000 / 30 = 466 元&lt;/p&gt;
&lt;h2 id=&#34;大地遊戲開始&#34;&gt;大地遊戲開始&lt;/h2&gt;
&lt;h3 id=&#34;2019-09-27-1256-中華電信&#34;&gt;2019-09-27 12:56 中華電信&lt;/h3&gt;
&lt;p&gt;由於我的合約到期日為 10/03，故要先到中華電信進行提前解約並繳納提前解約終端設備補貼款（我的部分是 106 元）&lt;/p&gt;
&lt;h3 id=&#34;2019-09-27-1301-台灣大哥大直營門市&#34;&gt;2019-09-27 13:01 台灣大哥大直營門市&lt;/h3&gt;
&lt;p&gt;告知從中華電信攜碼轉預付卡，而將於 2019/9/28 開通台灣大哥大門號（可以接電話、沒網路）&lt;/p&gt;
&lt;h3 id=&#34;2019-09-27-1310-地標網通&#34;&gt;2019-09-27 13:10 地標網通&lt;/h3&gt;
&lt;p&gt;帶著前面的收據和申請書來申請，而中華電信的合約內容比較多，所以簽署了比較多份文件。
將於 2019/9/29 恢復成中華電信門號🎉&lt;/p&gt;
&lt;p&gt;全部在羅東跑完大概半小時內可以處理完畢，再來就是等各家電信開通服務即可！&lt;/p&gt;
&lt;p&gt;其他方案可以到&lt;a class=&#34;link&#34; href=&#34;http://www.landtop.com.tw/discount.php&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;地標網通&lt;/a&gt;查詢，或是其他通訊行做詢問。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>如何更改模擬器上的狀態列</title>
        <link>https://www.archie.tw/p/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%94%B9%E6%A8%A1%E6%93%AC%E5%99%A8%E4%B8%8A%E7%9A%84%E7%8B%80%E6%85%8B%E5%88%97/</link>
        <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%94%B9%E6%A8%A1%E6%93%AC%E5%99%A8%E4%B8%8A%E7%9A%84%E7%8B%80%E6%85%8B%E5%88%97/</guid>
        <description>&lt;p&gt;這篇就來談談我是如何更改模擬器上的狀態列🎤&lt;/p&gt;
&lt;p&gt;在 Xcode 11 Beta 3 以前，我是使用 &lt;a class=&#34;link&#34; href=&#34;https://github.com/shinydevelopment/SimulatorStatusMagic&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SimulatorStatusMagic&lt;/a&gt;
而今天要弄截圖的時候發現，原來在 Xcode 11 Beta 4 之後，有內建的使用方法！&lt;/p&gt;
&lt;p&gt;我喜歡讓 App store previews 上的時間顯示我自己的生日🎂算是一個小巧思（但沒人想知道）&lt;/p&gt;
&lt;p&gt;而現在可以透過內建的指令來完成這件事，其中你可以使用下列這些&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;xcrun simctl status_bar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1568274470294.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1568274470294.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;指令&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;指令&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;像是更改目前開著的模擬器時間：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;xcrun simctl status_bar booted override --time &amp;quot;02:01&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1568274344178.13.22.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1568274344178.13.22.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;成果圖&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;成果圖&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而若是你的 Xcode 版本是 6 - 10 的話，就繼續使用 SimulatorStatusMagic 吧👌&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SwiftUI &#43; Google AdMob</title>
        <link>https://www.archie.tw/p/swiftui-google-admob/</link>
        <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/swiftui-google-admob/</guid>
        <description>&lt;p&gt;這篇是一個簡單介紹 &lt;code&gt;UIViewControllerRepresentable&lt;/code&gt; 的範例，
由於 Google AdMob 的 &lt;code&gt;GADBannerView&lt;/code&gt; 不像&lt;a class=&#34;link&#34; href=&#34;../%e5%9c%a8-swiftui-%e8%99%95%e7%90%86%e4%b8%ad%e6%96%87%e8%bc%b8%e5%85%a5%e6%b3%95%e6%89%80%e6%9c%83%e9%81%87%e4%b8%8a%e7%9a%84%e5%95%8f%e9%a1%8c&#34; &gt;上次提及的 UITextField&lt;/a&gt; 一樣，可以直接使用 &lt;code&gt;UIViewRepresentable&lt;/code&gt; 來包裝；原因是它必須設置一個 &lt;code&gt;rootViewController&lt;/code&gt;，也就意味著我們需要使用 &lt;code&gt;UIViewControllerRepresentable&lt;/code&gt; 才能完成它。&lt;/p&gt;
&lt;h3 id=&#34;interfacing-with-uikithttpsdeveloperapplecomtutorialsswiftuiinterfacing-with-uikit&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.apple.com/tutorials/swiftui/interfacing-with-uikit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Interfacing with UIKit&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;透過這個 Apple 官方的教學當中，我們可以從 &lt;code&gt;UIPageViewController&lt;/code&gt; 的範例來做發想，故我的實作方式會是這樣：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;GoogleMobileAds&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SwiftUI&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UIKit&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;GADBannerViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIViewControllerRepresentable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;makeUIViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIViewController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GADBannerView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;adSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kGADAdSizeBanner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;viewController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;adUnitID&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;your ad unit id in there.&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rootViewController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;viewController&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;viewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addSubview&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;viewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CGRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;origin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zero&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kGADAdSizeBanner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GADRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;viewController&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;updateUIViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uiViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;如果需要處理-delegate-的部分&#34;&gt;如果需要處理 Delegate 的部分&lt;/h3&gt;
&lt;p&gt;你可以參閱上次 &lt;a class=&#34;link&#34; href=&#34;../%e5%9c%a8-swiftui-%e8%99%95%e7%90%86%e4%b8%ad%e6%96%87%e8%bc%b8%e5%85%a5%e6%b3%95%e6%89%80%e6%9c%83%e9%81%87%e4%b8%8a%e7%9a%84%e5%95%8f%e9%a1%8c/&#34; &gt;TextField&lt;/a&gt; 的處理方式，建構一個 &lt;code&gt;Coordinator&lt;/code&gt; 來進行相關的作業👌&lt;/p&gt;
&lt;h3 id=&#34;如果還有問題的話&#34;&gt;如果還有問題的話&lt;/h3&gt;
&lt;p&gt;歡迎直接透過各種方式找到我，一起來討論討論 SwiftUI 的應用👍
程式碼會同步到 &lt;a class=&#34;link&#34; href=&#34;https://github.com/ArchieR7/Archie.tw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; 上，有任何想法都可以直接留言📒&lt;/p&gt;
</description>
        </item>
        <item>
        <title>對於 SwiftUI onDisappear 的誤解？</title>
        <link>https://www.archie.tw/p/%E5%B0%8D%E6%96%BC-swiftui-ondisappear-%E7%9A%84%E8%AA%A4%E8%A7%A3/</link>
        <pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E5%B0%8D%E6%96%BC-swiftui-ondisappear-%E7%9A%84%E8%AA%A4%E8%A7%A3/</guid>
        <description>&lt;p&gt;在接觸 SwiftUI 的這段時間以來，我一直在試著釐清一件事情，那就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;onDisappear 到底是不是壞的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這件事情很玄，畢竟網路上大部分的資訊都告訴我們 &lt;code&gt;onAppear&lt;/code&gt; 類似於 &lt;code&gt;viewDidAppear&lt;/code&gt;、&lt;code&gt;onDisappear&lt;/code&gt; 類似於 &lt;code&gt;ViewDidDisappear&lt;/code&gt;，然後再補上一句&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: In the current SwiftUI beta onDisappear will never be called.
by &lt;a class=&#34;link&#34; href=&#34;https://www.hackingwithswift.com/quick-start/swiftui/how-to-respond-to-view-lifecycle-events-onappear-and-ondisappear&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HackingWithSwift&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或是你可以看到在 &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/56524033/swiftui-tutorial-presentationbutton-bug&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;StackOverFlow&lt;/a&gt; 上大家是這麼討論的&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1567592461034.webp&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1567592461034.webp&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;討論串&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;討論串&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接著，在這一路以來，你又曾經碰過真的是 &lt;a class=&#34;link&#34; href=&#34;https://www.facebook.com/ArchieR7/posts/1270505116459170?__xts__[0]=68.ARBpWWNCmHh2M-RWOU3iIMHGjHaqUFrYYq20rdW3rZPOKly8XLhKuiKRpdL3a8dZbCy34sa9Y_2WoK3-5xsVC97Dei6DSBnry2jb1sKMR7g1R9bNCVHaGeMpW3dGGd2vEwMGgXBFF7JB_P1xDE1UXKRo8yXV49sIwvPNNP9sgwugghlUd3MwuI1FhkRZSZm5g-wNidZsIQdaMuQe9cg0mXNAVwIcAGsKWk5mN4VCK6Ie44GWwYmZfv47uvGben-Iu0Tj4hXNyHtEh06BLB5Qlw-lqh0TUO2GZLMXpm1Ib47CCGqN3kYvdURfFZ6IuJn11wJF4AKE2PPMKuZDsF8nWg&amp;amp;__tn__=-R&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Apple 的 bug&lt;/a&gt;，所以你就會很理所當然地認為⋯⋯&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;沒錯，onDisappear 就是壞的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直到認真找找官方文件到底有沒有使用到 onDisappear 的範例，於是找到了&lt;a class=&#34;link&#34; href=&#34;https://developer.apple.com/tutorials/swiftui/working-with-ui-controls&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;這篇&lt;/a&gt; 並下載下來研究發現&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;onDisappear 是會動的⋯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這代表著一件事，就是其實是我誤解它的使用方式，而非它是壞的。
來看看官方的這個 View&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ProfileHost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;editMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mode&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;profile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;draftProfile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;some&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;VStack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;leading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spacing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;HStack&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wrappedValue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;active&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;Button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;profile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;draftProfile&lt;/span&gt;
                        &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;animation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wrappedValue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inactive&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Done&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
				
                &lt;span class=&#34;n&#34;&gt;Spacer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
				
                &lt;span class=&#34;n&#34;&gt;EditButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wrappedValue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inactive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;ProfileSummary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;ProfileEditor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;draftProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onDisappear&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;draftProfile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;profile&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;想了一下，若是我的話我會將 &lt;code&gt;onDisappear&lt;/code&gt; 寫在哪裡？應該會是在 &lt;code&gt;ProfileEditor&lt;/code&gt; 的 &lt;code&gt;body&lt;/code&gt; 裡頭吧。而實際上測試了，在 &lt;code&gt;ProfileEditor.body&lt;/code&gt; 裡頭實作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onDisappear&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;disappear&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是沒有效果的，我才得到一個結論&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;onDisappear 和 viewDidDisappear 不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;onDisappear&lt;/code&gt; 的概念是監聽你底下那個消失的動作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Adds an action to perform when this view disappears.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但並不是像 &lt;code&gt;UIViewController.viewDidDisappear&lt;/code&gt; 一樣，是對物件本身消失去做動作。&lt;/p&gt;
&lt;p&gt;因為大多數的文章都習慣將 &lt;code&gt;onAppear&lt;/code&gt; 和 &lt;code&gt;viewDidAppear&lt;/code&gt; 做對比，也就造成我自己對於使用方式上產生誤解；實際上 &lt;code&gt;onDisappear&lt;/code&gt; 的動作應該做在 superView 之中，而非直接寫在那個 struct 裡頭。&lt;/p&gt;
&lt;p&gt;這大概就是一個從 UIKit 轉到 SwiftUI 才會誤解的地方了⋯⋯如果是一開始就從官方文件開始用 SwiftUI 學習寫 iOS 的人，應該不會陷入這種迷思🤷‍♂️&lt;/p&gt;
</description>
        </item>
        <item>
        <title>📒 SwiftUI &#43; CoreData 的實戰心得🔥</title>
        <link>https://www.archie.tw/p/swiftui-coredata-%E7%9A%84%E5%AF%A6%E6%88%B0%E5%BF%83%E5%BE%97/</link>
        <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/swiftui-coredata-%E7%9A%84%E5%AF%A6%E6%88%B0%E5%BF%83%E5%BE%97/</guid>
        <description>&lt;h2 id=&#34;swiftui--coredata&#34;&gt;SwiftUI + CoreData&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1567567373250.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1567567373250.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;這篇文章會紀錄我在目前的 side project 上，如何在 SwiftUI 下導入 CoreData；
而如同 &lt;a class=&#34;link&#34; href=&#34;../%e5%9c%a8-swiftui-%e8%99%95%e7%90%86%e4%b8%ad%e6%96%87%e8%bc%b8%e5%85%a5%e6%b3%95%e6%89%80%e6%9c%83%e9%81%87%e4%b8%8a%e7%9a%84%e5%95%8f%e9%a1%8c/&#34; &gt;在 SwiftUI 處理中文輸入法所會遇上的問題&lt;/a&gt; 所提及的，SwiftUI 身為一個還在測試階段的 framework，我們必須將當下的開發環境紀錄下來，以避免造成日後官方修正所造成的誤解。&lt;/p&gt;
&lt;h3 id=&#34;開發環境&#34;&gt;開發環境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Xcode 11 Beta 7（但顯示為 Beta 6 - 11M392r ）&lt;/li&gt;
&lt;li&gt;macOS Catalina - 19A546d&lt;/li&gt;
&lt;li&gt;iOS 13.1 Beta&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用情境&#34;&gt;使用情境&lt;/h3&gt;
&lt;p&gt;我要做一個貨幣的列表，並讓使用者可以對相對應的貨幣做隱藏與否，所以規格大概是需要一個 &lt;code&gt;List&lt;/code&gt;，而 &lt;code&gt;Row&lt;/code&gt; 裡頭呈現貨幣的名稱以及用 &lt;code&gt;Toggle&lt;/code&gt; 來做控制隱藏的開關。&lt;/p&gt;
&lt;h3 id=&#34;coredata-model---currency&#34;&gt;CoreData Model - Currency&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1567568104916.webp&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1567568104916.webp&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;row-的部分&#34;&gt;Row 的部分&lt;/h3&gt;
&lt;p&gt;在 &lt;a class=&#34;link&#34; href=&#34;https://sarunw.com/posts/swiftui-changes-in-xcode-11-beta-5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Xcode 11 Beta 5 之後&lt;/a&gt;， &lt;code&gt;NSManagedObject&lt;/code&gt; 可以視為一個 &lt;code&gt;@ObservedObject&lt;/code&gt;，所以我們可以不必再弄一個 &lt;code&gt;ManageRowModel&lt;/code&gt;，而是直接使用 &lt;code&gt;NSManagedObject&lt;/code&gt; 來連動。
這邊我需要以英文大寫來顯示貨幣名稱以及一個控制是否顯示在主畫面上的開關。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ManageRow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ObservedObject&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;currency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Currency&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;some&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;HStack&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;VStack&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uppercased&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;font&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fontWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;Toggle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isOn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isPresented&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;畫面如下方所呈現的樣式：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1567568029659.webp&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1567568029659.webp&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我們可以直接讓 &lt;code&gt;Toggle(isOn: _)&lt;/code&gt; 和 &lt;code&gt;Currency.isPresented&lt;/code&gt; 連動，這樣便可以直接修改到相對應的值。&lt;/p&gt;
&lt;h3 id=&#34;view-的部分&#34;&gt;View 的部分&lt;/h3&gt;
&lt;p&gt;在 SwiftUI 裡頭有提供一個 &lt;code&gt;@FetchRequest(fetchRequest:&lt;/code&gt; 的 propertyWrapper，而若要使用的話，記得要一併宣告 &lt;code&gt;NSManagedObjectContext&lt;/code&gt; 到 &lt;code&gt;@Environment&lt;/code&gt; 之中，否則會報錯：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ManageView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;managedObjectContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;context&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FetchRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fetchRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fetchRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;currencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FetchedResults&lt;/span&gt;
	
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;some&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rowContent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ManageRow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fetchRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSFetchRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Currency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSFetchRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Currency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fetchRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sortDescriptors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSSortDescriptor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keyPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Currency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ascending&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣就可以在畫面建立時，透過 SwiftUI 的機制去執行 fetchRequest 並呈現出來。&lt;/p&gt;
&lt;h3 id=&#34;-注意事項&#34;&gt;⚠️ 注意事項&lt;/h3&gt;
&lt;h4 id=&#34;identifible-的使用&#34;&gt;Identifible 的使用&lt;/h4&gt;
&lt;p&gt;若要在 &lt;code&gt;List&lt;/code&gt; 之中直接使用 &lt;code&gt;NSManagedObject&lt;/code&gt; 作為 &lt;code&gt;RandomAccessCollection&lt;/code&gt;，可以讓它符合 &lt;code&gt;Identifible&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Currency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Identifible&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但這個意味著我們會以預設的 id，如 &lt;code&gt;NSManagedObject.objectId&lt;/code&gt; 作為是否需要重新繪製畫面的依據，而在這邊會遇上一個問題：
當我們將這個 &lt;code&gt;List&lt;/code&gt; 作為另一個畫面的 &lt;code&gt;Sheet&lt;/code&gt; 時，當它出現時，並不會重新繪製 &lt;code&gt;List&lt;/code&gt;；
也就是說已經在畫面上的 Row，會出現第一次畫面的狀態且之後 &lt;code&gt;Sheet&lt;/code&gt; 出現都還會保持一樣的畫面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;簡單來說就是開關的狀態不會改變，除非使用者自己上下滑動觸動 SwiftUI 重新繪製的機制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我必須讓系統知道，&lt;code&gt;isPresented&lt;/code&gt; 若有改變過的話，需要更新 row 的畫面&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Currency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Identifiable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;describing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isPresented&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這邊我目前的作法是將 &lt;code&gt;id&lt;/code&gt; 包含了 &lt;code&gt;isPresented&lt;/code&gt; 的狀態，所以當同一個 &lt;code&gt;objectId&lt;/code&gt; 有不同的 &lt;code&gt;isPresented&lt;/code&gt; 時，對於 &lt;code&gt;List&lt;/code&gt; 是不同的 &lt;code&gt;Row&lt;/code&gt;，這時就會重新繪製成正確的畫面。&lt;/p&gt;
&lt;h4 id=&#34;environmentmanagedobjectcontext-的使用&#34;&gt;@Environment(.managedObjectContext) 的使用&lt;/h4&gt;
&lt;p&gt;我這邊的使用情境是，使用者點擊一個設定的按鈕會跳出一個 &lt;code&gt;ManageView&lt;/code&gt;，而 &lt;code&gt;ManageView&lt;/code&gt; 可以點擊儲存或是直接滑掉放棄當前操作。
所以在前一個畫面上，我們需要為它設立 &lt;code&gt;NSManagedObjectContext&lt;/code&gt;，並在 onDismiss 時捨棄掉這次的操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ContentView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;some&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sheet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isPresented&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isManagePresented&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	               &lt;span class=&#34;n&#34;&gt;onDismiss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CoreDataStack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rollback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
	               &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;manageView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;manageView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;some&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;ManageView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;managedObjectContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CoreDataStack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上便是目前在 SwiftUI 上實作 CoreData 的分享📒&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SwiftUI 上的鍵盤處理方式</title>
        <link>https://www.archie.tw/p/swiftui-%E4%B8%8A%E7%9A%84%E9%8D%B5%E7%9B%A4%E8%99%95%E7%90%86%E6%96%B9%E5%BC%8F/</link>
        <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/swiftui-%E4%B8%8A%E7%9A%84%E9%8D%B5%E7%9B%A4%E8%99%95%E7%90%86%E6%96%B9%E5%BC%8F/</guid>
        <description>&lt;p&gt;在 iOS 的開發過程之中，難免會碰到一個狀況，那便是 UITextField/ UITextView 被鍵盤所遮住了⌨️
在 UIKit 之下，多數人會使用套件來做全域的處理，如 &lt;a class=&#34;link&#34; href=&#34;https://github.com/hackiftekhar/IQKeyboardManager&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IQKeyboardManager&lt;/a&gt; 就是一個十分經典的解決方案。&lt;/p&gt;
&lt;h3 id=&#34;來說說-swiftui-上的鍵盤處理方式&#34;&gt;來說說 SwiftUI 上的鍵盤處理方式&lt;/h3&gt;
&lt;p&gt;在 SwiftUI 上，我們也可以很優雅地處理這一塊，如在 &lt;code&gt;List&lt;/code&gt; 元件中，只需要分別監聽 &lt;code&gt;UIWindow.keyboardWillShowNotification&lt;/code&gt; 和 &lt;code&gt;UIWindow.keyboardWillHideNotification&lt;/code&gt;，以及加上個 &lt;code&gt;.animation(.default)&lt;/code&gt; 來優化使用者體驗。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var body: some View {
        List(viewModel.rowModels, rowContent: DemoRow.init)
            .padding(EdgeInsets(top: 0, leading: 0, bottom: bottomPadding, trailing: 0))
            .onReceive(NotificationCenter.default.publisher(for: UIWindow.keyboardWillShowNotification),
                       perform: updateFrame)
            .onReceive(NotificationCenter.default.publisher(for: UIWindow.keyboardWillHideNotification),
                       perform: updateFrame)
            .animation(.default)
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完整的 struct 可以在 &lt;a class=&#34;link&#34; href=&#34;https://github.com/ArchieR7/Archie.tw/blob/master/KeyboardNotificationView.swift&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; 上查看👍&lt;/p&gt;
&lt;h3 id=&#34;成果動畫&#34;&gt;成果動畫&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/KeyboardNotificationView.gif&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/KeyboardNotificationView.gif&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有任何問題歡迎在底下留言👏有寫法上的建議可以直接在 GitHub 上反應👍
有想看看一些廢話的話則是可以在 &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/ChangArchie&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twitter&lt;/a&gt; 直接找到我喔！😂&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Archie 的斜槓紀錄 2019-08</title>
        <link>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E7%B4%80%E9%8C%84-2019-08/</link>
        <pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/archie-%E7%9A%84%E6%96%9C%E6%A7%93%E7%B4%80%E9%8C%84-2019-08/</guid>
        <description>&lt;h3 id=&#34;這篇是什麼&#34;&gt;這篇是什麼？&lt;/h3&gt;
&lt;p&gt;這篇文章的內容並不會圍繞 iOS 或是 Swift 等，而是投資理財的部分，其中並不會有什麼教學或是分析，單純只是我這個月的損益總結而已。&lt;/p&gt;
&lt;h2 id=&#34;2019-年-8-月份總結&#34;&gt;2019 年 8 月份總結&lt;/h2&gt;
&lt;h3 id=&#34;adsense&#34;&gt;Adsense&lt;/h3&gt;
&lt;p&gt;其實我一直沒有在看這方面的收入，不過看來要加把勁在廣告上才是💪
大多數都是從一、兩個我沒有在維護的 App 來的⋯⋯
九月份會開始掛上網站的廣告和看能不能在 iOS 13 正式版上線的時候，
將一個由 SwiftUI + Combine 所編寫的 side project 弄上架💦&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1567152135553.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1567152135553.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;bitfinex&#34;&gt;Bitfinex&lt;/h3&gt;
&lt;p&gt;我有在 Bitfinex 搭配 Coinlend 進行放貸，並在 8/9 加碼了 $ 50,000 元進去
八月份的報表大概如下
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/image-1567340956932.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/image-1567340956932.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
共獲利了 USD $ 31.68&lt;/p&gt;
&lt;h3 id=&#34;台股股利&#34;&gt;台股股利&lt;/h3&gt;
&lt;p&gt;這個月領了三次股利，共計 $ 1,596 元&lt;/p&gt;
&lt;h2 id=&#34;八月份總收入&#34;&gt;八月份總收入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adsense USD $ 1.33&lt;/li&gt;
&lt;li&gt;Bitfinex USD $ 31.68&lt;/li&gt;
&lt;li&gt;台股股利 $ 1,596 元&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;共計 $ 2,629.87 元&lt;/p&gt;
&lt;h3 id=&#34;斜槓率&#34;&gt;斜槓率&lt;/h3&gt;
&lt;p&gt;這是我自己給的定義，簡單來說就是當每個月的額外收入達 $ 50,000 元；
每年額外收入達 $ 600,000 元時，就是可以辭去正職工作的時候（不知道要到什麼時候⋯⋯）&lt;/p&gt;
&lt;p&gt;2,629.87 / 50,000 = 5.25974 %&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[|_________ 5% __________]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再繼續努力，九月底再來記錄吧！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>在 SwiftUI 處理中文輸入法所會遇上的問題</title>
        <link>https://www.archie.tw/p/%E5%9C%A8-swiftui-%E8%99%95%E7%90%86%E4%B8%AD%E6%96%87%E8%BC%B8%E5%85%A5%E6%B3%95%E6%89%80%E6%9C%83%E9%81%87%E4%B8%8A%E7%9A%84%E5%95%8F%E9%A1%8C/</link>
        <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E5%9C%A8-swiftui-%E8%99%95%E7%90%86%E4%B8%AD%E6%96%87%E8%BC%B8%E5%85%A5%E6%B3%95%E6%89%80%E6%9C%83%E9%81%87%E4%B8%8A%E7%9A%84%E5%95%8F%E9%A1%8C/</guid>
        <description>&lt;p&gt;最近開始在嘗試把玩 SwiftUI 並打算作為一個 side project 的主要 UI 編寫方式，這篇文章則是其中一個使用情境所遇上的困難處。&lt;/p&gt;
&lt;h3 id=&#34;開發環境&#34;&gt;開發環境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Xcode 11 Beta 7（但顯示為 Beta 6 - 11M392r ）&lt;/li&gt;
&lt;li&gt;macOS Catalina - 19A546d&lt;/li&gt;
&lt;li&gt;iOS 13.1 Beta&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記錄這點蠻重要的，因為可能過個幾版這篇文章就沒參考價值了😂
還沒有下載更新的朋友，可以快去&lt;a class=&#34;link&#34; href=&#34;https://developer.apple.com/download/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;更新&lt;/a&gt;一下！&lt;/p&gt;
&lt;h3 id=&#34;使用情境&#34;&gt;使用情境&lt;/h3&gt;
&lt;p&gt;我要來做一個搜尋的功能，讓使用者可以輸入關鍵字，並自動搜尋完後將結果呈現在下方👏&lt;/p&gt;
&lt;p&gt;於是我們可以用兩個 UI 元件來達成這件事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TextField&lt;/li&gt;
&lt;li&gt;List
並寫一個 &lt;code&gt;@Binding var&lt;/code&gt; 或是 &lt;code&gt;@ObservedObject var&lt;/code&gt; 來讓 &lt;code&gt;TextField&lt;/code&gt; 的 text 有個 binding 的地方，當它的值有更新時，觸發搜尋的動作🚀
而搜尋完的結構再來更新畫面上的 &lt;code&gt;List&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;聽起來沒什麼毛病，對吧？&lt;/p&gt;
&lt;h3 id=&#34;實際上你會遇上的問題&#34;&gt;實際上你會遇上的問題⋯&lt;/h3&gt;
&lt;p&gt;當你想和我一樣，用拼音的輸入方式時；不論是你拼音還是注音，當你按下第一個音時，便會跑一次上述的流程了⋯⋯
而我們所期望的流程應該是使用者選完字後再進行搜尋，這點在目前的 &lt;code&gt;TextField&lt;/code&gt; 是做不到的，因為它不會判別目前是否有還沒拼完音的狀況就發動了。&lt;/p&gt;
&lt;h3 id=&#34;那該怎麼辦呢&#34;&gt;那該怎麼辦呢？&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/Screen-Shot-2019-08-30-at-12.11.32-PM.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/Screen-Shot-2019-08-30-at-12.11.32-PM.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;喵神這麼說&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;喵神這麼說&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可以查看一下當時的&lt;a class=&#34;link&#34; href=&#34;https://twitter.com/ChangArchie/status/1166596036112125952&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;相關推文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我的作法就是以 &lt;code&gt;UIViewRepresentable&lt;/code&gt; 來包裝，詳細的程式碼可以到 &lt;a class=&#34;link&#34; href=&#34;https://github.com/ArchieR7/Archie.tw/blob/master/MarkedTextField.swift&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; 查看👍&lt;/p&gt;
&lt;h3 id=&#34;成果&#34;&gt;成果&lt;/h3&gt;
&lt;p&gt;當輸入了 &lt;code&gt;luo dong&lt;/code&gt; 但是還沒選字的話並不會有動作。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/Screen-Shot-2019-08-30-at-11.57.22-AM.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/Screen-Shot-2019-08-30-at-11.57.22-AM.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
而當選字後便會進行搜尋🔍
&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.archie.tw/../img/Screen-Shot-2019-08-30-at-12.00.31-PM.png&#34; &gt;
		&lt;img src=&#34;https://www.archie.tw/../img/Screen-Shot-2019-08-30-at-12.00.31-PM.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果還有什麼問題的話，歡迎留言討論👏&lt;/p&gt;
</description>
        </item>
        <item>
        <title>建立 Xcode 的檔案範本</title>
        <link>https://www.archie.tw/p/%E5%BB%BA%E7%AB%8B-xcode-%E7%9A%84%E6%AA%94%E6%A1%88%E7%AF%84%E6%9C%AC/</link>
        <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E5%BB%BA%E7%AB%8B-xcode-%E7%9A%84%E6%AA%94%E6%A1%88%E7%AF%84%E6%9C%AC/</guid>
        <description>&lt;h3 id=&#34;什麼是範本&#34;&gt;什麼是範本？&lt;/h3&gt;
&lt;p&gt;在新增檔案的時候，會有預設的這幾種類型可以選擇；而當我們有一些自己常用的架構，如 Coordinator、ViewModel 等，可以自建一個範本來使用。
下面舉例幾個預設的 Swift 檔案&lt;/p&gt;
&lt;h3 id=&#34;swift-file&#34;&gt;Swift File&lt;/h3&gt;
&lt;p&gt;位置在
&lt;code&gt;/Applications/Xcode.app/Contents/Developer/Library/Xcode/Templates/File Templates/Source/Swift File.xctemplate&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//___FILEHEADER___

import Foundation
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;swiftui-view&#34;&gt;SwiftUI View&lt;/h4&gt;
&lt;p&gt;位置在
&lt;code&gt;/Applications/Xcode-beta.app/Contents/Developer/Library/Xcode/ExtraTemplates/File Templates/User Interface&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//___FILEHEADER___&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SwiftUI&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;___FILEBASENAMEASIDENTIFIER___&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;some&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*@START_MENU_TOKEN@*/&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*@END_MENU_TOKEN@*/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#if&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;DEBUG&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;___FILEBASENAMEASIDENTIFIER____Previews&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PreviewProvider&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;previews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;some&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;___FILEBASENAMEASIDENTIFIER___&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這些是跟著 Xcode.app 走的，而若是我們使用者自定義要使用的，得放在
&lt;code&gt;/Users/UserName/Library/Developer/Xcode/Templates&lt;/code&gt;
先建立一個資料夾，或是可以到上述的位置複製一份過來。
需要至少三個檔案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FILEBASENAME.swift&lt;/li&gt;
&lt;li&gt;TemplateIcon.png&lt;/li&gt;
&lt;li&gt;TemplateInfo.plist&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我自己的使用方式是複製系統的 Swift file 來做修改 🔧
也比較好去熟悉可替換文字和 header 的使用方式 👍&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Get ETH balance and tokens balance</title>
        <link>https://www.archie.tw/p/get-eth-balance-and-tokens-balance/</link>
        <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/get-eth-balance-and-tokens-balance/</guid>
        <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;最近都在處理區塊鏈相關的問題，其中一個就是怎麼直接透過節點（****.infura.io）來取得 ETH 和其他 ERC-20 的地址餘額（balance）。&lt;/p&gt;
&lt;h1 id=&#34;json-rpc&#34;&gt;JSON RPC&lt;/h1&gt;
&lt;p&gt;ETH 節點所使用的 request body 是依照 JSON RPC 的方式，也就是我們所使用的 request path 都是相同的，像是主要的 &lt;a class=&#34;link&#34; href=&#34;https://mainnet.infura.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mainnet.infura.io&lt;/a&gt; ；不同的是，我們可以透過不同的 body 內容來區別不同的需求。&lt;/p&gt;
&lt;h2 id=&#34;基本的-body-格式&#34;&gt;基本的 body 格式&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;jsonrpc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;method&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;method name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;params&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;取得-eth-餘額&#34;&gt;取得 ETH 餘額&lt;/h2&gt;
&lt;p&gt;取得 ETH 餘額的方式較為單純，節點有提供一個 method 是 eth_getBalance，使用起來如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;jsonrpc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;method&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;eth_getBalance&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;params&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;你的 ETH 地址&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;latest&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中這邊的 latest 意思是指向最新的那個區塊取資料的意思；&lt;/p&gt;
&lt;p&gt;我們便可以得到 response：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;jsonrpc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;result&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0x0234c8a3397aab58&amp;#34;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;158972490234375000&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中注意到一點是，result 所回應的是你這個地址有幾聰的 hex 字串，所以當我們取得的時候得注意一下。&lt;/p&gt;
&lt;h2 id=&#34;erc-20-的餘額&#34;&gt;ERC-20 的餘額&lt;/h2&gt;
&lt;p&gt;而 ERC-20 的餘額就沒有上述那麼直覺的取得方式了，我們需要透過別的 method 來完成這個動作。&lt;/p&gt;
&lt;p&gt;這邊我們只是需要取得餘額，而沒有更新合約的狀態，所以使用 eth_call 這個 method。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;jsonrpc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;method&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;eth_getBalance&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;params&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Token 的 contract address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;latest&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這邊的重點便是 data 的部分，它的組成為&lt;/p&gt;
&lt;p&gt;0x + 8 bits + 64 bits&lt;/p&gt;
&lt;p&gt;其中 8 bits 是由 function signature hash 的結果取前 8 bits；&lt;/p&gt;
&lt;p&gt;我們這邊所使用的 function 名稱是 balanceOf(address)，去做 Keccak-256（SHA-3）hash 可以得到&lt;/p&gt;
&lt;p&gt;70a08231b98ef4ca268c9cc3f6b4590e4bfec28280db06bb5d45e689f2a360be&lt;/p&gt;
&lt;p&gt;而前 8 bits 便是 70a08231。&lt;/p&gt;
&lt;p&gt;後 64 bits 則是所要查詢的 ETH 地址，&lt;/p&gt;
&lt;p&gt;000000000000000000000000 + 要查詢的地址 40 bits，&lt;/p&gt;
&lt;p&gt;所以組成起來的 data 欄位就會是：&lt;/p&gt;
&lt;p&gt;0x70a08231000000000000000000000000 + ETH 地址。&lt;/p&gt;
&lt;p&gt;這樣就可以取得相對應的 token 餘額了。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BIP-39 Mnemonic validate</title>
        <link>https://www.archie.tw/p/bip-39-mnemonic-validate/</link>
        <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/bip-39-mnemonic-validate/</guid>
        <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;最近處理了一些加密貨幣的問題，其中一個是助記詞的驗證，這邊將會解釋助記詞的生成和驗證方式。&lt;/p&gt;
&lt;h1 id=&#34;生成助記詞&#34;&gt;生成助記詞&lt;/h1&gt;
&lt;p&gt;首先我們這邊所介紹的是助記詞生成方式，先建立一個 128 bytes 的隨機序列，也就是隨機產生 16 個 UInt8 的序列；&lt;/p&gt;
&lt;p&gt;主要有分成 128、160、192、224、256 bits（每 32 bits 做為一個區間），而下列會以 128 bits 作為流程解釋。&lt;/p&gt;
&lt;h2 id=&#34;對隨機序列加密sha256&#34;&gt;對隨機序列加密（SHA256）&lt;/h2&gt;
&lt;p&gt;我們對剛剛所產生的序列做 SHA256 加密，便會得到由 32 個 UInt8 所組成的 Array。&lt;/p&gt;
&lt;h2 id=&#34;checksum&#34;&gt;Checksum&lt;/h2&gt;
&lt;p&gt;用來驗證助記詞是否正確的方式是透過 Checksum 來辨別，而 Checksum 的 size 為序列的長度 / 區間，如我們這邊所提及的 128 / 32 = 4；&lt;/p&gt;
&lt;p&gt;意思便是剛剛所加密完的序列，我們取前面 4 bytes 的數值當作 checksum。&lt;/p&gt;
&lt;h2 id=&#34;產生助記詞&#34;&gt;產生助記詞&lt;/h2&gt;
&lt;p&gt;而剛剛的隨機序列（128 bits）加上 4 bits 的 checksum 組成 132 bits，接著我們每 11 bits 作為一個分隔，也就可以得到 132 / 11 = 12 個數字。&lt;/p&gt;
&lt;p&gt;而每 11 bits 作為一個分隔的意思也意味著數字的區間落在 0 – 2047 之間，也就是為什麼 12 字的助記詞所支援的單字庫數量為 2048。&lt;/p&gt;
&lt;p&gt;接著就到詞庫裏頭撿取相對應 index 的字詞來組成助記詞。&lt;/p&gt;
&lt;h2 id=&#34;驗證助記詞&#34;&gt;驗證助記詞&lt;/h2&gt;
&lt;p&gt;驗證的方式就是將上述的流程反過來做，我們先講助記詞轉成詞庫的 index 順序；&lt;/p&gt;
&lt;p&gt;接著看最後 4 bits 的內容，也就是這組助記詞的 checksum。&lt;/p&gt;
&lt;p&gt;而前 128 bits 以 8 bits 作分隔，接著以 SHA256 加密，判斷前 4 bits 是否和剛剛提及的 checksum 相符。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Change login shells without chsh</title>
        <link>https://www.archie.tw/p/change-login-shells-without-chsh/</link>
        <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/change-login-shells-without-chsh/</guid>
        <description>&lt;p&gt;前言
最近心血來潮更新了 brew，其中我正在使用的 shells – zsh 也一併更新了，才發現當初在從 bash 轉到 zsh 的時候有指定到版號的部分⋯也就是長得像這樣&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/usr/local/bin/zsh-5.6.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而 zsh 一更新之後，我的 iterm2 便很合理地打不開，因為找不到 login 的 shells；
當初我是在 bash 裡頭使用 chsh 來變更&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chsh -s $(which zsh)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如今打不開 iterm2 該如何更改呢？&lt;/p&gt;
&lt;h3 id=&#34;使用者與群組&#34;&gt;使用者與群組&lt;/h3&gt;
&lt;p&gt;首先先到 使用者與群組&lt;/p&gt;
&lt;p&gt;並先解鎖來得到更改的權限&lt;/p&gt;
&lt;p&gt;就可以按住 control 並點擊使用者，就會出現 進階選項 可以選擇&lt;/p&gt;
&lt;p&gt;最後就可以在 登入 shell 那欄更改即可！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Resign .ipa</title>
        <link>https://www.archie.tw/p/resign-.ipa/</link>
        <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/resign-.ipa/</guid>
        <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;我們都知道 iOS 是使用 ipa 檔案來安裝 app，而該如何換掉 ipa 裡頭的憑證呢？&lt;/p&gt;
&lt;h2 id=&#34;解壓縮&#34;&gt;解壓縮&lt;/h2&gt;
&lt;p&gt;首先，我們先將 Application.ipa 解壓縮，可以得到一個 PayLoad 的資料夾，裡頭包含著一個應用程式 Application。&lt;/p&gt;
&lt;h2 id=&#34;移除舊有的簽章&#34;&gt;移除舊有的簽章&lt;/h2&gt;
&lt;p&gt;接著我們透過 terminal 來進行移除的動作&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rm -rf PayLoad/Application/_CodeSignature
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;找出你打算簽章的 provisionprofile&lt;/p&gt;
&lt;h3 id=&#34;你可以透過-apple-developer-的網頁直接下載或是查看本機裡頭的檔案路徑會是在&#34;&gt;你可以透過 Apple developer 的網頁直接下載，或是查看本機裡頭的檔案，路徑會是在：&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;~/資源庫/MobileDevice/Provisioning Profiles/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用 Finder 到那路徑之後，可以使用空白鍵來進行預覽，
透過名稱以及 SHA-1 來辨別。&lt;/p&gt;
&lt;h3 id=&#34;嵌入-mobileprovision-到-app-之中&#34;&gt;嵌入 mobileprovision 到 app 之中&lt;/h3&gt;
&lt;p&gt;接著就複製並改名字放入 app 中&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cp yourProvisionProfile.mobileprovision Payload/Application.app/embedded.mobileprovision
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;來製作簽章所需要的-entitlementsplist&#34;&gt;來製作簽章所需要的 entitlements.plist&lt;/h3&gt;
&lt;p&gt;先將 .mobileprovision 輸入成 profile.plist&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;security cms -D -i yourProvisionProfile.mobileprovision  &amp;gt; profile.plist
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再來利用 profile.plist 輸出成 entitlements.plist&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/usr/libexec/PlistBuddy -x -c &#39;Print :Entitlements&#39; profile.plist &amp;gt; entitlements.plist\
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;記得-app-bundle-identifier-得和簽章的名稱一致&#34;&gt;記得 App Bundle Identifier 得和簽章的名稱一致&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/usr/libexec/PlistBuddy -c &amp;quot;Set :CFBundleIdentifier tw.Archie.Application&amp;quot; Payload/Application.app/Info.plist
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;就可以開始簽章了&#34;&gt;就可以開始簽章了！&lt;/h2&gt;
&lt;p&gt;我們先透過 security 來找尋並複製剛剛 .mobileprovision 的 SHA-1&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;security find-identity -p codesigning -v
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊記得要從 Frameworks 開始一個一個簽，再來才是 App 本身；
假設你的 mobileprovision SHA-1 為 &lt;code&gt;B77ED97FBFC708A802BDB159CC2ED4E2A4472A09&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;codesign -f -s B77ED97FBFC708A802BDB159CC2ED4E2A4472A09 --entitlements entitlements.plist Payload/Application.app/Frameworks/someFramework.framework
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一個一個簽章完之後，便可以簽署 app 了&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;codesign -f -s B77ED97FBFC708A802BDB159CC2ED4E2A4472A09 --entitlements entitlements.plist Payload/Application.app/Application
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;最後確認是否有簽對&#34;&gt;最後確認是否有簽對&lt;/h2&gt;
&lt;p&gt;我們可以透過 codesign 來查詢&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;codesign -vv -d Payload/Application.app
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果資訊都沒錯的話，就來輸出吧！🎉&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;zip -qr Resigned.ipa Payload
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;題外話使用-xcode-安裝&#34;&gt;題外話，使用 Xcode 安裝&lt;/h1&gt;
&lt;p&gt;就在 Xcode 之中打開 Devices and Simulators 視窗，並將剛剛最後產出的 ipa 直接拖拉到你的裝置即可！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>CoreData with background task</title>
        <link>https://www.archie.tw/p/coredata-with-background-task/</link>
        <pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/coredata-with-background-task/</guid>
        <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;雖然在 iOS 上開發了幾年的時間，但一直到最近才開始使用 CoreData；之前在第一份工作的專案之中是使用 FMDB 來處理資料存取，而後續則是用了 Realm。&lt;/p&gt;
&lt;p&gt;選擇的原因分別是當時 FMDB 的速度較其餘兩者快速，而後來看上 Realm 的跨平台特色，不過近期開發的感想是能以原生為主的話，就儘量降低對於第三方套件的依賴性。&lt;/p&gt;
&lt;h1 id=&#34;這篇文章會記錄些什麼&#34;&gt;這篇文章會記錄些什麼&lt;/h1&gt;
&lt;p&gt;其實這篇文章並不會從頭到尾寫下教學，而把重點放在一些我踩到的雷上，像是⋯⋯&lt;/p&gt;
&lt;h2 id=&#34;記得要附上-sqlite-的路徑&#34;&gt;記得要附上 sqlite 的路徑&lt;/h2&gt;
&lt;p&gt;原先我的 persistentContainer 的產生方式如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kr&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;persistentContainer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSPersistentContainer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;container&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSPersistentContainer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;OfflineWallet&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;description&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSPersistentStoreDescription&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shouldInferMappingModelAutomatically&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shouldMigrateStoreAutomatically&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;persistentStoreDescriptions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loadPersistentStores&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;fatalError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Unresolved error &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;describing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_userInfo&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;container&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在模擬器上存取了幾次，每次都有 save 且第二次進入畫面的時候，都可以 fetch 得到資料，但是只要重開 App 就會從頭來過⋯⋯&lt;/p&gt;
&lt;p&gt;也就是說其實都只是像是存在 NSManagedObjectContext 上，而並沒有實際地轉成 sqlite。&lt;/p&gt;
&lt;p&gt;補上指定的 URL 即可解決。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;documentsDirectoryURL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;documentDirectory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userDomainMask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;first&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sqliteURL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;documentsDirectoryURL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;appendingPathComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;OfflineWallet.sqlite&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sqliteURL&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;performbackgroundtask-vs-newbackgroundcontext&#34;&gt;performBackgroundTask v.s newBackgroundContext&lt;/h2&gt;
&lt;p&gt;要實作 backgroundTask 有兩種作法&lt;/p&gt;
&lt;h3 id=&#34;nspersistentcontainerperformbackgroundtask&#34;&gt;NSPersistentContainer.performBackgroundTask&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;persistentContainer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;performBackgroundTask&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//do something in background thread&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;NSPersistentContainer 會建立一個 context 在這個 closure 裡頭使用，而重點是當這條 thread 結束之後，這個 context 所管理的物件（NSManagedObjectModel）的所有變數會釋放掉，也就是都會變成 nil。&lt;/p&gt;
&lt;p&gt;適合用於取得資料並轉型成其他 class / structure 的時候使用。&lt;/p&gt;
&lt;h3 id=&#34;newbackgroundcontext&#34;&gt;newBackgroundContext&lt;/h3&gt;
&lt;p&gt;而如果你必須在後續的程式之中繼續使用 context 所產生的 NSManagedObjectModel 時，你就得要保存其 context；像是建立一個 backgroundContext 並存下來使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kr&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;backgroundContext&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;persistentContainer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newBackgroundContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//you should use this context to do something what you want&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;backgroundContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;perform&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//do something like before&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此時由於這個 context 並沒有被釋放掉，所以其 NSManagedObjectModel 的所有變數便也會持有著；而依然是在其他 thread 上進行，並不會佔據 main thread。&lt;/p&gt;
&lt;h2 id=&#34;待續&#34;&gt;待續&lt;/h2&gt;
&lt;h3 id=&#34;分頁讀取&#34;&gt;分頁讀取&lt;/h3&gt;
&lt;p&gt;筆記一下 NSFetchRequest 有提供 fetchLimit 以及 fetchOffset 可以用來做分頁讀取的功能。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SwiftLint</title>
        <link>https://www.archie.tw/p/swiftlint/</link>
        <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/swiftlint/</guid>
        <description>&lt;h1 id=&#34;swiftlint&#34;&gt;SwiftLint&lt;/h1&gt;
&lt;p&gt;去年（2018）年末的時候，在 Twitter 上看到一些朋友們在討論著 SwiftLint 的使用，於是便也嘗試在目前公司的專案中導入，來解決 Coding Style 的問題。&lt;/p&gt;
&lt;h2 id=&#34;coding-style-的問題&#34;&gt;Coding Style 的問題&lt;/h2&gt;
&lt;p&gt;剛進入到這家公司時，最痛苦的事情莫過於毫無章法的 Coding Style，這部分就不一一細數了，詳情可以看前陣子我的 Twitter 動態。&lt;/p&gt;
&lt;p&gt;專案裡頭每個人寫的格式不同，會造成其他人在閱讀專案時，大幅增加理解彼此想法的成本&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;簡單來說就是浪費一堆時間在猜你在寫什麼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;為了讓專案裡頭的大家有差不多的 Coding Style，可以選擇使用 SwiftLint 來處理這個情況。&lt;/p&gt;
&lt;h2 id=&#34;實際嘗試&#34;&gt;實際嘗試&lt;/h2&gt;
&lt;p&gt;首先先以 SwiftLint 的官方教學來安裝和建構環境，並利用 &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/ethanhuang13&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ethan&lt;/a&gt; 的 &lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/ethanhuang13/a5d54300a74aef1168b5c2ea2e03d02e&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SwiftLint rules&lt;/a&gt; 當作基底來調整，先以別人的規範來看看差異性。&lt;/p&gt;
&lt;p&gt;一跑下去便是直接噴了 3000+ issues⋯⋯&lt;/p&gt;
&lt;p&gt;可以透過 &lt;a class=&#34;link&#34; href=&#34;https://github.com/realm/SwiftLint/blob/master/Rules.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Rules.md&lt;/a&gt; 來逐條看看定義並透過 example 來看怎麼算是 Non Trggering 和 Triggering；再來一條一條調整改進。&lt;/p&gt;
&lt;h3 id=&#34;一些心得&#34;&gt;一些心得&lt;/h3&gt;
&lt;p&gt;目前公司的專案從 3000+ ➡️ 17 warings，而這 17 條是我還沒 refactor 到的 features，所以就還沒那麼急著去調整。&lt;/p&gt;
&lt;h3 id=&#34;private_outlet-和-private_action&#34;&gt;private_outlet 和 private_action&lt;/h3&gt;
&lt;p&gt;而其中一條規則 private_outlet 給我的感觸挺深刻的，由於我大多數的工作經歷是獨立開發居多，而每個 IBOutlet 都必須為 private 是第一份工作時所踩到的坑；當時公司共有兩位 iOS 工程師，彼此皆為 Junior 的程度，故沒什麼規範和概念，於是便會出現一些神秘的情境⋯⋯&lt;/p&gt;
&lt;p&gt;像是不知道為什麼你負責的 UIViewController 刻出來的畫面就是和你想的不太一樣，才發現另一個地方（別人寫的 code）在直接修改畫面的 Layout / value⋯⋯&lt;/p&gt;
&lt;p&gt;後來就體會到物件的每個變數和 functions 的 access 問題，而這條規則便是解釋著 IBOutlet 不應該可以直接從其他地方呼叫、修改，像是被這麼做：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;fooViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fooLabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;從那時候開始養成的習慣到現在，當發覺其實有其他人也是這麼做，並將它視為一條 rule 的時候真的覺得有點小感動！&lt;/p&gt;
&lt;h3 id=&#34;整體來說&#34;&gt;整體來說&lt;/h3&gt;
&lt;p&gt;你可以透過這個 SwiftLint 來反覆思考一些寫程式上的問題，像是 function 的長度、class 的長度以及 Swift 檔案的長度等；如何切割每個物件和 function 等，都是相當值得去思索的習慣問題。&lt;/p&gt;
&lt;p&gt;不過也不需要逐條都導入到專案之中，建議是花一些時間找到你最認同的那幾條 rules 來遵循即可！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AWS EC2 with WordPress</title>
        <link>https://www.archie.tw/p/aws-ec2-with-wordpress/</link>
        <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/aws-ec2-with-wordpress/</guid>
        <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;h2 id=&#34;vultr&#34;&gt;Vultr&lt;/h2&gt;
&lt;p&gt;這個網站原本是在 Vultr 上開一台機器，每個月大概的費用為 USD $6 – 7 元之間，並利用 Certbot 自動更新 SSL 憑證。但後來發現不太會維護那台機器，時常因為記憶體造成資料庫錯誤，每隔兩三天就得去手動重新啟動來解決問題，乾脆就搬家到 WordPress.com 的服務。&lt;/p&gt;
&lt;h2 id=&#34;wordpresscom&#34;&gt;WordPress.com&lt;/h2&gt;
&lt;p&gt;而 WordPress.com 的好處就是全部幫你處理好好的，然後我使用的是個人版的方案；NT$ 130 / 月，便有提供轉址的功能和一年份免費的網域。不過由於我自己是向 PChome 買 Archie.tw，所以主要是為了轉過去而付費。&lt;/p&gt;
&lt;p&gt;但使用服務和自己開一台機器的差異性就在於彈性，像是安裝外掛便被放在商務版的功能之中，而費用為 NT$ 799 / 月。&lt;/p&gt;
&lt;p&gt;這樣一用也用了一段時間，直到近期註冊了 AWS 的服務，便決定搬移到 AWS 上。&lt;/p&gt;
&lt;h2 id=&#34;aws&#34;&gt;AWS&lt;/h2&gt;
&lt;p&gt;在 AWS 上新註冊的用戶可以擁有一年的免費方案，而這個網站目前使用到幾個 AWS 服務分別為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EC2&lt;/li&gt;
&lt;li&gt;Load Balancer&lt;/li&gt;
&lt;li&gt;Certificate Manager&lt;/li&gt;
&lt;li&gt;Route 53&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這邊來介紹我的流程：&lt;/p&gt;
&lt;h3 id=&#34;key-pairs&#34;&gt;Key Pairs&lt;/h3&gt;
&lt;p&gt;首先我們先到 EC2 的頁面選擇 NETWORK &amp;amp; SECURITY ➡️ Key Pairs 來建立一組 Key pair，用於之後連接到 EC2 instance&lt;/p&gt;
&lt;h3 id=&#34;ec2&#34;&gt;EC2&lt;/h3&gt;
&lt;p&gt;透過 AWS Markeyplace 開一台新的 instance，使用 WordPress Certified by Bitnami 搭配 t2.micro 的免費方案；而之後若有收費的時候，約為 USD$ 0.012 / 小時，也就是一個月 USD$ 8.64 / 月。
一路照著步驟走，若你本身沒有其他服務要規劃的話，後續的動作都不需要做任何調整，就可以開好一台裡頭已經安裝好 WordPress 的 EC2 了。&lt;/p&gt;
&lt;p&gt;這時候你就可以使用那台 EC2 的 Public IP 來開啟你的 WordPress 了！&lt;/p&gt;
&lt;h3 id=&#34;使用者&#34;&gt;使用者&lt;/h3&gt;
&lt;p&gt;在網址的最後加上 /admin 可以開啟管理後台，預設的使用者名稱為 user，而密碼的部分可以透過 EC2 Actions ➡️ Instance Settings ➡️ Get System Log 來查看，裡頭會有標註出密碼的欄位。&lt;/p&gt;
&lt;h3 id=&#34;綁定個人網域&#34;&gt;綁定個人網域&lt;/h3&gt;
&lt;p&gt;我們需要透過 Route 53 來處理個人網域的綁定動作，並使用 Load Balancer 和 Certicate Manager 來處理 HTTPS 的連線。&lt;/p&gt;
&lt;p&gt;首先先到 Route 53 的 Hosted zones 建立一個 Hosted Zone 備著，其中你會需要將 NS 帶入到購買網域的管理頁面去設定，並進行 Certificate Manager 建立 SSL certificate。&lt;/p&gt;
&lt;p&gt;建立憑證的時候，會需要將 CHAME 帶入到 Route 53 裡頭，再來建立一個 Load Balancer 來取得 DNS name，這時候再填入到 Route 53 裡頭便完成了 AWS 這部分的建構。&lt;/p&gt;
&lt;p&gt;最後還需要使用最前面所建立的 Key pair 連線到 instance 上，來開啟 HTTPS 的功能。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.bitnami.com/aws/how-to/configure-elb-ssl-aws/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bitnami WordPress 詳細的 SSL 圖文教學&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;-幾個需要注意的地方&#34;&gt;⚠️ 幾個需要注意的地方&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Key Pairs 需要建立在 EC2 instance 之前，且弄丟了你就無法連回去那台 instance 了&lt;/li&gt;
&lt;li&gt;Route 53、Certificate Manager CHAME 那些設定是需要一些時間轉移的&lt;/li&gt;
&lt;li&gt;Route 53 和 Load Balancer 是需要收費的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整體費用的部分我一個月收再來更新這網站一共得支出多少在 AWS 上，處理完這個之後就可以來補上前陣子的 iOS 心得了！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>POSTMAN – Pre-request script</title>
        <link>https://www.archie.tw/p/postman-pre-request-script/</link>
        <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/postman-pre-request-script/</guid>
        <description>&lt;p&gt;POSTMAN 除了可以發送 request 到 server 之外，也有提供 pre-request script 的功能，讓我們可以撰寫 script 來進行一連串的測試。
舉個例子，我們有三支 API，邏輯為 名稱（Request body）【Response body】：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登入（帳號、密碼）【Token】&lt;/li&gt;
&lt;li&gt;取得使用者的消費紀錄列表（Token）【Array&lt;!-- raw HTML omitted --&gt;】&lt;/li&gt;
&lt;li&gt;取得單筆消費紀錄（Receipt ID）【Receipt】&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在沒有撰寫 pre-request 之前若要取得 Receipt 的話，我們得要先呼叫 登入，接著手動複製 Token 到 取得使用者的消費紀錄列表 的 request body 裡頭，然後再複製⋯⋯（你們應該懂）
這邊就來教教如何先寫好 script，之後只要按最後你想得到的那支 API 就行了！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;account&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;account&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;password&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
pm.sendRequest&lt;span class=&#34;o&#34;&gt;({&lt;/span&gt;
    url: &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://Archie.tw/login?account=&amp;#39;&lt;/span&gt; + account + &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;amp;password=&amp;#39;&lt;/span&gt; + password,
    method: &lt;span class=&#34;s1&#34;&gt;&amp;#39;get&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;, &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;err, response&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; response.json&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;.token&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    pm.sendRequest&lt;span class=&#34;o&#34;&gt;({&lt;/span&gt;
        url: &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://Archie.tw/getReceiptList?token=&amp;#39;&lt;/span&gt; + token,
        method: &lt;span class=&#34;s1&#34;&gt;&amp;#39;get&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;, &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;err, response&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        pm.environment.set&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;receiptIdentifier&amp;#34;&lt;/span&gt;, response.receiptIdentifier&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著在 Params / Body 那邊就可以使用剛剛所定義的環境變數（{{receiptIdentifier}}）了！&lt;/p&gt;
&lt;p&gt;然後請不要真的打範例的 url，是不會有東西回給你的（真的）。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Info.plist localized</title>
        <link>https://www.archie.tw/p/info.plist-localized/</link>
        <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/info.plist-localized/</guid>
        <description>&lt;p&gt;一些需要權限的功能都會需要在 Info.plist 裡頭加上說明，而這個說明要實作多語系則是建立一個 InfoPlist.strings（沒錯，名字就是這樣）
然後對相對應得 Key 填寫翻譯，像是：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NSLocationWhenInUseUsageDescription = &amp;quot;說明填寫&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就可以在要使用位置的說明處顯示多語系的結果了。&lt;/p&gt;
&lt;p&gt;至於其他的 Key 可以從 &lt;a class=&#34;link&#34; href=&#34;https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CocoaKey 官方文件&lt;/a&gt;以及 &lt;a class=&#34;link&#34; href=&#34;https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CoreFundationKey&lt;/a&gt; 找找。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Git submodule</title>
        <link>https://www.archie.tw/p/git-submodule/</link>
        <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/git-submodule/</guid>
        <description>&lt;p&gt;有些時候，我們會需要幾個檔案和其他專案共用，而 iOS 的專案可以採取 CocoaPods / Carthage，但如果是要和其他語言共用的話該怎麼辦呢？&lt;/p&gt;
&lt;p&gt;舉個例子，Server 和 Client 之間傳遞 Status Code，像是 code: 20000、20001、20002 之類的，收到 code 後要再做後續動作。&lt;/p&gt;
&lt;p&gt;不過一份 Code 的定義散落在多個平台 / 專案之中，難免會有人雷的時候；不論是 client 記錯或是 server 回錯，而若是有個地方可以共同維護的話，便可以減少這種失誤。&lt;/p&gt;
&lt;p&gt;所以就把那些文件（e.g .json）放到 repository 上，然後在你的專案之中：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git submodule add YourDocumentRepository.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就會在你的專案資料夾中看到 clone 下來的結果，接著再將檔案拖拉至專案之中即可使用。
若要更新 submodule，則下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或是到 clone 下來的資料夾&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git pull
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;像是如果懶得在每一個檔案都 import PodName，就直接弄成 Submodule 的方式來處理也行！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Create CocoaPods by yourself</title>
        <link>https://www.archie.tw/p/create-cocoapods-by-yourself/</link>
        <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/create-cocoapods-by-yourself/</guid>
        <description>&lt;p&gt;這篇文章會介紹建立自己的 &lt;a class=&#34;link&#34; href=&#34;../cocoapods&#34; &gt;CocoaPods&lt;/a&gt; 流程，而我當初是看了 &lt;a class=&#34;link&#34; href=&#34;https://github.com/yoxisem544&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;David&lt;/a&gt; 的&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@davidlin_98861/%e5%a6%82%e4%bd%95%e5%bb%ba%e7%ab%8b%e4%b8%80%e5%80%8b%e5%b1%ac%e6%96%bc%e8%87%aa%e5%b7%b1%e7%9a%84-cocoapods-ab0613a1d2e9&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;教學文&lt;/a&gt;所跑的流程。&lt;/p&gt;
&lt;p&gt;首先，先建立一個新的 Pod&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pod lib create YourPodName
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接著依照自己的 Pod 內容回答問題，便會生成一個新的專案出來。&lt;/p&gt;
&lt;p&gt;再來將 Code.Swift 丟到 Pods/Development Pods/YourPodName，也就是它預設 ReplaceMe.Swift 的那個地方。&lt;/p&gt;
&lt;p&gt;最後 README.md 和 YourPodName.podspec 寫一寫就完成了 Pod 的準備。&lt;/p&gt;
&lt;p&gt;而預設的 REAMME.md 裡頭，有一個 CI Status，你可以移除或者到 Travis.CI 建構；&lt;/p&gt;
&lt;p&gt;從 Travis.CI 那邊可以得知如何建構一個 .travis.yml。&lt;/p&gt;
&lt;p&gt;都準備好之後，在 GitHub 上開一個 repository 來放置，記得要放上 tag 標記目前的版本。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pod spec lint YourPodName.podspec
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最後就送出去就好了！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pod trunk push YourPodName.podspec
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你沒有註冊過的話，得先註冊一下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pod trunk register email@domain.com &#39;Your Name&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而如果你有在 .podspec 裡頭填寫你的 Twitter 的話，就會收到 CocoaPods 貼的文！&lt;/p&gt;
&lt;p&gt;如果你搜尋不到你的 Pod 的話，可以清除目前的 cache 就可以順利找到了！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rm -rf ~/Library/Caches/CocoaPods
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>UUID with version 3, 5 and name spaces</title>
        <link>https://www.archie.tw/p/uuid-with-version-3-5-and-name-spaces/</link>
        <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/uuid-with-version-3-5-and-name-spaces/</guid>
        <description>&lt;p&gt;在 Swift 裏頭，預設的 UUID 只能從 UUID() 來產生，或者是從另一個 UUID 來產生，
這邊來記錄一下如何從 String 來產生 UUID。
首先，先在 Bridge-Header.h 裡頭加入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;CommonCrypto&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;CommonCrypto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再來寫個 UUID 的 extension：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UUID&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UUIDVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UUIDv5NameSpace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dns&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;6ba7b810-9dad-11d1-80b4-00c04fd430c8&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;6ba7b811-9dad-11d1-80b4-00c04fd430c8&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;6ba7b812-9dad-11d1-80b4-00c04fd430c8&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x500&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;6ba7b814-9dad-11d1-80b4-00c04fd430c8&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUIDVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nameSpace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUIDv5NameSpace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Get UUID bytes from name space:&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spaceUID&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuidString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nameSpace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rawValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;withUnsafePointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spaceUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MemoryLayout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ofValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spaceUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        
        &lt;span class=&#34;c1&#34;&gt;// Append name string in UTF-8 encoding:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contentsOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        
        &lt;span class=&#34;c1&#34;&gt;// Compute digest (MD5 or SHA1, depending on the version):&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;digest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repeating&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CC_SHA1_DIGEST_LENGTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withUnsafeBytes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;UnsafePointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC_MD5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC_LONG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC_SHA1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC_LONG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        
        &lt;span class=&#34;c1&#34;&gt;// Set version bits:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x0F&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rawValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Set variant bits:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x3F&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x80&lt;/span&gt;
        
        &lt;span class=&#34;c1&#34;&gt;// Create UUID from digest:&lt;/span&gt;
        &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSUUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuidBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以使用新的 init method 來產生新的 UUID：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUIDVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nameSpace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUIDv5NameSpace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Socket.IO</title>
        <link>https://www.archie.tw/p/socket.io/</link>
        <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/socket.io/</guid>
        <description>&lt;p&gt;這篇文章會介紹有關於 Socket.IO 在 server 端以及 iOS 端的一些實作分享。&lt;/p&gt;
&lt;h1 id=&#34;server&#34;&gt;Server&lt;/h1&gt;
&lt;p&gt;首先我們可以先從 Socket.IO 的 &lt;a class=&#34;link&#34; href=&#34;https://socket.io/get-started/chat/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Get started&lt;/a&gt; 開始，它是以 Node.JS 所編寫的，所以先在資料夾位置執行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;邊可以取得基本的一些檔案和 package.json。
接著安裝 Socket.IO 所需要的 express&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;npm install --save express@4.15.2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後新建一個 index.js 的檔案，貼上&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)();&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;h1&amp;gt;Hello world&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;listening on *:3000&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣待會執行 node index.js 的時候便可以從 http://localhost:3000 來連上這個 server。&lt;/p&gt;
&lt;p&gt;確認 server 目前是可以連上後，便開始安裝 Socket.IO 到其中&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;npm install --save socket.io
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;並在 index.js 裏頭加上 Socket.IO 的 code：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;socket.io&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a user connected&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣便完成監聽 client 連接上 server 的事件了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;connection&lt;/code&gt; 是 socket.io 所定義的 event，而這個 event 會取得 socket 回來，所以以 function(socket) 的方式去接收並處理後續。
不過這裡的 io 可以想成是一個 server，所以每收到一個 client 的 connection 事件，都會執行 function(socket)；而我們若要監聽個別連線的事件，則是使用 socket 來處理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;disconnect&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;user disconnected&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是說，像是登入、傳送訊息等，和個別使用者相關的動作，我們都是以 socket 來處理。&lt;/p&gt;
&lt;p&gt;而除了監聽（on）外，發送（emit）的動作也是如此，像是我想推一段文字給特定的使用者：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;emit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;new message&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;嗨！&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 client 以及 server 端先彼此定義好 event 名稱，這樣就可以知道要監聽的事件為哪些。&lt;/p&gt;
&lt;p&gt;什麼時候該用 io 發送，什麼時候該用 socket 呢？&lt;/p&gt;
&lt;p&gt;舉個例子，我們建立一個 Socket.IO 的大聊天室，任何人只要連上這個網址，便等同於加入這個聊天室。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用者上、下線會顯示提醒&lt;/li&gt;
&lt;li&gt;說髒話的人會個別收到「此訊息無法傳送」的訊息&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;emit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;new user&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;有人加入了這個聊天室！&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;add message&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;馬的&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;emit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;new message&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;此訊息無法傳送&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;emit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;new message&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; 說：&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;disconnect&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;emit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;user leave&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;有人離開了這個聊天室！&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面便可以得知哪種時候應該要大家都可以接收到、而哪種是只會有個別的使用者接收到。
再來介紹一下 ack，在發送一個 event 時，可以在後面補上一個 ack，而當對方收到的時候，可以透過 ack 來傳遞 data，而非再發送一個新的 event。
有點像是 HTTP request 的概念，發送一個 request（emit），接著對方會回傳 response（ack），不過這並不一定會有，也就是說你發送（emit）了一個 event 過去，雖然有夾帶著 ack，但是對方若沒接收那個 ack 的話也是沒用。&lt;/p&gt;
&lt;p&gt;這邊是一個例子，我們從 server 給沒有收過這則廣告的使用者傳送一則過去，並希望使用者真的有收到，若沒收到下次就再傳一次：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 判斷使用者是否有收到過廣告，若沒有的話執行
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;emit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;new advertise&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;恭喜您獲得 $1,000 元折扣！&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;userID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;使用者(&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;userID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;)收到廣告了！&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//去資料庫更新，下次不用再推給這個 userID
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，function(userID) 便是一個 ack 或者可以說是 callback。
相對的，收到訊息的時候，server 也可以回傳 ack 回去給 client 告知：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;add message&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;收到: &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;伺服器收到你的訊息了&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;！&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;請放心&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;！&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如此一來，便會在收到訊息之後，以 ack 的方式回傳訊息回去。
而 ack 和 emit 所發送出去有什麼不同？
在 Socket.IO 的 protocol 裏頭有定義：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Packet#CONNECT ( 0 )&lt;/li&gt;
&lt;li&gt;Packet#DISCONNECT ( 1 )&lt;/li&gt;
&lt;li&gt;Packet#EVENT ( 2)&lt;/li&gt;
&lt;li&gt;Packet#ACK ( 3 )&lt;/li&gt;
&lt;li&gt;Packet#ERROR ( 4 )&lt;/li&gt;
&lt;li&gt;Packet#BINARY_EVENT ( 5 )&lt;/li&gt;
&lt;li&gt;Packet#BINARY_ACK ( 6 )
所以其實雖然動作類似，但 Socket.IO 可以辨別其中的差異，進而可以在 Socket 之中達到 Request、Response 的概念。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;client&#34;&gt;Client&lt;/h2&gt;
&lt;p&gt;Client 的部分，可以使用 Socket.IO 所提供的 Swift framework，它是基於 Starscream 所開發出來的，如同上述說的有使用到 WebSocket 來連接。
以 Swift 來說：&lt;/p&gt;
&lt;p&gt;let manager = SocketManager(socketURL: URL(string: &amp;ldquo;http://localhost:3000&amp;rdquo;)!, config: [configs])
let socket = manager.defaultSocket
這邊介紹幾個我所使用到的 configs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.log(true)：開啟 LOG 的功能。&lt;/li&gt;
&lt;li&gt;.forceWebsockets(true)：若沒有使用這個的話，會以 HTTP polling 的方式連接，從 header 來看的話，就會顯示 connection: keep-alive；而使用了 .forceWebsockets(true) 的話，則會使用 WebSocket 來連線，則會顯示 connection: upgrade。&lt;/li&gt;
&lt;li&gt;.reconnectAttempts(int)：重新嘗試連線 n 次，超過就放棄。&lt;/li&gt;
&lt;li&gt;.connectParams([String: Any])：這邊可以放 token 來做 Authentication。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;為什麼不在 header 裏頭加上 Authentication 的欄位？&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://socket.io/docs/client-api/#With-extraHeaders&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;這邊 Socket.IO 有做解釋，為什麼不建議在 extraHeaders 加東西。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而 on / emit / emitWithAck 這幾個的用法就和 server 的概念一樣，這邊就不再多做解釋，&lt;/p&gt;
&lt;p&gt;之後實作有遇到什麼事情再來補充（或是新文章）！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>StatusBarStyle</title>
        <link>https://www.archie.tw/p/statusbarstyle/</link>
        <pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/statusbarstyle/</guid>
        <description>&lt;p&gt;最近改寫了 StatusBarStyle 的控制方式，從 iOS 9 之前是使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;UIApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statusBarStyle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;並在 info.plist 的 View controller-based status bar appearance 欄位設為 NO。
而後來則改為覆寫 preferredStatusBarStyle 的方式，就不用在 viewWillAppear / viewWillDisappear 的時候手動控制 StatusBarStyle。
首先先確認 info.plist 之中 View controller-based status bar appearance 是為 YSE，
代表我們是透過 View controller-based 的方式來更改 status bar style。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kr&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;preferredStatusBarStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIStatusBarStyle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而配合 UINavigationController 的使用，可以以 Subclass 或是 Extension 的方式來實作，
這就得看專案需求了。&lt;/p&gt;
&lt;h3 id=&#34;subclass&#34;&gt;Subclass&lt;/h3&gt;
&lt;p&gt;在 BaseNavigationController 裏頭，利用 childForStatusBarStyle 回傳要呼叫哪個 UIViewController 的 preferredStatusBarStyle&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kr&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;childForStatusBarStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topViewController&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣每當 UINavigationController 畫面在切換時，便會將 topViewController 叫出來問問它 preferredStatusBarStyle 要什麼樣式。&lt;/p&gt;
&lt;h3 id=&#34;extension&#34;&gt;Extension&lt;/h3&gt;
&lt;p&gt;我們透過 extension UINavigationController 的方式也可以達到一樣的效果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UINavigationController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;childForStatusBarStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topViewController&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如此就不用為了 childForStatusBarStyle 來多寫一個 subclass。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Xcode beta with CocoaPods</title>
        <link>https://www.archie.tw/p/xcode-beta-with-cocoapods/</link>
        <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/xcode-beta-with-cocoapods/</guid>
        <description>&lt;p&gt;Xcode 10 beta 的 Swift 版本為 4.2，而若你目前所使用的 Pods 多數為 Swift 4 的話，該怎麼辦呢？&lt;/p&gt;
&lt;p&gt;你可以在 Podfile 裏頭加上全域的參數來規範所有 Pods 的 Swift version：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;post_install&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;installer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;installer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pods_project&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;targets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build_configurations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build_settings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;SWIFT_VERSION&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如此一番便可以輕鬆地在 Pods 還沒全面支援 Swift 4.2 時就可以使用 Xcode 10 Beta 開發👏&lt;/p&gt;
</description>
        </item>
        <item>
        <title>CompactMap vs flatMap</title>
        <link>https://www.archie.tw/p/compactmap-vs-flatmap/</link>
        <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/compactmap-vs-flatmap/</guid>
        <description>&lt;p&gt;直接從 code 來看兩者之間和 map 的差異&lt;/p&gt;
&lt;h1 id=&#34;compactmap&#34;&gt;CompactMap&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;scores&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;four&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mapped&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [1, 2, 3, nil, 5] &lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;compactMapped&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compactMap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [1, 2, 3, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;flatmap&#34;&gt;flatMap&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;users&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Archie&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ArchieChang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])]&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mapped&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [[1, 2, 4], [3, 2, 5]]&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;flatMapped&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [1, 2, 4, 3, 2, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在使用情境上，CompactMap 可以將 nil 給過濾掉，使得回傳的陣列為 non optional 的型態；&lt;/p&gt;
&lt;p&gt;原先還在使用 map + filter 來處理 nil 的部分，可以直接使用 CompactMap 處理，減少多一次的陣列迴圈。&lt;/p&gt;
&lt;p&gt;而 flatMap 則是在將所有陣列的內容整合進同一個陣列，如我們需要計算全體使用者的總得分時，便可以先將個別使用者的分數集結成一個陣列來處理。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>UserDefaults with Structure</title>
        <link>https://www.archie.tw/p/userdefaults-with-structure/</link>
        <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/userdefaults-with-structure/</guid>
        <description>&lt;p&gt;有時候我們會將一些用戶資訊存在 UserDefaults 裡頭，是個方便且直覺的存取方式。&lt;/p&gt;
&lt;p&gt;而 UserDefaults 並非是所有型別都可以接受，如你自己建構的 struct 或 class，&lt;/p&gt;
&lt;p&gt;就需要先轉成 Data 的格式來存取。&lt;/p&gt;
&lt;p&gt;這邊就來介紹如何存取 User 這個 struct：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這是一個簡單的 User structure，若要轉成 Data 的話，得先將 User 宣告成 Codable，&lt;/p&gt;
&lt;p&gt;這樣就可以透過 PropertyListEncoder 和 PropertyListDecoder 來處理 User 和 Data 之間的 encode decode。&lt;/p&gt;
&lt;p&gt;而最近喜歡使用 extension 的方式來處理 UserDefaults：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserDefaults&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;#function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PropertyListDecoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;profile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newValue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PropertyListEncoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;forKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;#function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;kr&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;forKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;#function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我們利用 #function 的特性，將 function name (user) 直接作為 UserDefaults 的 key，&lt;/p&gt;
&lt;p&gt;再加上一些判斷是否為 nil 的處理，便可以輕鬆底使用 UserDefaults 存取我們所定義的 structure。&lt;/p&gt;
&lt;p&gt;存取 UserDefaults 裡頭的 User 就可以變成很單純的 get 和 set：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// get user from UserDefaults
let user = UserDefaults.standard.user
// set user
UserDefaults.standard.user = user
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Git LFS ( Large File Storage )</title>
        <link>https://www.archie.tw/p/git-lfs-large-file-storage/</link>
        <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/git-lfs-large-file-storage/</guid>
        <description>&lt;p&gt;今天在更新 Blay 的 Pods 時，發現 Realm 的某個檔案（60.04 MB）超出了 GitHub 的上限（50.00 MB），所以無法順利地將檔案推上去 GitHub，而 Git 也自行 untracked 那個檔案，所以在 git status 上便失去了蹤影。&lt;/p&gt;
&lt;p&gt;至於&lt;a class=&#34;link&#34; href=&#34;../pods-%e5%88%b0%e5%ba%95%e9%9c%80%e4%b8%8d%e9%9c%80%e8%a6%81%e6%94%be%e5%9c%a8-.gitignore&#34; &gt;為什麼會將 Pods 的檔案全推到 GitHub 上&lt;/a&gt;呢？&lt;/p&gt;
&lt;p&gt;而在 git push 的時候，有顯示解決的方法，便是今天的主題：&lt;/p&gt;
&lt;h1 id=&#34;git-lfshttpsgit-lfsgithubcom&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-lfs.github.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git LFS&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;首先我們透過 brew 來安裝 git lfs&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install git-lfs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接著繼續在 git 裡頭安裝&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git lfs install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再來我們就來定義哪些檔案需要被 lfs track，像我這邊是這樣：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git lfs track &#39;Pods/Realm/core/librealmcore-ios.a&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後可以透過指令來確認是否有被加入到 track 的名單&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git lfs track
git status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;現在就可以從 git status 之中再次看到剛剛沒推成功的檔案被 track 了！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git lfs track 的內容會被記錄到 .gitattributes 裡頭，所以也一併推上 GitHub 即可完成！
git push
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣便可以在 GitHub 上處理單個檔案超過 50.00 MB 的問題，不過&lt;a class=&#34;link&#34; href=&#34;https://help.github.com/articles/about-storage-and-bandwidth-usage/#bandwidth-quota&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;免費流量為 1GB / month&lt;/a&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Fastlane pilot issue</title>
        <link>https://www.archie.tw/p/fastlane-pilot-issue/</link>
        <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/fastlane-pilot-issue/</guid>
        <description>&lt;p&gt;這是和防火牆有關的 &lt;a class=&#34;link&#34; href=&#34;https://github.com/fastlane/fastlane/issues/11958&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;issue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 fastlane pilot 的 docs 有註記 &lt;a class=&#34;link&#34; href=&#34;https://docs.fastlane.tools/actions/pilot/#firewall-issues&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Firewall Issues&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以透過&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ENV[&amp;quot;DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS&amp;quot;] = &amp;quot;-t DAV&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;來避免上傳的問題！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>DeviceSupport</title>
        <link>https://www.archie.tw/p/devicesupport/</link>
        <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/devicesupport/</guid>
        <description>&lt;p&gt;每當 iOS Beta 更新時，原先的 Xcode  便會無法支援，需要透過從 Xcode Beta 的 DeviceSupport 複製新的版本到正式版之中才能使用；
反正都會做這件事，不如就將 Xcode Beta 裡頭的 DeviceSupport 上傳到 GitHub 上提供給 iOS 有更新，但還沒下載新的 Xcode Beta 的人使用吧！
&lt;a class=&#34;link&#34; href=&#34;https://github.com/ArchieR7/DeviceSupport&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;傳送門點我&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ignore Pods warning</title>
        <link>https://www.archie.tw/p/ignore-pods-warning/</link>
        <pubDate>Tue, 12 Jun 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/ignore-pods-warning/</guid>
        <description>&lt;p&gt;在使用 CocoaPods 的時候難免會碰上 warning，原因不外乎就是使用的套件本身在 build 的時候所產生的警告，但不建議直接 unlock Pods 去修改，請以那專案修改，並在處理完後發送 Pull Request 造福大眾。
不過現階段來說，我們可以做的事情是忽略 Pods 的 Warning，
只要在 Podfile 裡頭加上&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;inhibit_all_warnings!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即可在目前的專案中忽略 Pods 相關的 warning。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Pods 到底需不需要放在 .gitignore？</title>
        <link>https://www.archie.tw/p/pods-%E5%88%B0%E5%BA%95%E9%9C%80%E4%B8%8D%E9%9C%80%E8%A6%81%E6%94%BE%E5%9C%A8-.gitignore/</link>
        <pubDate>Sat, 09 Jun 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/pods-%E5%88%B0%E5%BA%95%E9%9C%80%E4%B8%8D%E9%9C%80%E8%A6%81%E6%94%BE%E5%9C%A8-.gitignore/</guid>
        <description>&lt;p&gt;若有使用 GitHub 所預設的 Swift .gitignore，你會發現在 CocoaPods 的部分寫著&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用意如同字面上的意思，GitHub 所提供的預設會建議你上傳 Pods 的內容到 git server 上，&lt;/p&gt;
&lt;p&gt;而我個人也認同這種做法，目前所想的原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以完整地打包套件當前狀態到 git 上，以避免套件有異動&lt;/li&gt;
&lt;li&gt;若你們有直接修改 Pods 裡頭的 Source code 的話，更加得上傳（不過完全不建議這麼做）&lt;/li&gt;
&lt;li&gt;git clone 下來之後可以不用再 pod install 一次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不過也是有些壞處，如套件越多時，造成 git 上的專案肥大等。&lt;/p&gt;
&lt;p&gt;但是像是 Carthage 的話，就會建議加入到 .gitignore，畢竟它的用意就是要去中心化，&lt;/p&gt;
&lt;p&gt;若將自己 build 出來的套件放上去就和中心概念背道而馳了！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>upgrade git</title>
        <link>https://www.archie.tw/p/upgrade-git/</link>
        <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/upgrade-git/</guid>
        <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;git 最近被發現有&lt;a class=&#34;link&#34; href=&#34;https://blogs.msdn.microsoft.com/devops/2018/05/29/announcing-the-may-2018-git-security-vulnerability/#utm_source=Facebook_PicSee&amp;amp;utm_medium=Social&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;重大的漏洞&lt;/a&gt;，以我們能做的事情就是更新自己的 git！&lt;/p&gt;
&lt;h2 id=&#34;在-macos-上更新&#34;&gt;在 macOS 上更新&lt;/h2&gt;
&lt;p&gt;在 macOS 上，預設的 git 為 git version 2.15.1 (Apple Git-101)，
所以我們需要先透過 brew 來安裝 git。
首先，我們先來更新 brew，這點和 CocoaPods 類似，需要更新本機端的項目；
順道升級 brew 目前裡頭的項目。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew update &amp;amp;&amp;amp; brew upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接著就透過 brew 來安裝 git&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最後再將 Symbolic link 處理一下就好了！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew link --force git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;現在我們確認一下 git 是否已經為新版本（git version 2.17.1）！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>HEROKU</title>
        <link>https://www.archie.tw/p/heroku/</link>
        <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/heroku/</guid>
        <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;這幾個月透過家裡頭的桌機來定時跑爬蟲以及更新 Firebase 資料庫，不過電費也是一筆固定支出，所以趁今天想到這件事，便來搬移到免費的 HEROKU 來做這些事。&lt;/p&gt;
&lt;h1 id=&#34;herokuhttpsdashboardherokucom&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://dashboard.heroku.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HEROKU&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;是一個有提供免費伺服器方案的平台，支援的語言算多，而我的爬蟲是以 Python 3.6 作為開發語言的，故選擇它來玩玩。
在免費的方案之中有一些限制，如 24 小時內得休息 6 小時之類的；
不過在這邊，我需要的只是一個可以執行 Cron Job 的地方，所以不需要升級主機的部分。
目前我的 HEROKU 裡頭包含著三個動作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每天台灣時間 00:00 時，到星座網爬蟲並記錄當日運勢到 Firebase&lt;/li&gt;
&lt;li&gt;每天台灣時間 09:00 時，到 PTT CodeJob 以及 Soft_Job 版搜尋 iOS 相關的文章，並 mail 到我的信箱&lt;/li&gt;
&lt;li&gt;每天台灣時間 12:00 時，爬 PTT 一些熱門看板的文章並發佈到機器人部落格以及機器人推特之中
我分成三個 .py 檔案，下方會說明我的作法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;簡單的建構步驟&#34;&gt;簡單的建構步驟&lt;/h2&gt;
&lt;p&gt;首先，先到 HEROKU 的 dashboard 建立一個新的 App，接著照著它的敘述完成 Git 的建置。
我在資料夾當中，放入了下列的檔案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PTT.py – 12:00 該做的事&lt;/li&gt;
&lt;li&gt;iOS.py – 09:00 該做的事&lt;/li&gt;
&lt;li&gt;Astro.py – 00:00 該做的事&lt;/li&gt;
&lt;li&gt;requirements.txt – 提供給 HEROKU 知道要在這台機器上安裝哪些 Python 的套件&lt;/li&gt;
&lt;li&gt;serviceAccountCredentials.json – 存取 Firebase 所需要的 credential 文件&lt;/li&gt;
&lt;li&gt;Procfile – 用來告知 HEROKU 關於這個 App 的一些參數&lt;/li&gt;
&lt;li&gt;clock.py – 利用 apscheduler 來完成 cron job 的撰寫&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;clockpy&#34;&gt;clock.py&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;apscheduler.schedulers.blocking&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BlockingScheduler&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sched&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BlockingScheduler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@sched&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scheduled_job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;cron&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;scheduled_job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;This job is run every day at UTC+8 8am.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;python astro.py&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@sched&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scheduled_job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;cron&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;scheduled_job2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;This job is run every day at UTC+8 9am.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;python ios.py&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@sched&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scheduled_job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;cron&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;scheduled_job3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;This job is run every day at UTC+8 12pm.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;python ptt.py&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sched&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Procfile&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;clock: python clock.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接著透過下方指令推送到 HEROKU 上頭部署&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;便可以在 Free Dynos 的頁面看到我們剛剛定義的 clock python clock.py，接著把它打開即可。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Commitizen</title>
        <link>https://www.archie.tw/p/commitizen/</link>
        <pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/commitizen/</guid>
        <description>&lt;h1 id=&#34;閒聊一下&#34;&gt;閒聊一下&lt;/h1&gt;
&lt;p&gt;最近處於求職的階段，評估一份職缺的觀點也和過往不同；
以這篇文章來說，Git Commit Style 便是其中一點，詢問對方是否有固定的 commit 格式，
就可以大致上瞭解團隊的風格是哪種。
若還沒有個規範，或是想要參考的，可以繼續閱讀下去。&lt;/p&gt;
&lt;h1 id=&#34;git-commit&#34;&gt;Git Commit&lt;/h1&gt;
&lt;p&gt;是以 AngularJS 的格式，區分成&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 type、scope、subject、body、footer 等，有一定的規範，
詳細的內容可以在 angular.js/DEVELOPERS.md 看到。
這篇文章主要要介紹的是一個可以讓 commit 符合上述規範的工具 – Commitizen。&lt;/p&gt;
&lt;h1 id=&#34;commitizenhttpsgithubcomcommitizencz-cli&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/commitizen/cz-cli&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Commitizen&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Commitizen 是以 Node.js 所開發出的一套工具，使用者可以透過它來處理 commit 的風格一致性。&lt;/p&gt;
&lt;h2 id=&#34;安裝&#34;&gt;安裝&lt;/h2&gt;
&lt;p&gt;我們可以透過 npm 的方式來取得&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;npm install -g commitizen
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;並且安裝 cz-conventional-changelog&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;npm install -g cz-conventional-changelog
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在電腦中安裝完上述兩者之後，先切換到你所開發的 iOS 專案資料夾底下，
由於 Commitizen 是以 Node.js 開發，你需要在 iOS 專案裡頭建構一些 npm 所需要的環境，
故記得補上 npm 初始化以及使用 convertional-changelog&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;npm init
commitizen init cz-conventional-changelog --save --save-exact
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;輸入完專案相關資訊後，便可以使用 Commitizen 了！&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;之後，就以 git cz 的方式來取代原本的 git commit；
若所在的專案並沒有使用 Commitizen 的話，系統則會自動以原先 git commit 的方式來進行。
執行 git cz 之後，會以選單的方式來一步步符合剛剛訂的規範。&lt;/p&gt;
&lt;h2 id=&#34;自動驗證-commit-是否符合-angularjs&#34;&gt;自動驗證 Commit 是否符合 AngularJS&lt;/h2&gt;
&lt;p&gt;在多人開發的時候，我們可以透過 commit 之前先執行一段 JavaScript 來確保 commit 的格式符合要求，來避免專案之中的 commit style 有不一致的情況發生。
首先我們得先安裝一些套件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;npm install semver-regex --save-dev
npm install ghooks --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;並加入驗證的 &lt;a class=&#34;link&#34; href=&#34;https://github.com/iOSTaiwan/resource/blob/master/validate-commit-msg.js&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;validate-commit-msg.js&lt;/a&gt; 檔案以及在 package.json 之中宣告。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;config&amp;quot;: {
    &amp;quot;ghooks&amp;quot;: {
        &amp;quot;commit-msg&amp;quot;:&amp;quot;./validate-commit-msg.js&amp;quot;
    }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;若發生了權限上的問題，如&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/bin/sh: ./validate-commit-msg.js: Permission denied
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;則可以透過 chmod 來調整 validate-commit-msg.js 的存取權限。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chmod 755 validate-commit-msg.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣一來，便大功告成了！
若有人在專案中下了不符合標準的 commit，如&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git commit -m &amp;quot;Test&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;則會無法順利完成動作，且得到錯誤訊息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;INVALID COMMIT MSG: does not match &amp;quot;&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;&amp;quot; !
test
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;changelog&#34;&gt;CHANGELOG&lt;/h2&gt;
&lt;p&gt;CHANGELOG 的部分，在此規範下會以 Bug Fixes、Features、BREAKING CHANGES 這三種 type 來產出，意思是指其他的 type 並不會被寫進 CHANGELOG.md 裡頭。
我們可以執行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conventional-changelog -p angular -i CHANGELOG.md -w
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;來生成 CHANGELOG.md 檔案，也可以在 package.json 的 scripts 之中加入&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
    &amp;quot;scripts&amp;quot;: {
        &amp;quot;changelog&amp;quot;:&amp;quot;conventional-changelog -p angular -i CHANGELOG.md -w&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣，之後只需要執行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;npm run changelog
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;後記&#34;&gt;後記&lt;/h1&gt;
&lt;p&gt;在第一份工作時，便有嘗試引用進入到專案之中，不過那時候沒有完整地使用所有功能；&lt;/p&gt;
&lt;p&gt;如驗證 commit、自動產生 CHANGELOG.md 等，&lt;/p&gt;
&lt;p&gt;最近在整理 &lt;a class=&#34;link&#34; href=&#34;https://github.com/iOSTaiwan/resource&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iOSTaiwan/resource&lt;/a&gt; 時，便認真的走過一次流程。&lt;/p&gt;
&lt;p&gt;相關的檔案，如 .gitignore、validate-commit-msg.js、package.json 都可以在此專案中找到。&lt;/p&gt;
&lt;p&gt;最後感謝 &lt;a class=&#34;link&#34; href=&#34;https://github.com/pofat&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pofat&lt;/a&gt; 當初的分享，可以在 iOSTaiwan/resource 裡頭找到相關資源，&lt;/p&gt;
&lt;p&gt;讓這次的建構流程跑起來算是順利，也祝福他新婚快樂💒&lt;/p&gt;
</description>
        </item>
        <item>
        <title>iOS Taiwan jobs</title>
        <link>https://www.archie.tw/p/ios-taiwan-jobs/</link>
        <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/ios-taiwan-jobs/</guid>
        <description>&lt;h1 id=&#34;ios-taiwan-jobshttpsgithubcomiostaiwanjobs&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/iOSTaiwan/jobs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iOS Taiwan jobs&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id=&#34;緣起&#34;&gt;緣起&lt;/h1&gt;
&lt;p&gt;最近剛把手上的專案都告一個段落，便開始尋找工作上的合作機會。
恰巧看到 &lt;a class=&#34;link&#34; href=&#34;https://github.com/f2etw/jobs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;f2etw/jobs&lt;/a&gt;，透過 GitHub Issues 的方式提供工作資訊，
感覺挺好的，且是個大家都可以共同編輯的地方，於是便有了建立一個 iOS 版本的念頭。&lt;/p&gt;
&lt;h2 id=&#34;和-f2etwjobs-差異性&#34;&gt;和 f2etw/jobs 差異性&lt;/h2&gt;
&lt;h3 id=&#34;issue-title&#34;&gt;issue title&lt;/h3&gt;
&lt;p&gt;iOSTaiwan/jobs 僅提供 iOS 的工作機會，且技術較為單純（Objective-C、Swift），
所以便選擇在 issue title 上僅提供公司名稱而已；
職稱以及使用的語言則使用 label 來作為區分依據，如 Intern、Junior、Senior、Swift 等。&lt;/p&gt;
&lt;h3 id=&#34;issue-template&#34;&gt;issue template&lt;/h3&gt;
&lt;p&gt;我先是參考了 f2etw/jobs 的範本，並加入部分 PTT Soft_Job 版上的徵才格式，如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;員工是否需自備工具? (是/否)&lt;/li&gt;
&lt;li&gt;公司地址(填寫詳細至號)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;後記&#34;&gt;後記&lt;/h1&gt;
&lt;p&gt;並在 README 之中，附上一些求職的網站，如 Yourator、indeed 等；
裡頭也都先下好關鍵字，點擊連結可以直接看搜尋結果。
希望可以透過這個專案讓台灣的 iOS 工程師在求職路上有個幫助！&lt;/p&gt;
&lt;p&gt;之後再陸續整合一些資源到 Archie.tw 以及 iOSTaiwan，仿效 f2etw 的模式，
有興趣的朋友歡迎多加利用👏&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Word deletion shortcut in iTerm</title>
        <link>https://www.archie.tw/p/word-deletion-shortcut-in-iterm/</link>
        <pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/word-deletion-shortcut-in-iterm/</guid>
        <description>&lt;p&gt;在使用 iTerm 的時候，想要一次刪除一個字的話，
可以在 Preferences ➡️ Keys 新增一組 Keyboard Shortcut，
Action 選擇 Send Hex Code，並填上 0x17 即可！&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://i2.wp.com/i.imgur.com/fDUd7x0.png?w=688&amp;amp;ssl=1&#34; &gt;
		&lt;img src=&#34;https://i2.wp.com/i.imgur.com/fDUd7x0.png?w=688&amp;amp;ssl=1&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;iTerm2&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;iTerm2&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ProvisionedDevices</title>
        <link>https://www.archie.tw/p/provisioneddevices/</link>
        <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/provisioneddevices/</guid>
        <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;這篇文章的內容會是記錄如何確認目前的 Provisioning Profile 擁有哪些測試裝置，
以便在使用 adhoc 打包時，確保裝置可以執行。&lt;/p&gt;
&lt;h2 id=&#34;provisioning-profile-path&#34;&gt;Provisioning Profile Path&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;~/Library/MobileDevice/Provisioning Profiles/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 terminal 下執行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;security cms -D -I /path/to/MyProfile.mobileprovision
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;便可以看到相關的資訊，如下圖：
&lt;figure 
	&gt;
	&lt;a href=&#34;https://i1.wp.com/i.imgur.com/W0Gu6a4.png?w=688&amp;amp;ssl=1&#34; &gt;
		&lt;img src=&#34;https://i1.wp.com/i.imgur.com/W0Gu6a4.png?w=688&amp;amp;ssl=1&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;ProvisionedDevices&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;ProvisionedDevices&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python – SMTP</title>
        <link>https://www.archie.tw/p/python-smtp/</link>
        <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/python-smtp/</guid>
        <description>&lt;h1 id=&#34;前情提要&#34;&gt;前情提要&lt;/h1&gt;
&lt;p&gt;痞客邦最近「新增文章」API，不斷地出現未知的伺服器錯誤，而且從回應的時間來猜測的話，
感覺像是他們自己本身內部的錯誤導致 Time out 之類的。
礙於目前還無法在短時間內處理好一台伺服器建構多個 WordPress，
所以只好先將內容發佈到 Blogger 來解決當前的問題。
而我們只需要使用到發文的功能，所以就可以簡單利用電子郵件來發文；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Blogger 設定的「以電子郵件傳送」&lt;/li&gt;
&lt;li&gt;使用電子郵件張貼填入電子信箱，並開啟「立即發佈電子郵件」&lt;/li&gt;
&lt;li&gt;儲存設定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這樣只要寄信給設定的地址的話，Blogger 便會自動發文。&lt;/p&gt;
&lt;h2 id=&#34;smtp&#34;&gt;SMTP&lt;/h2&gt;
&lt;p&gt;首先在 Python 當中，我們可以使用 smtplib 來發送信件，
下列使用 gmail 為例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pyhton&#34; data-lang=&#34;pyhton&#34;&gt;import smtplib
smtpserver = smtplib.SMTP_SSL(&amp;quot;smtp.gmail.com&amp;quot;,465)
smtpserver.ehlo()
smtpserver.login(username, password)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;若你直接執行的話，可能會收到登入失敗的訊息；
由於 Google 在安全性設定上，會阻擋安全性較低的應用程式，
所以若要使用的話，則需要開啟相關設定：
&lt;figure 
	&gt;
	&lt;a href=&#34;https://i0.wp.com/i.imgur.com/Mfh1Iah.png?w=688&amp;amp;ssl=1&#34; &gt;
		&lt;img src=&#34;https://i0.wp.com/i.imgur.com/Mfh1Iah.png?w=688&amp;amp;ssl=1&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;登入與安全性&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;登入與安全性&lt;/figcaption&gt;
	
&lt;/figure&gt;
&lt;figure 
	&gt;
	&lt;a href=&#34;https://i0.wp.com/i.imgur.com/zjV8Id6.png?w=688&amp;amp;ssl=1&#34; &gt;
		&lt;img src=&#34;https://i0.wp.com/i.imgur.com/zjV8Id6.png?w=688&amp;amp;ssl=1&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;啟用&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;啟用&lt;/figcaption&gt;
	
&lt;/figure&gt;
這樣的話，就可以順利地登入 gmail。
再來準備信件的內容並寄出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;email.mime.text&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MIMEText&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;email.header&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Header&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;from_address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Archie.Chang.iOS@gmail.com&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;to_address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Archie.Chang.iOS@gmail.com&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MIMEText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html_body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;from_address&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;To&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subject&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;smtpserver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendmail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;smtpserver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;小雷&#34;&gt;小雷&lt;/h3&gt;
&lt;p&gt;其中，sendmail 的 to_address 為 list 型態；
之前測試的過程中，我將 sendmail 改為&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;smtpserver.sendmail(from_address, to_address[0], message.asString())
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;結果導致它不斷地寄同一封信，Blogger 文章就大爆發了。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Firebase Cloud Functions with Database and Messaging</title>
        <link>https://www.archie.tw/p/firebase-cloud-functions-with-database-and-messaging/</link>
        <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/firebase-cloud-functions-with-database-and-messaging/</guid>
        <description>&lt;h1 id=&#34;cloud-functions&#34;&gt;Cloud Functions&lt;/h1&gt;
&lt;p&gt;Firebase 一直以來便是以 serverless 為主要的方向，
而 Functions 則是一個十分有趣的功能；
它可以自動地隨著事件的回應，如資料庫的異動或是收到 HTTP 的 requests 時，執行程式碼。
其中一個重點是，我們也不需要去管理或是 scale 伺服器。&lt;/p&gt;
&lt;h2 id=&#34;triggers&#34;&gt;Triggers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cloud Firestore Triggers&lt;/li&gt;
&lt;li&gt;Realtime Database Triggers&lt;/li&gt;
&lt;li&gt;Firebase Authentication Triggers&lt;/li&gt;
&lt;li&gt;Google Analytics for Firebase Triggers&lt;/li&gt;
&lt;li&gt;Crashlytics Triggers&lt;/li&gt;
&lt;li&gt;Cloud Storage Triggers&lt;/li&gt;
&lt;li&gt;Cloud Pub/Sub Triggers&lt;/li&gt;
&lt;li&gt;HTTP Triggers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;範例&#34;&gt;範例&lt;/h2&gt;
&lt;h3 id=&#34;需求&#34;&gt;需求&lt;/h3&gt;
&lt;p&gt;Realtime Database 底下的資料有異動的話，進行推播&lt;/p&gt;
&lt;h3 id=&#34;直接上-code&#34;&gt;直接上 Code&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;functions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;firebase-functions&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;admin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;firebase-admin&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;admin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;initializeApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;functions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firebase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;updateTodayNews&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;functions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/today/{newsCategory}/updatedTime&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onWrite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newsCategory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;newsCategory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;admin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`/today/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;newsCategory&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;once&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;snapshot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;snapshot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hasChildren&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;There are no notification tokens to send to.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;snapshot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;snapshot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Notification details.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;notification&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;snapshot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fcmTokens&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hasChildren&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;There are no notification tokens to send to.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tokens&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;snapshot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fcmTokens&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pushTokens&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tokens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;snapshot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fcmTokens&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;admin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;messaging&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sendToDevice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pushTokens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;successfully sent message:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Error sending message:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;簡單解說&#34;&gt;簡單解說&lt;/h3&gt;
&lt;p&gt;exports 後面加上這支 function 的名稱，如我們這邊則為 updateTodayNews，
而 {newsCategory} 則是變數，以範例來說：
只要 /today/ 底下的任何物件 /updatedTime 又被寫入的話，則會觸發 function。
宣告 admin 是為了使用 Firebase 其他的功能，如這邊是使用到 messaging 和 database。&lt;/p&gt;
&lt;p&gt;當 admin.database 得到資料回來後，再使用 admin.messaging().sendToDevice 來進行推播的發送。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Selenium</title>
        <link>https://www.archie.tw/p/selenium/</link>
        <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/selenium/</guid>
        <description>&lt;h1 id=&#34;selenium&#34;&gt;Selenium&lt;/h1&gt;
&lt;p&gt;需要在 Python 上操作瀏覽器的話，我會選擇使用 Selenium；
以爬蟲來說，和 requests 不同的地方在於，
像是在讀取網頁時，使用 Selenium 開啟瀏覽器的話可以幫我們處理掉渲染的問題。
這篇主要會以 Selenium 的方式來取得痞客邦的 Access Token。&lt;/p&gt;
&lt;h1 id=&#34;先搞懂痞客邦的流程&#34;&gt;先搞懂痞客邦的流程&lt;/h1&gt;
&lt;p&gt;首先，我們先到痞客邦的開發者網頁
&lt;figure 
	&gt;
	&lt;a href=&#34;https://i0.wp.com/i.imgur.com/Hk4FFnc.png?w=688&amp;amp;ssl=1&#34; &gt;
		&lt;img src=&#34;https://i0.wp.com/i.imgur.com/Hk4FFnc.png?w=688&amp;amp;ssl=1&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;PIXNET&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;PIXNET&lt;/figcaption&gt;
	
&lt;/figure&gt;
或是可以直接到 API Explorer 的畫面
&lt;figure 
	&gt;
	&lt;a href=&#34;https://i1.wp.com/i.imgur.com/Y8k5ENr.png?w=688&amp;amp;ssl=1&#34; &gt;
		&lt;img src=&#34;https://i1.wp.com/i.imgur.com/Y8k5ENr.png?w=688&amp;amp;ssl=1&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;API Explorer&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;API Explorer&lt;/figcaption&gt;
	
&lt;/figure&gt;
接下來會需要進行登入的動作
&lt;figure 
	&gt;
	&lt;a href=&#34;https://i1.wp.com/i.imgur.com/YRnaUtw.png?w=688&amp;amp;ssl=1&#34; &gt;
		&lt;img src=&#34;https://i1.wp.com/i.imgur.com/YRnaUtw.png?w=688&amp;amp;ssl=1&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Login&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Login&lt;/figcaption&gt;
	
&lt;/figure&gt;
登入成功後，便是授權給 API Explorer 權限來取得 Access token
&lt;figure 
	&gt;
	&lt;a href=&#34;https://i2.wp.com/i.imgur.com/Pd9GWhy.png?w=688&amp;amp;ssl=1&#34; &gt;
		&lt;img src=&#34;https://i2.wp.com/i.imgur.com/Pd9GWhy.png?w=688&amp;amp;ssl=1&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Granted&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Granted&lt;/figcaption&gt;
	
&lt;/figure&gt;
最後可以在 API Explorer 的畫面上看到 Access Token。
&lt;figure 
	&gt;
	&lt;a href=&#34;https://i2.wp.com/i.imgur.com/5YxtmHX.png?w=688&amp;amp;ssl=1&#34; &gt;
		&lt;img src=&#34;https://i2.wp.com/i.imgur.com/5YxtmHX.png?w=688&amp;amp;ssl=1&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;AccessToken&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;AccessToken&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;程式方面&#34;&gt;程式方面&lt;/h2&gt;
&lt;p&gt;我們會使用到 Selenium 的這些元件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;selenium&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;webdriver&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;By&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;selenium.common.exceptions&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NoSuchElementException&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;selenium.common.exceptions&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TimeoutException&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WebDriverWait&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;selenium.webdriver.support&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;expected_conditions&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EC&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://devtool.pixnet.pro/#/&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 使用 Firefox 來開啟網頁&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;webdriver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Firefox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 打開 API Explorer 的畫面&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 進行登入&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://panel.pixnet.cc/login/openid?done=https%3A&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%2F%2F&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;devtool.pixnet.pro&amp;amp;openid=https%3A&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%2F%2F&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;member.pixnet.cc&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%2F&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;login&amp;amp;easy_login=1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 選擇臉書登入&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://panel.pixnet.cc/login/facebooklogin?done=https%3A&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%2F%2F&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;devtool.pixnet.pro&amp;amp;easy_login=1&amp;amp;register_url=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%2F%2F&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;member.pixnet.cc&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%2F&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;register&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 在 Email 和 Password 欄位填上值，並按下登入按鈕&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_element_by_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;email_container&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_element_by_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;login_button&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_element_by_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;loginbutton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Your Facebook email&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Your Facebook password&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;login_button&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 跳轉至授權畫面並按下同意&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://emma.pixnet.cc/oauth2/authorize?redirect_uri=https://devtool.pixnet.pro/index/cb&amp;amp;client_id=&amp;#39;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Your&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;amp;response_type=code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_element_by_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;send-Allow&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 使用 WebDriverWait 來等候標題出現 EMMA API Explorer（這邊我只寫 EMMA）&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;WebDriverWait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;until&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title_contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;EMMA&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TimeoutException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;time out&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 接著 Parse 出 Access token 並且 return。&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;soup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;page_source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;soup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;form-control-static ng-binding&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;可能遇到的問題&#34;&gt;可能遇到的問題&lt;/h2&gt;
&lt;h3 id=&#34;geckodriver&#34;&gt;geckodriver&lt;/h3&gt;
&lt;p&gt;由於我是使用 Ubuntu + Firefox 來執行，而在 Firefox 後續的版本中，
並沒有內建 geckodriver，需要手動安裝到電腦之中。&lt;/p&gt;
&lt;h3 id=&#34;crontabcrontab&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;../crontab&#34; &gt;Crontab&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;若你是使用 Crontab 來跑的話，由於 Crontab 本身並不會有 output 的輸出，
意思是指跑 Crontab 時，也不會自己跳出 Firefox 的畫面；
會導致 Selenium 發生錯誤。
解決的方式是使用 pyvirtualdisplay 來弄一個虛擬的畫面，
給 Firefox 作為使用。
上面的程式碼則補上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pyvirtualdisplay&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Display&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 先準備好虛擬的畫面&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;visible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;800&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 最後記得關掉畫面&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;大致上是這樣，就可以利用 Selenium 的方式取得痞客邦的 Access Token！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Twitter Follow all users script</title>
        <link>https://www.archie.tw/p/twitter-follow-all-users-script/</link>
        <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/twitter-follow-all-users-script/</guid>
        <description>&lt;h1 id=&#34;追隨所有-twitter-用戶&#34;&gt;追隨所有 Twitter 用戶&lt;/h1&gt;
&lt;p&gt;之前在弄一個自動發文的機器人，便想要在 Twitter 上同步發送；
而苦無沒有人追隨的情況下，決定先來追隨別人，
看看對方是否會反追隨回來（？
以結果來看，有一些些功用，互相追隨的機率大概 5 % 左右。
&lt;figure 
	&gt;
	&lt;a href=&#34;https://i0.wp.com/i.imgur.com/7iayFel.png?w=688&amp;amp;ssl=1&#34; &gt;
		&lt;img src=&#34;https://i0.wp.com/i.imgur.com/7iayFel.png?w=688&amp;amp;ssl=1&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;PTT 爆報機器人&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;PTT 爆報機器人&lt;/figcaption&gt;
	
&lt;/figure&gt;
儘管多數可能也是機器人加機器人好友，不過至少稍稍提升了痞客邦的流量。&lt;/p&gt;
&lt;h2 id=&#34;javascript&#34;&gt;Javascript&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FOLLOW_PAUSE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1250&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FOLLOW_RAND&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PAGE_WAIT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;__&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cnt__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;eles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;__&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lcnt__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;eles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.Grid-cell .not-following .follow-text&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ele&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nx&#34;&gt;ele&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ele&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ele&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;css&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;block&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Already following: &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                    &lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                              &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Following &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34; of &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;eles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                            &lt;span class=&#34;nx&#34;&gt;ele&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
                            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;eles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Scrolling...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                                &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scrollTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scrollHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                                &lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                    &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PAGE_WAIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;__&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lcnt__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FOLLOW_PAUSE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FOLLOW_RAND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FOLLOW_RAND&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                    &lt;span class=&#34;mi&#34;&gt;__&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cnt__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;小提點&#34;&gt;小提點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Twitter 單一用戶追隨的上限為 5000 名（不過不知道為什麼，我的機器人追了 5001 位）&lt;/li&gt;
&lt;li&gt;一天（24 小時內）追隨的上限為 1000 名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不過有趣的是，我有因為用 Twitter 的 iOS App 一直點追隨被 ban 過一次帳號，
但用 Script 跑卻沒事。
另外 Twitter 的電話認證解鎖竟然是語音，而且是不太清楚的英文；
反覆弄了兩天才解鎖成功，語音內容約是
Twitter@ 6 個數字
「@」又常常和第一個數字含糊在一塊！加上有時間內的驗證次數上限！
總之，現在沒事就好！超！麻！煩！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Crontab</title>
        <link>https://www.archie.tw/p/crontab/</link>
        <pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/crontab/</guid>
        <description>&lt;h1 id=&#34;crontab&#34;&gt;Crontab&lt;/h1&gt;
&lt;p&gt;Crontab 在 Ubuntu 裏頭是預載的，其功能是可以根據時間參數來執行工作排程；
它的格式如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* * * * * command to be executed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;依序分別是 分鐘[0-59]、小時[0-23]、日期[1-31]、月份[1-12]、星期[0-6]、command
其中 星期 0 = 天的意思。&lt;/p&gt;
&lt;h2 id=&#34;符號&#34;&gt;符號&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「*」：不設限&lt;/li&gt;
&lt;li&gt;「,」：分隔時段。例如：30 10,20 * * * command，代表早上十點半和下午八點半執行。&lt;/li&gt;
&lt;li&gt;「-」：一段時間範圍。例如：15 9-12 * * * command，代表從九點到十二點的每個 15 分都執行一次。&lt;/li&gt;
&lt;li&gt;「/n」：表示每個 n 單位間隔。例如：*/5 * * * * command，代表每隔 5 分鐘執行一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* * * * *：每隔一分鐘執行一次。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你也可以使用 @ 來取代五個參數：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@reboot：僅在開機的時候執行一次。&lt;/li&gt;
&lt;li&gt;@yearly：一年執行一次，和0 0 1 1 * command效果一樣。&lt;/li&gt;
&lt;li&gt;@annually：（和@yearly一樣）&lt;/li&gt;
&lt;li&gt;@monthly：一個月執行一次，和0 0 1 * * command效果一樣。&lt;/li&gt;
&lt;li&gt;@weekly：一個星期執行一次，和0 0 * * 0 command效果一樣。&lt;/li&gt;
&lt;li&gt;@daily：每天執行，和0 0 * * * command效果一樣。&lt;/li&gt;
&lt;li&gt;@midnight：（和@daily一樣）&lt;/li&gt;
&lt;li&gt;@hourly ：每小時執行，和0 * * * * command效果一樣。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;輸出&#34;&gt;輸出&lt;/h2&gt;
&lt;p&gt;另外，需要設立 command 輸出的地點或方式；
如使用 Postfix 或是直接在 command 後方加上 &amp;raquo; /file_path，&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get install postfix
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;設定完後，可以在下列位置查看 output&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo tail -f /var/mail/&amp;lt;user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而如果需要清空 mail 內容的話，
則利用&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; /var/mail/&amp;lt;user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;除錯&#34;&gt;除錯&lt;/h2&gt;
&lt;p&gt;Ubuntu 的話，cron log 會和 syslog 寫在一塊，使用下列的 function 來區隔：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;grep CRON /var/log/syslog
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;編輯&#34;&gt;編輯&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;crontab -l
crontab -e
crontab -r
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;-l：列出所有的 cron
-e：編輯
-r：移除
並可以使用&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/etc/init.d/cron restart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;來重新啟用 crontab&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Facebook 隱私權條款問題</title>
        <link>https://www.archie.tw/p/facebook-%E9%9A%B1%E7%A7%81%E6%AC%8A%E6%A2%9D%E6%AC%BE%E5%95%8F%E9%A1%8C/</link>
        <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/facebook-%E9%9A%B1%E7%A7%81%E6%AC%8A%E6%A2%9D%E6%AC%BE%E5%95%8F%E9%A1%8C/</guid>
        <description>&lt;p&gt;由於之前上架的 App 有使用到 Facebook 的登入功能，
於是這幾天一直收到這類的信件：
Demo
但是由於本身對這方面可以說是完全沒有涉略，
所以便找找有沒有什麼辦法解決。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://privacypolicies.com/privacy/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Free Privacy Policy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;於是找到了這個，回答五種題型便可以得到它們產生的條款，
再找個地方貼上補連結到 Facebook 即可！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>CocoaPods</title>
        <link>https://www.archie.tw/p/cocoapods/</link>
        <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/cocoapods/</guid>
        <description>&lt;p&gt;上一篇介紹 &lt;a class=&#34;link&#34; href=&#34;../carthage&#34; &gt;Carthage&lt;/a&gt;，這篇寫一下 CocoaPods。
其實我個人是先使用 CocoaPods，後來才部分改用 Carthage 作為主要的管理方式；
而 CocoaPods 的安裝方式也很簡單，可以透過 gem 來安裝：&lt;/p&gt;
&lt;h3 id=&#34;安裝&#34;&gt;安裝&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不同於 Carthage 的 Cartfile，CocoaPods 的是使用 Podfile，
格式有些不同，不過都可以在資料夾下使用 Terminal 輸入初始化的指令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pod init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;系統就會自行建立一個 Podfile，並用 pod search 的指令來找找你要什麼東西。
弄完 Podfile 之後，就可以執行安裝進專案：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pod install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;並打開它幫你建立的 .xcworkspace 就好了。&lt;/p&gt;
&lt;h3 id=&#34;一些分享&#34;&gt;一些分享&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可安裝的版本和 GitHub 上寫的不同？
CocoaPods 會建立一個 local 的所有 repo 資訊，若找不到的時候，可以先試著更新它：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pod repo update
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Carthage 和 CocoaPods 是可以混用的&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Carthage</title>
        <link>https://www.archie.tw/p/carthage/</link>
        <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/carthage/</guid>
        <description>&lt;p&gt;Carthage 是一個套件管理的開源軟體，可以使用 Homebrew 安裝：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install carthage
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;和 CocoaPods 的差異在於它並不會將第三方的 Framework 直接加入專案，
而是獨立在外，並在 build 的時候直接將 framework 複製進去到 App 內；
CocoaPods 的話則會在每次 build 的時候同時 build 你所匯入的 framework，
而隨著專案使用到的套件內容越多，則會花越多時間。&lt;/p&gt;
&lt;h3 id=&#34;去中心化&#34;&gt;去中心化&lt;/h3&gt;
&lt;p&gt;這個詞最近隨著區塊鏈的爆紅，也常常可以看見。
不過在這邊的情境是，CocoaPods 是由它那邊搜集很多個 repo，提供給我們來安裝；
所以若 CocoaPods 的 repo 資料沒更新，或是作者只放在 GitHub 上，沒有提交到 CocoaPods 的話，
則無法使用。
而 Carthage 則沒有這方面的問題，可以自行將 GitHub 上的專案加入到 Cartfile&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;github &amp;quot;ReactiveX/RxSwift&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不過這也是比較麻煩的地方，我們就沒有辦法像 CocoaPods 一樣直接在 Terminal 下 pods search RxSwift 來取得資訊。&lt;/p&gt;
&lt;h3 id=&#34;個人的使用方式&#34;&gt;個人的使用方式&lt;/h3&gt;
&lt;p&gt;由於我自行在開發，同時會有很多個專案用到相同的 framework（e.g RxSwift、Siren），
原本若是使用 CocoaPods 的話，則會在很多資料夾內都有一樣的東西；
而 Carthage 的話，則是將 FRAMEWORK_SEARCH_PATHS 都指定到同一個資料夾即可，
並在 Build phase 加上 Carthage 的 Run script。
而我大多數只會開發 iOS 的 App，Carthage update 的時候則可以只更新 iOS 的部分：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;carthage update --platform iOS=
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>FireabseDatabase - Read</title>
        <link>https://www.archie.tw/p/fireabsedatabase-read/</link>
        <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/fireabsedatabase-read/</guid>
        <description>&lt;p&gt;之前有寫過 &lt;a class=&#34;link&#34; href=&#34;../firebase-database-rest-api&#34; &gt;FirebaseDatabase REST API&lt;/a&gt;的文章，
而這篇則會是在 iOS 上的使用。&lt;/p&gt;
&lt;h1 id=&#34;安裝套件&#34;&gt;安裝套件&lt;/h1&gt;
&lt;p&gt;由於 Google 認為 Carthage 的方式不符合他們的使用模式，
畢竟 Firebase 的 framework 並非是開源的，
所以只有提供 CocoaPods 的安裝方式或是直接下載檔案；
而我這邊就以 CocoaPods 來安裝 Firebase 相關的套件，其他則用 Carthage 來管理。&lt;/p&gt;
&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;
&lt;p&gt;我們在 Firebase console 那先建立好專案並匯入 GoogleService-Info.plist，
如果你有多個 Target 要使用的話，建議放在不同的資料夾，並且設定好 Target Membership。
並且要注意 Firebase console 內的 Database rules，
若沒有做 auth 相關內容的話，記得要調整；
如我開放給 App 讀取但不可寫入的話：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  &amp;quot;rules&amp;quot;: {
    &amp;quot;.write&amp;quot;: &amp;quot;auth != null&amp;quot;,
    &amp;quot;.read&amp;quot;: true
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接著在 AppDelegate.swift 中加入&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&amp;gt; Bool {
    FirebaseApp.configure()
    // --**--
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;順道提醒一下，若要讓 Database 的資料在離線也能使用上一次的 cache 的話，
需要在 AppDelegate.swift 裡頭加入&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&amp;gt; Bool {
    // --**--
    Database.database().isPersistenceEnabled = true
    // --**--
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;官方文件中沒有特別註記，但若在其他地方執行這段程式，則會直接報錯。&lt;/p&gt;
&lt;h2 id=&#34;讀取資料&#34;&gt;讀取資料&lt;/h2&gt;
&lt;p&gt;Firebase Database 所提供的是一個可監聽的資料庫，
來做到 Realtime Database 的效果；
Reference 便是 path 的概念，
假設我的資料長這樣：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
    &amp;quot;test&amp;quot;: {
        &amp;quot;user&amp;quot;: {
            &amp;quot;name&amp;quot;: &amp;quot;Archie&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;則 ref 有幾種設法；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;觀察全部的資料： Database.database().reference.observe&lt;/li&gt;
&lt;li&gt;只看 test 下的異動： Database.database().reference.child(“test”).observe&lt;/li&gt;
&lt;li&gt;只看 user：Database.database().reference.child(“test”).child(“user”).observe&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;隨著資料的結構，我們可以讓每個地方只專注它需要監聽的部分就好。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>MKGeodesicPolyline</title>
        <link>https://www.archie.tw/p/mkgeodesicpolyline/</link>
        <pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/mkgeodesicpolyline/</guid>
        <description>&lt;p&gt;先來看看 MKGeodesicPolyline 在 Apple Developer Documentation 上的介紹：
A line-based shape that follows the contours of the Earth to create the shortest path between the specified points.&lt;/p&gt;
&lt;h1 id=&#34;繪製-polyline&#34;&gt;繪製 Polyline&lt;/h1&gt;
&lt;p&gt;首先我們在建置 MKGeodesicPolyline 的時候，
給予它一個 [CLLocationCoordinate2D]，並宣告要繪製幾個點；
接著讓 MKMapView 新增進去。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;geodesicPolyline&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MKGeodesicPolyline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;coordinates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mapView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;geodesicPolyline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再來我們需要透過 MKMapViewDelegate 的 function 來定義 MKGeodesicPolyline 的 UI：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mapView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mapView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MKMapView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rendererFor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;overlay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MKOverlay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MKOverlayRenderer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;polyline&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;overlay&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MKPolyline&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MKOverlayRenderer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;overlay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;overlay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;renderer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MKPolylineRenderer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;polyline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;polyline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;renderer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lineWidth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;renderer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strokeColor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;red&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;renderer&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;取得-polyline-中間的經緯度&#34;&gt;取得 Polyline 中間的經緯度&lt;/h2&gt;
&lt;p&gt;MKGeodesicPolyline 的繪製是由很多個點所連起來的，
可以利用 points() -&amp;gt; UnsafeMutablePointer 來取得。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MKMultiPoint&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MKShape&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;UnsafeMutablePointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MKMapPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pointCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Unproject and copy points into the provided array of coordinates that&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// must be large enough to hold range.length coordinates.&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getCoordinates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;UnsafeMutablePointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CLLocationCoordinate2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我們可以透過 pointCount 來得知有幾個點，
接著決定要使用哪個點的位置；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;MKCoordinateForMapPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;polyline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Siren – 通知使用者更新</title>
        <link>https://www.archie.tw/p/siren-%E9%80%9A%E7%9F%A5%E4%BD%BF%E7%94%A8%E8%80%85%E6%9B%B4%E6%96%B0/</link>
        <pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/siren-%E9%80%9A%E7%9F%A5%E4%BD%BF%E7%94%A8%E8%80%85%E6%9B%B4%E6%96%B0/</guid>
        <description>&lt;p&gt;我們時常可以在 App 之中看到，「目前有新版本可以提供下載」等相關的訊息；
而實作通知使用者更新的方法很多，這篇則是介紹一個開源的 Framework：&lt;/p&gt;
&lt;h1 id=&#34;siren&#34;&gt;Siren&lt;/h1&gt;
&lt;p&gt;Siren 的運作邏輯是，你可以透過版號來決定跳出什麼通知來提醒使用者，
並且提供多語系的訊息內容。
它會透過 Bundle Identifier 去 App Store 上尋找資訊，
再來比對版號執行後續動作。&lt;/p&gt;
&lt;h2 id=&#34;版號的定義&#34;&gt;版號的定義&lt;/h2&gt;
&lt;h3 id=&#34;101235678&#34;&gt;1.0.123.5678&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1：major&lt;/li&gt;
&lt;li&gt;0：minor&lt;/li&gt;
&lt;li&gt;123：patch&lt;/li&gt;
&lt;li&gt;5678：revision&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般我個人的習慣是：
major 會是在商業模式改變或是重大功能發布時，才會動到的；
而 minor 則是有必要的更新，像是嚴重的 bug 或是無法向下相容的異動。
patch 是更新一些 issue 或是修正 bug；
revision 則讓它跟著 commit 的數量。&lt;/p&gt;
&lt;h3 id=&#34;siren-的設定&#34;&gt;Siren 的設定&lt;/h3&gt;
&lt;p&gt;舉個例子，在 major、minor 有提升時；
像是從 1.0.0 -&amp;gt; 2.0.0 或是 1.0.0 -&amp;gt; 1.1.0，
我會希望舊的使用者一定要更新 App 才能使用，
則會設為強制更新（.force）。
而 patch 則讓使用則決定要不要更新，或是可以跳過此次更新。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;Siren&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;majorUpdateAlertType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;force&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Siren&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minorUpdateAlertType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;force&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Siren&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;patchUpdateAlertType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;skip&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Siren&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;revisionUpdateAlertType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;還沒上架前的測試&#34;&gt;還沒上架前的測試&lt;/h3&gt;
&lt;p&gt;Siren 建議可以先將 Bundle Identifier 更改為 iTunes Connect Mobile 的 Bundle Identifier：com.apple.itunesconnect.mobile，
並把 Siren 的 debugEnabled 調整為 true。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>UIActivityViewController</title>
        <link>https://www.archie.tw/p/uiactivityviewcontroller/</link>
        <pubDate>Wed, 15 Nov 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/uiactivityviewcontroller/</guid>
        <description>&lt;h3 id=&#34;這些話寫在前面&#34;&gt;這些話寫在前面⋯⋯&lt;/h3&gt;
&lt;p&gt;最近在開發的產品需要加入「分享」的功能，
希望將一些資訊及圖片分享到其他 App 或平台上；
這篇文章會先點出需求，再逐一闡述開發的過程。&lt;/p&gt;
&lt;h1 id=&#34;需求&#34;&gt;需求&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Facebook 分享 hash tag 及圖片&lt;/li&gt;
&lt;li&gt;其餘分享文字及圖片和網址&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;實作&#34;&gt;實作&lt;/h1&gt;
&lt;p&gt;我們利用 UIActivityViewController 來呈現分享的選單，並將分享的內容塞入 activityItems: [Any] 之中；
而 applicationActivities 則設為 nil，並沒有要客製 activity。
若沒有需要依照不同類別做出不同的判斷，我們可以將內容放置進去；
像是 URL、String、UIImage等等。
而幾個特點要注意一下：&lt;/p&gt;
&lt;h2 id=&#34;facebook&#34;&gt;Facebook：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;String 只支援一個 hash tag（像是：“#Archie”），若超過或其他一般文字則不會顯示&lt;/li&gt;
&lt;li&gt;有網址的話，就會顯示連結；意思是圖片和連結無法同時出現，會優先顯示連結&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;imessage&#34;&gt;iMessage&lt;/h2&gt;
&lt;p&gt;若 String 裡頭的時間格式為 dd/MM/yyyy HH:mm 則可以點擊，並加入行事曆
圖片會以另一則訊息傳送
網址會以縮圖顯示（就如一般訊息收到的邏輯）&lt;/p&gt;
&lt;h3 id=&#34;依照類別提供不同內容&#34;&gt;依照類別提供不同內容&lt;/h3&gt;
&lt;p&gt;首先，我們可以先看 UIActivityType：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UIActivityType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;postToFacebook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;postToTwitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;postToWeibo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// SinaWeibo&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;copyToPasteboard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;assignToContact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;saveToCameraRoll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;7.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;addToReadingList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;7.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;postToFlickr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;7.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;postToVimeo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;7.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;postToTencentWeibo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;7.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;airDrop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;9.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;openInIBooks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iOS&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;11.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;markupAsPDF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而我們可以自行創建一個類別來實作 UIActivityItemSource，
不過因為它是屬於 NSObjectProtocol，所以得一併繼承 NSObject。
例如，我現在要寫一個給 Facebook 以及其他類分別不同 String 的 ItemSource：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ActivityStringItemSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityItemSource&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;activityViewControllerPlaceholderItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;activityViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;activityViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;activityViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;itemForActivityType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;activityType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;activityType&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;postToFacebook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;postToTwitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;#Archie&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Archie 的 UIActivityViewController 實作心得 #Swift&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;並在創建 UIActivityViewController 的時候，宣告進去：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;activityViewController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIActivityViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activityItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ActivityStringItemSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;applicationActivities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣便會依照不同的 UIActivityType 來給予特定的 String 內容；
而當然你也可以建立一個有關 URL 和 UIImage 相關的 UIActivityItemSource，
在分享出去的時候，便可以決定讓 Facebook 僅分享圖片，而在其他地方則帶有連結。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>3D Touch</title>
        <link>https://www.archie.tw/p/3d-touch/</link>
        <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/3d-touch/</guid>
        <description>&lt;h3 id=&#34;這些寫在前面&#34;&gt;這些寫在前面⋯⋯&lt;/h3&gt;
&lt;p&gt;最近剛從 iPhone 6 Plus 晉升到 iPhone X，其中一項硬體差異便是「3D Touch」；
而這也讓我花了一些時間，來加入 3D Touch 的相關功能開發。
這篇文章前半部會寫 3D Touch 在主畫面上的一些差異，
後半部才會補上 Swift 的相關寫法。&lt;/p&gt;
&lt;h3 id=&#34;ios-版本111115b150&#34;&gt;iOS 版本：11.1.1（15B150）&lt;/h3&gt;
&lt;p&gt;首先，先將 App 分成有 Today extension 以及沒有 Today extension 的這兩種：&lt;/p&gt;
&lt;p&gt;郵件 – 有 Today extension&lt;/p&gt;
&lt;p&gt;鬧鐘 – 沒有 Today extension&lt;/p&gt;
&lt;p&gt;從這兩張圖的比較下，我們可以得知在 iOS 11.1.1 之中，
若有 Today extension 的 App，在 3D Touch 的快捷鍵之中，
會顯示 Today extension，而反之則僅會露出原本的 App icon。
另一點是，快捷鍵的順序是依 index 越小則越靠近 App icon；
所以使用者將 App 放置在畫面上半部或下半部會影響由上到下的順序。&lt;/p&gt;
&lt;p&gt;鬧鐘 – 放置畫面下半部&lt;/p&gt;
&lt;p&gt;所以便不必太在意快捷鍵的排序問題，包含 Today extension 順序也是。&lt;/p&gt;
&lt;h3 id=&#34;接著來看看程式碼&#34;&gt;接著來看看程式碼⋯⋯&lt;/h3&gt;
&lt;p&gt;畫面上的快捷鍵，在 iOS 裡頭是 UIKit 裡頭的 UIApplicationShortcutItem，
它提供了一種建構的方式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;localizedTitle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;localizedSubtitle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;icon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIApplicationShortcutIcon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;userInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AnyHashable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 icon 的部分要使用 UIApplicationShortcutIcon 來建構，
而它有內建的 UIApplicationShortcutIconType 可以使用；
或者從你自行提供的 templateImageName 去抓取也行，
不過一個重點是它會使用 template 模式呈現，所以你無法在圖片中自行決定色彩。
再來再設定 UIApplication.shared.shortcutItems 即可完成新增 3D Touch 快捷鍵的畫面。
一個小小重點是，只要處理有關 UI 方面的設置，都需要在 Main thread 下完成。&lt;/p&gt;
&lt;h3 id=&#34;畫面上有了快捷鍵之後&#34;&gt;畫面上有了快捷鍵之後⋯⋯&lt;/h3&gt;
&lt;p&gt;我們需要在 AppDelegate 裡頭攥寫點擊後的動作，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;performActionFor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shortcutItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIApplicationShortcutItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;completionHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;escaping&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;透過剛剛建構時，所定義的不同 shortcutItem.type 來決定要做些什麼事情，
這部分就有點像使用者點推播進來後要怎麼做後續一樣，
整體大致上就是這樣！&lt;/p&gt;
&lt;h3 id=&#34;未完待續&#34;&gt;未完待續⋯⋯&lt;/h3&gt;
&lt;p&gt;還沒研究在 App 裡頭的 3D Touch 內容，待之後開發有需求會再補在這篇！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>失業給付 &#43; 提早就業獎金</title>
        <link>https://www.archie.tw/p/%E5%A4%B1%E6%A5%AD%E7%B5%A6%E4%BB%98-%E6%8F%90%E6%97%A9%E5%B0%B1%E6%A5%AD%E7%8D%8E%E9%87%91/</link>
        <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E5%A4%B1%E6%A5%AD%E7%B5%A6%E4%BB%98-%E6%8F%90%E6%97%A9%E5%B0%B1%E6%A5%AD%E7%8D%8E%E9%87%91/</guid>
        <description>&lt;h3 id=&#34;這些話寫在前面&#34;&gt;這些話寫在前面⋯⋯&lt;/h3&gt;
&lt;p&gt;由於和上一間公司的工作方式處不來，而對方決定以資遣的方式來處理，
故便在六月中解鎖了「領取資遣證明」的成就。&lt;/p&gt;
&lt;h1 id=&#34;知道對方要資遣你時先確認幾件事&#34;&gt;知道對方要資遣你時，先確認幾件事&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;近三年內勞保是否有投保滿一年&lt;/li&gt;
&lt;li&gt;對方是否通報勞保局&lt;/li&gt;
&lt;li&gt;對方是否會開立資遣證明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至於對方是用什麼條款開立，個人是認為沒什麼差異。&lt;/p&gt;
&lt;h2 id=&#34;若上述的答案皆為是的話你可以&#34;&gt;若上述的答案皆為「是」的話，你可以⋯⋯&lt;/h2&gt;
&lt;p&gt;申請「失業給付」，而這篇文章會以我申請的流程為主，並以流水帳的方式呈現。&lt;/p&gt;
&lt;h3 id=&#34;20170614三&#34;&gt;2017/06/14（三）&lt;/h3&gt;
&lt;p&gt;對方中午開立資遣證明，並在上方註明最後工作日為 2017/06/16（五），
也就是會支薪到週五的意思；
而上方會寫上這個月將依比例給付多少薪資以及資遣費計算結果。&lt;/p&gt;
&lt;p&gt;當天，便電話聯繫板橋就業服務站，詢問相關資訊和預約失業給付申請；
而對方有提供給我幾項重點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;失業給付申請得在最後工作日的隔一天後，以我的案例是 2017/06/17（六）以後申請&lt;/li&gt;
&lt;li&gt;可以透過電話進行預約申請，並建議於預約時間前十分鐘先去填寫書面資料&lt;/li&gt;
&lt;li&gt;記得帶預計讓失業給付入帳的銀行簿子影本，或帶正本去影印&lt;/li&gt;
&lt;li&gt;攜帶證件及資遣證明正本&lt;/li&gt;
&lt;li&gt;新北市的就業服務站失業認定無需當日現場報到，而台北市則需要&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;20170619一&#34;&gt;2017/06/19（一）&lt;/h3&gt;
&lt;p&gt;上午便到板橋就業服務站填寫書面資料，並和服務人員進行後續動作；
期間對方和我閒聊一些工作上的事，以及職業選擇之類的，
並提供一些就業的資訊和講座。
流程上會需要在 14 天內，進行兩次以上的「找工作」；
對方會要求要上「台灣就業通」（或是其他政府機關提供的找工作平台），
去申請面試，並於兩週後和服務人員回報狀況。
回報的內容是一張表，需要填寫完之後送回就業服務站，也就是「第一次失業認定」；
板橋就業服務站可以透過郵寄的方式，將表格回寄，並打電話給當時接洽的人員即可，
而台北市則需要再跑一趟親送。&lt;/p&gt;
&lt;h3 id=&#34;20170703一&#34;&gt;2017/07/03（一）&lt;/h3&gt;
&lt;p&gt;打電話向服務人員確認狀況，並告知 14 天內沒有工作（以勞保投保記錄為主），
請對方將第一次認定的申請書送到勞保局，而後續他們會繼續處理。&lt;/p&gt;
&lt;h3 id=&#34;20170704二&#34;&gt;2017/07/04（二）&lt;/h3&gt;
&lt;p&gt;持讀卡機到勞保局網頁，以自然人憑證查詢相關進度和資訊；
這邊建議下載「勞保局行動服務」，並進行「個人查詢」的裝置認證，
認證完後，之後都可以透過此 App 查詢，無需再用讀卡機進行登入。&lt;/p&gt;
&lt;h3 id=&#34;20170712三&#34;&gt;2017/07/12（三）&lt;/h3&gt;
&lt;p&gt;核付通過，並會在 3 至 5 個工作天匯款至當初提供的銀行戶頭之內。&lt;/p&gt;
&lt;h3 id=&#34;20170717一&#34;&gt;2017/07/17（一）&lt;/h3&gt;
&lt;p&gt;收到第一個月的失業給付，而若還未找到工作，則每個月需要再進行認定；
不過我已經有在工作，故沒有進行後續的失業給付申請認定。&lt;/p&gt;
&lt;h3 id=&#34;找到工作後接下來呢&#34;&gt;找到工作後，接下來呢⋯⋯&lt;/h3&gt;
&lt;p&gt;當時在申請失業給付時，服務人員會告知「提早就業獎金」的申請規則和獎金計算方式：
為尚未領取失業給付金額（以我來說，便是 5 個月的失業給付金額） x 50% 一次性發放。&lt;/p&gt;
&lt;h3 id=&#34;20171005四&#34;&gt;2017/10/05（四）&lt;/h3&gt;
&lt;p&gt;使用讀卡機到勞保局網頁線上申請「提早就業獎金」，兩分鐘內點選完後送出。&lt;/p&gt;
&lt;h3 id=&#34;20171101三&#34;&gt;2017/11/01（三）&lt;/h3&gt;
&lt;p&gt;核付通過，並會在 3 至 5 個工作天匯款至「提早就業獎金」所申請的銀行戶頭之內。&lt;/p&gt;
&lt;h3 id=&#34;20171106一&#34;&gt;2017/11/06（一）&lt;/h3&gt;
&lt;p&gt;提早就業獎金入帳，並附上「勞保局行動服務」的就保給付截圖：&lt;/p&gt;
&lt;h3 id=&#34;這些寫在最後&#34;&gt;這些寫在最後⋯⋯&lt;/h3&gt;
&lt;p&gt;得知要被資遣的當下其實多少都會覺得失落，但這其實也只是離職的其中一種方式；
雙方都知道彼此不是對方想要的，不論是你不想做這份工作或是他和你處不來，
只是開口的不是勞方，而是資方主動提起罷了。
記得要對方開立相關證明文件，去申請給付並好好找下一份工作，
而被資遣也沒什麼覺得好丟臉的，合則來，不合則散而已。&lt;/p&gt;
&lt;p&gt;提供給需要的朋友們！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;成就解鎖：「第一次被資遣就上手」&lt;/p&gt;
&lt;p&gt;也謝謝提供相關資訊的阿寬&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>重灌 macOS 的工程（下）- Terminal 篇</title>
        <link>https://www.archie.tw/p/%E9%87%8D%E7%81%8C-macos-%E7%9A%84%E5%B7%A5%E7%A8%8B%E4%B8%8B-terminal-%E7%AF%87/</link>
        <pubDate>Sun, 08 Oct 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E9%87%8D%E7%81%8C-macos-%E7%9A%84%E5%B7%A5%E7%A8%8B%E4%B8%8B-terminal-%E7%AF%87/</guid>
        <description>&lt;h1 id=&#34;前情提要&#34;&gt;前情提要&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;../%e9%87%8d%e7%81%8c-macos-%e7%9a%84%e5%b7%a5%e7%a8%8b%e4%b8%8a&#34; &gt;重灌 macOS 的工程（上）&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;開始進入本篇&#34;&gt;開始進入本篇&lt;/h1&gt;
&lt;h3 id=&#34;iterm2&#34;&gt;iTerm2&lt;/h3&gt;
&lt;p&gt;首先要先處理的，是 Terminal 的部分；
除了 macOS 所內建的 Terminal 之外，我目前嘗試使用 iTerm2，
主要是看上有較多個人化設定的部分。
而我所使用的主題風格是 Dracula，相關的安裝方式裡頭有蠻清楚的介紹。&lt;/p&gt;
&lt;h3 id=&#34;homebrew&#34;&gt;Homebrew&lt;/h3&gt;
&lt;p&gt;這套相信大家都不會太陌生，而不清楚的人就在這邊簡單解釋一下，
Homebrew 主要是負責 Mac 上的一些套件管理；
就有點像是 Swift package manager、CocoaPods 或是 Carthage。&lt;/p&gt;
&lt;h3 id=&#34;zsh&#34;&gt;zsh&lt;/h3&gt;
&lt;p&gt;在 iterm2 之中安裝完 homebrew 之後，
接著就繼續來安裝 zsh，其主要是用來取代原先內建的 bash，
也是這次重灌後開始嘗試使用的新玩意之一。
而在下載安裝完 zsh 後，會被默認安裝在 /usr/local/bin/zsh（或者出現 /usr/local/bin/zsh-5.4.2），
我們要將 zsh 替換掉 bash，需要下一行指令
chsh -s /usr/local/bin/zsh-5.4.2
chsh 的意思便是 change shell，也就是將原本使用的 shell 換成指定路徑。
不過由於 macOS 對於 shell 有防範，所以你可能會得到這種錯誤訊息：
non-standard shell
遇上這個時，我們就得編輯 /etc/shells，將我們剛剛所安裝的路徑放進，
讓系統明白這是一個可以拿來使用的 shell 路徑。&lt;/p&gt;
&lt;h3 id=&#34;oh-my-zsh&#34;&gt;oh-my-zsh&lt;/h3&gt;
&lt;p&gt;oh-my-zsh 是 zsh 的一套 framework，而這也是大家必推的 zsh framework；
安裝方法很簡單：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接著，它有預設的 zshrc template 提供給你使用，可以直接拿來取代 ~/.zshrc&lt;/p&gt;
&lt;h3 id=&#34;zsh-completionshttpsgithubcomzsh-userszsh-completions&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/zsh-users/zsh-completions&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;zsh-completions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;再來，使用 brew 來安裝 zsh-completions，並在 .zshrc 裡頭補上
fpath=(/usr/local/share/zsh-completions $fpath)
接著重開 iTerms2，便可以發現可以使用 tab 來進行 auto completions。&lt;/p&gt;
&lt;h3 id=&#34;更改-zsh-顯示的東西&#34;&gt;更改 zsh 顯示的東西&lt;/h3&gt;
&lt;p&gt;我們可以透過修改 ~/.zshrc 的 PROMPT 來決定輸入指令的左側要顯示什麼，
而通常若沒有特別設定的話，會隨著不同的 zsh theme 來變動；
而我自己本身喜歡只顯示我的名字及最後路徑及 git 相關的，
大概會長得像這樣：&lt;/p&gt;
&lt;p&gt;PROMPT=’%{$fg_bold[white]%}張家齊 %{$fg_bold[red]%}➜ %{$fg_bold[green]%}%p %{$fg[cyan]%}%c %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%} % %{$reset_color%}’&lt;/p&gt;
</description>
        </item>
        <item>
        <title>UIImage memory issue</title>
        <link>https://www.archie.tw/p/uiimage-memory-issue/</link>
        <pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/uiimage-memory-issue/</guid>
        <description>&lt;p&gt;今天要來分享的內容，是有關於 UIImage 的一個記憶體爆炸情況，
而我先闡述一下發現這問題的情境：
專案內有個功能會需要匯入大型圖片做縮放以及拖拉功能，
使用者可以切換大型圖片，而在點擊過多的圖片時，便會造成記憶體爆炸。&lt;/p&gt;
&lt;h3 id=&#34;原先的做法&#34;&gt;原先的做法&lt;/h3&gt;
&lt;p&gt;在使用者點擊叫出某張圖時，會使用
UIImage(name: ImageName) 來產生 UIImage 物件，並將畫面上的 UIImageView.image 設為它。
看起來蠻合理的，當使用者切換後，我會再生成一個新的 UIImage 物件，並取代前者；
這樣前者就應該會釋放掉記憶體空間了！&lt;/p&gt;
&lt;h3 id=&#34;但事情並不是這樣發展&#34;&gt;但⋯⋯事情並不是這樣發展&lt;/h3&gt;
&lt;p&gt;在使用者切換幾次後，發現記憶體只有一直往上增長，而未釋放掉；
意思是指雖然我將畫面上的 UIImageView.image 取代掉了，
不過實際上仍然佔據著記憶體空間⋯⋯&lt;/p&gt;
&lt;h3 id=&#34;為什麼&#34;&gt;為什麼？&lt;/h3&gt;
&lt;p&gt;上網查了一下後，發現 UIImage(named: ImageName) 這種生成方式，
會自行將取出來的圖片放置到 cache；
而上述的使用情況就會變成當使用者一切換，便會將另一張大型圖片放置到 cache 而未釋放掉前一張。&lt;/p&gt;
&lt;h3 id=&#34;改良的做法&#34;&gt;改良的做法&lt;/h3&gt;
&lt;p&gt;Data 在建構的時候，有一種選項是 .uncached，
也就是說，我們可以先將圖片以 Data 的方式打開，再轉回 UIImage，
則就可以避免掉它自動放置到 cache 而記憶體爆掉的情況。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bundle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forResource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ImageName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;withExtension&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contentsOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                         &lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadingOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uncached&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;imageView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣就可以解決 UIImage 的 cache 導致記憶體爆炸的情況。&lt;/p&gt;
&lt;p&gt;題外話
至於圖片本身就已經大到放不進來，則可以先 resize 一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;scaleMapImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CGSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;

        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;UIGraphicsBeginImageContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CGSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CGRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;newImage&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIGraphicsGetImageFromCurrentImageContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;UIGraphicsEndImageContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newImage&lt;/span&gt;

    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>雙 NP：中華電信➡️台灣大哥大➡️中華電信</title>
        <link>https://www.archie.tw/p/%E9%9B%99-np%E4%B8%AD%E8%8F%AF%E9%9B%BB%E4%BF%A1%EF%B8%8F%E5%8F%B0%E7%81%A3%E5%A4%A7%E5%93%A5%E5%A4%A7%EF%B8%8F%E4%B8%AD%E8%8F%AF%E9%9B%BB%E4%BF%A1/</link>
        <pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E9%9B%99-np%E4%B8%AD%E8%8F%AF%E9%9B%BB%E4%BF%A1%EF%B8%8F%E5%8F%B0%E7%81%A3%E5%A4%A7%E5%93%A5%E5%A4%A7%EF%B8%8F%E4%B8%AD%E8%8F%AF%E9%9B%BB%E4%BF%A1/</guid>
        <description>&lt;p&gt;首先，先附上&lt;a class=&#34;link&#34; href=&#34;https://www.landtop.com.tw/discount&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;地標網通的價目表&lt;/a&gt;，
我所要選擇的方案是雙 NP 回中華電信的智慧大玩家 999 方案，
而方案內容是 24 個月，每月月租 999 元，4G 吃到飽，網內60分/網外50分/市話20分。
透過雙 NP 的流程，我可以拿到 11,000 元的攜碼折扣，而算一下每月月租費約為
(999 x 24 – 11,000) / 24 = 540.66667 元&lt;/p&gt;
&lt;h3 id=&#34;闖關流程&#34;&gt;闖關流程&lt;/h3&gt;
&lt;p&gt;第一步，先確認一下自己的合約狀況：
以我的例子來說，
合約原本內容：&lt;/p&gt;
&lt;p&gt;我們可以看到，大多數的合約到期日為 10-03，
但由於第一項合約，其正是去年申請的老客戶優惠方案；
而它的到期日是在 12-23，所以我還是得到中華電話一趟來申請攜出。
於是我便在 10-03 當天的 17：30 左右，
到中華電信的長春服務中心辦理攜出業務。&lt;/p&gt;
&lt;h3 id=&#34;從中華電信攜出&#34;&gt;從中華電信攜出&lt;/h3&gt;
&lt;p&gt;和櫃檯人員說明我要攜出門號，而她也沒有多問些什麼，
便請我提供資料以及詢問門號轉出費用 240 元，
是要選擇跟著當期帳單還是直接繳清。
選擇直接繳清後，並簽個名，就順利拿到收據離開了；
前後加上等候叫號的時間，約莫十分鐘。&lt;/p&gt;
&lt;p&gt;還沒離開中華電信，便收到了相關通知簡訊。&lt;/p&gt;
&lt;h3 id=&#34;到台灣大哥大辦理門號攜入&#34;&gt;到台灣大哥大辦理門號攜入&lt;/h3&gt;
&lt;p&gt;接著到附近的台灣大哥大林森北二直營服務中心，
一進去後副店長便詢問我門號，而當我表示要轉入 4 G 1.8 的方案時，
他便直接問我是否要雙 NP，以及原電信是否為中華電信！
我點了點頭示意，便交出了雙證件和簽了兩處名字，
他告知我通常隔天就可以再到台灣大哥大辦理攜出，
一樣繳納 240 轉出費後便可以去走接下來的流程！
前後大概花了五分鐘，便簡單完成門號攜入了！&lt;/p&gt;
&lt;p&gt;再來就等明天的流程⋯⋯&lt;/p&gt;
&lt;h3 id=&#34;到台灣大哥大攜出&#34;&gt;到台灣大哥大攜出&lt;/h3&gt;
&lt;p&gt;攜出流程應該和中華電信大同小異，明天預計到羅東台灣大哥大興東店辦理。&lt;/p&gt;
&lt;h3 id=&#34;最後到地標網通申請智慧大玩家-999-方案&#34;&gt;最後，到地標網通申請智慧大玩家 999 方案&lt;/h3&gt;
&lt;p&gt;接著再到羅東的地標網通，出示從台灣大哥大攜出的收據辦理後續等開通。&lt;/p&gt;
&lt;p&gt;之後再補上明天過後的流程和感想，
目前操作起來都還算輕鬆順利！&lt;/p&gt;
&lt;h3 id=&#34;2017-10-04&#34;&gt;2017-10-04&lt;/h3&gt;
&lt;p&gt;早上十點半前往台灣大哥大羅東興東店辦理攜出，一樣繳交了 240 元的轉出費，
也是五分鐘左右搞定！&lt;/p&gt;
&lt;p&gt;接著到羅東地標網通辦理方案申請，由於中華電信的資料較多，
就和梁店長一一逐條簽名，花了十分鐘左右完成。
智慧大玩家 999 – 24 個月的攜碼折扣為 11,000 元，而需要預繳 8,800 元，
而在最後完成後，店長便直接退還差額 2,200 元以及合約書和 sim 卡給我，
並告知開通約需 2 – 3 天。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>重灌 macOS 的工程（上）</title>
        <link>https://www.archie.tw/p/%E9%87%8D%E7%81%8C-macos-%E7%9A%84%E5%B7%A5%E7%A8%8B%E4%B8%8A/</link>
        <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E9%87%8D%E7%81%8C-macos-%E7%9A%84%E5%B7%A5%E7%A8%8B%E4%B8%8A/</guid>
        <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;幾天前，Apple 釋出了 High Sierra 的安裝檔，
一時手癢的我，便將自己的 MacBook Pro (Retina, 13-inch, Mid 2014) 來進行更新！
早上上班前出門開始更新，晚上回到家後卻還卡在剩餘 33 分鐘處⋯⋯
覺得詭異的我，便強制關機，而再次打開便只能 command + R 開始重灌系統。
但事情往往不會那麼簡單，在重灌系統時，一直遇上卡在剩餘 1 分鐘的進度；
使用 command + L 查看安裝記錄，便發現是一直在安裝檔的驗證失敗⋯⋯
直到今天早上，在重灌一次，才順利完成 High Sierra 的安裝。&lt;/p&gt;
&lt;h3 id=&#34;但故事往往都不會那麼順利&#34;&gt;但故事往往都不會那麼順利&lt;/h3&gt;
&lt;p&gt;不知道為什麼的，我的 Disk password 一直輸入失敗，
但在 command + R 的修復模式之中，那組密碼是可以順利解開 Filevault 的⋯⋯
進入到重置密碼的頁面後，跟著步驟完成後卻得到發生內部錯誤的訊息⋯⋯
反覆試了幾次之後，得到兩個結論：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;格式化硬碟再重灌看來是最快的方式&lt;/li&gt;
&lt;li&gt;下次絕對不要輕易使用 Filevault&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;於是乎，花了數個小時後，便得到一台新的 MacBook Pro！&lt;/p&gt;
&lt;p&gt;而既然都走到這步田地了，不如就順勢將自己的環境配置逐一記錄下來⋯⋯&lt;/p&gt;
&lt;h3 id=&#34;觸控板相關&#34;&gt;觸控板相關&lt;/h3&gt;
&lt;p&gt;首先，第一步我都會先將觸控板相關的內容弄一弄，
這樣待會做其他事情也都會較快一些：&lt;/p&gt;
&lt;p&gt;點一下來選按：這樣就不用真的按下觸控板才會有動作&lt;/p&gt;
&lt;p&gt;輔助使用➡️滑鼠與觸控式軌跡板➡️觸控式軌跡板選項⋯：啟用拖移&lt;/p&gt;
&lt;h3 id=&#34;一般&#34;&gt;一般&lt;/h3&gt;
&lt;p&gt;使用暗色選單列和 Dock：我個人喜歡這配色的 macOS&lt;/p&gt;
&lt;h3 id=&#34;聲音&#34;&gt;聲音&lt;/h3&gt;
&lt;p&gt;在選單列中顯示音量：這樣在切換聲音輸出的時候很方便，從內建揚聲器到藍牙耳機&lt;/p&gt;
&lt;h3 id=&#34;icloud&#34;&gt;iCloud&lt;/h3&gt;
&lt;p&gt;能勾的全勾：單純在 iPhone、iPad、以及其他 Mac 之間切換很方便&lt;/p&gt;
&lt;h3 id=&#34;app-store&#34;&gt;App Store&lt;/h3&gt;
&lt;p&gt;這邊則是我會從 App Store 上下載（或更新）的東西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iTunes&lt;/li&gt;
&lt;li&gt;Command Line Tools&lt;/li&gt;
&lt;li&gt;Xcode&lt;/li&gt;
&lt;li&gt;LINE&lt;/li&gt;
&lt;li&gt;Window Tidy&lt;/li&gt;
&lt;li&gt;Pages&lt;/li&gt;
&lt;li&gt;Numbers&lt;/li&gt;
&lt;li&gt;Keynote&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;p&gt;其他開發會使用到的一些東西，則等我告一個段落後再一一寫進下一篇！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Swift 4 JSON</title>
        <link>https://www.archie.tw/p/swift-4-json/</link>
        <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/swift-4-json/</guid>
        <description>&lt;p&gt;在 Swift 之中，JSON (JavaScript Object Notation) 的型別為 [String: Any]，
也就是一個 Dictionary 的概念，以一組 Key 對應一組 Value。
大多數會碰到 JSON 格式是在做網路溝通時，
使用 JSON 格式並 encode 成 Data 的型態在傳輸資料。&lt;/p&gt;
&lt;h3 id=&#34;swift-3-以前&#34;&gt;Swift 3 以前&lt;/h3&gt;
&lt;p&gt;我們從 URLSession.shared.dataTask 的 handler 之中，
會得到 data、response 及 error，其中的 data 會使用下面的方式才轉換成 JSON：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* Create a Foundation object from JSON data. Set the NSJSONReadingAllowFragments option if the parser should allow top-level objects that are not an NSArray or NSDictionary. Setting the NSJSONReadingMutableContainers option will make the parser generate mutable NSArrays and NSDictionaries. Setting the NSJSONReadingMutableLeaves option will make the parser generate mutable NSString objects. If an error occurs during the parse, then the error parameter will be set and the result will be nil.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;       The data must be in one of the 5 supported encodings listed in the JSON specification: UTF-8, UTF-16LE, UTF-16BE, UTF-32LE, UTF-32BE. The data may or may not have a BOM. The most efficient encoding to use for parsing is UTF-8, so if you have a choice in encoding the data passed to this method, use UTF-8.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JSONSerialization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadingOptions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著我們再來對 JSON 的 Key 和 Value 來進行拆解：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;{
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    &amp;#34;status&amp;#34;: true,
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    &amp;#34;user&amp;#34;: {
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;        &amp;#34;ID&amp;#34;: &amp;#34;1234567890&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;        &amp;#34;name&amp;#34;: &amp;#34;Archie&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;        &amp;#34;email&amp;#34;: &amp;#34;example@example.com&amp;#34;
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ID&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])?[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])?[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])?[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Error&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而巢狀式的 JSON 格式，寫起來的 code 就會越長，進而衍生出 SwiftyJSON，有興趣的可以自行看一下。&lt;/p&gt;
&lt;h3 id=&#34;swift-4&#34;&gt;Swift 4&lt;/h3&gt;
&lt;p&gt;那 Swift 4 做了哪種改變呢？
在 Foundation 裡頭，增加了 Encoder/Decoder 相關的內容，
而這邊先以 JSON 作為主要的內容。
以 User 作為例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;{
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    &amp;#34;name&amp;#34;: &amp;#34;Archie&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    &amp;#34;email&amp;#34;: &amp;#34;example@example.com&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    &amp;#34;status: &amp;#34;Active&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    &amp;#34;updated_time&amp;#34;: &amp;#34;2017-09-20T00:00:00Z&amp;#34;
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Codable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;active&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Active&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Disable:&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Codable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserStatus&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;updatedTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;
    
    &lt;span class=&#34;c1&#34;&gt;// if keys need to replace by others&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CodingKeys&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CodingKey&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;email&lt;/span&gt; 
          &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; 
          &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;updatedTime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;updated_time&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// encoder&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;encoder&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JSONEncoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// set date encoding strategy to iso8601&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// default is TimeInterval&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;encoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dateEncodingStrategy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iso8601&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// user convert to data&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// decoder&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;decoder&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JSONDecoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// data convert to user&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，Codable 是指 Encodable 和 Decodable，
若你只需要做 data parse 的話，也可以僅宣告 Decodable。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Third-party Payment</title>
        <link>https://www.archie.tw/p/third-party-payment/</link>
        <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/third-party-payment/</guid>
        <description>&lt;h1 id=&#34;third-party-payment&#34;&gt;Third-party Payment&lt;/h1&gt;
&lt;p&gt;這篇要來聊聊第三方支付，其主要的內容會介紹幾個台灣所可以使用的第三方支付方案；
而第三方支付主要解決的問題是，替我們向銀行方溝通及串接請款等動作，
讓使用者可以透過第三方支付的服務付款，而我們再和第三方支付的服務商談拆帳方式，
它可以讓我們不必親自去和銀行接洽運作的方式，只需要透過其官方的一些文件或是管理後台，
便能較輕易地處理掉金流這一塊的相關問題。
而這邊會談到下列幾間的一些資訊：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;智付通&lt;/li&gt;
&lt;li&gt;綠界&lt;/li&gt;
&lt;li&gt;TapPay&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;智付通&#34;&gt;智付通&lt;/h2&gt;
&lt;p&gt;智付寶為智冠科技旗下的金流平台公司，而智付通則是其主要的服務名稱。&lt;/p&gt;
&lt;h3 id=&#34;會員&#34;&gt;會員&lt;/h3&gt;
&lt;p&gt;我們需要先到智付通的網站之中，創建一組收款帳號：&lt;/p&gt;
&lt;p&gt;企業會員的部分，可以透過業務的接洽去談彼此之間的手續費抽成數字，
再來就可以串接其 API 來進行相關的開發動作。&lt;/p&gt;
&lt;h3 id=&#34;支援的支付方式&#34;&gt;支援的支付方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;超商代收&lt;/li&gt;
&lt;li&gt;信用卡&lt;/li&gt;
&lt;li&gt;ATM / WebATM&lt;/li&gt;
&lt;li&gt;Pay2go 電子錢包（他們自己的產品）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;費用&#34;&gt;費用&lt;/h3&gt;
&lt;p&gt;智付通的商業模式是抽取交易手續費的模式：&lt;/p&gt;
&lt;p&gt;其中，舉個例子：
像是信用卡一次付清 2.80% 的意思是，信用卡支付銀行本身可能是抽取 1.80%，
而智付通要賺的錢，便是 2.80 – 1.80 = 1.00 %。&lt;/p&gt;
&lt;h3 id=&#34;備註&#34;&gt;備註&lt;/h3&gt;
&lt;p&gt;之前同事在串接 API 時，踩過幾次文件和實際 response 不符的雷⋯⋯&lt;/p&gt;
&lt;h2 id=&#34;綠界&#34;&gt;綠界&lt;/h2&gt;
&lt;h3 id=&#34;會員以及收費&#34;&gt;會員以及收費&lt;/h3&gt;
&lt;p&gt;綠界的個人會員和商務會員差異性，從圖表上看來只在於收款額度上的不同；
而特約會員（應該是從業務去接洽的）則是可以去談判的「依雙方議定」。&lt;/p&gt;
&lt;h3 id=&#34;支援的支付方式-1&#34;&gt;支援的支付方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;超商代收&lt;/li&gt;
&lt;li&gt;信用卡&lt;/li&gt;
&lt;li&gt;ATM / WebATM&lt;/li&gt;
&lt;li&gt;Apple Pay&lt;/li&gt;
&lt;li&gt;Android Pay&lt;/li&gt;
&lt;li&gt;全家條碼立即儲&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tappay&#34;&gt;TapPay&lt;/h2&gt;
&lt;p&gt;TapPay 的商業模式則和上述兩者不太相同，前面所提及的廠商，
是在每筆交易之中抽成當作手續費，
而 TapPay 則是以單筆固定金額來收取費用；
原因是在於，在使用 TapPay 時，
我們需要和相關的銀行簽妥相關文件，讓錢直接轉進我們的戶頭內，
也就是說 TapPay 實際上並不會先將錢都收進它那，
而是一個幫忙在銀行和我們之間作溝通的角色。&lt;/p&gt;
&lt;h3 id=&#34;支援的支付方式-2&#34;&gt;支援的支付方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Apple Pay&lt;/li&gt;
&lt;li&gt;Android Pay&lt;/li&gt;
&lt;li&gt;Direct Pay&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流程&#34;&gt;流程&lt;/h3&gt;
&lt;p&gt;當時和 TapPay 聯繫所得到的資訊是，我們會先選擇要使用哪一間銀行作為收款的窗口，
他們會協助我們簽妥銀行簽收單合約，再來另一份是 TapPay 的服務合約，
而各家銀行和 TapPay 之間所能談到的信用卡費用也不同。&lt;/p&gt;
&lt;h2 id=&#34;費用-1&#34;&gt;費用&lt;/h2&gt;
&lt;p&gt;2017/07/17 所記錄的資訊如下：&lt;/p&gt;
&lt;h3 id=&#34;中國信託&#34;&gt;中國信託&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;信用卡 1.85%&lt;/li&gt;
&lt;li&gt;設置費 4 萬&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;台新銀行&#34;&gt;台新銀行&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;信用卡 1.8%&lt;/li&gt;
&lt;li&gt;免設置費&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;玉山銀行&#34;&gt;玉山銀行&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;信用卡 1.85%&lt;/li&gt;
&lt;li&gt;免設置費&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;月費&#34;&gt;月費：&lt;/h3&gt;
&lt;p&gt;每月筆數低於 150 筆：0 元
每月筆數 150 – 1999 筆：2489 元
每月筆數  2000 – 9999 筆：2989 元
每月筆數 10000 – 39999 筆：7489 元
每月筆數 40000 – 99999 筆：14989 元
超過 100000 筆：39487 元&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Credit Card Number</title>
        <link>https://www.archie.tw/p/credit-card-number/</link>
        <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/credit-card-number/</guid>
        <description>&lt;p&gt;最近在串信用卡支付相關的服務，順道筆記信用卡卡號的相關規則。&lt;/p&gt;
&lt;h1 id=&#34;驗證卡號&#34;&gt;驗證卡號&lt;/h1&gt;
&lt;p&gt;信用卡卡號的驗證方式是，最後一碼為驗證碼；
舉個例子來說：
MasterCard – 5200 8282 8282 8210
其中最後一碼 0 是由 5200 8282 8282 821 去做一些邏輯運算後得到的結果；
也就是你其實可以前面隨便亂打，最後一碼再從 0 測試到 9 就可以通過基本的卡號驗證。&lt;/p&gt;
&lt;h2 id=&#34;驗證方式&#34;&gt;驗證方式&lt;/h2&gt;
&lt;p&gt;信用卡的驗證方式，是用 The Luhn Formula，也就是說，
當我們取得一組卡號，驗證碼產生的流程為：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去掉最後一碼（5 2 0 0 – 8 2 8 2 – 8 2 8 2 – 8 2 1）&lt;/li&gt;
&lt;li&gt;把整串倒過來（1 2 8 – 2 8 2 8 – 2 8 2 8 – 0 0 2 5）&lt;/li&gt;
&lt;li&gt;排序奇數的數字 x 2（2 2 16 – 2 16 2 16 – 2 16 2 16 – 0 0 2 10）&lt;/li&gt;
&lt;li&gt;超過九的數字則 – 9（2 2 7 – 2 7 2 7 – 2 7 2 7 – 0 0 2 1）&lt;/li&gt;
&lt;li&gt;將所有數字相加（50）&lt;/li&gt;
&lt;li&gt;取尾數（0）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;得到驗證碼為 0，則卡號 5200 8282 8282 8210 為正確的卡號格式。&lt;/p&gt;
&lt;h2 id=&#34;卡別辨別&#34;&gt;卡別辨別&lt;/h2&gt;
&lt;p&gt;是以開頭前幾個數字來當作判斷基準，
例如 VISA 卡的判斷方式是卡號為 4 開頭的；
JCB 則是前四碼在 3528 – 3589 範圍內。
還有很多相關的判斷資訊，可以到 FreeFormatter.com 看看！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Status bar style</title>
        <link>https://www.archie.tw/p/status-bar-style/</link>
        <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/status-bar-style/</guid>
        <description>&lt;h1 id=&#34;status-bar-style&#34;&gt;Status bar style&lt;/h1&gt;
&lt;p&gt;一般在 iOS 裡頭，status bar style 可以被分成兩種&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default&lt;/li&gt;
&lt;li&gt;lightContent&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;設定方式&#34;&gt;設定方式&lt;/h2&gt;
&lt;p&gt;我們可以在 info.plist 做全域的設定，讓整個 app 在執行的時候，都是同樣的 style；
這取決於
View controller-based status bar appearance – YES / NO
若設為 NO，則是整個 app 都會是同樣的 style；
而若設為 YES，就能在個別的 viewController 來做設定。&lt;/p&gt;
&lt;h3 id=&#34;view-controller-base-status-bar-appearance--yes&#34;&gt;View controller-base status bar appearance – YES&lt;/h3&gt;
&lt;p&gt;實作方式是更改 UIViewController 底下的 preferredStatusBarStyle，
而因為它是 { get } 的，所以我們只能透過覆寫的方式來更改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kr&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;preferredStatusBarStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIStatusBarStyle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lightContent&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;UINavigationController
如果你要更改的 UIViewController 是包在 UINavigationController 裡頭的話，
則需要更改的是 UINavigationController 的 preferredStatusBarStyle，
而非是當前的 UIViewController。&lt;/p&gt;
&lt;p&gt;動態更改
當我們執行 setNeedsStatusBarAppearanceUpdate()，可以讓系統再去讀一次 preferredStatusBarStyle，並更改狀態；
所以若要做更改的動畫，則可以在 UIView.animated 裡頭執行 self.setNeedsStatusBarAppearanceUpdate()&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ViewModel with POP</title>
        <link>https://www.archie.tw/p/viewmodel-with-pop/</link>
        <pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/viewmodel-with-pop/</guid>
        <description>&lt;h1 id=&#34;viewmodel-with-pop&#34;&gt;ViewModel with POP&lt;/h1&gt;
&lt;p&gt;這邊有兩個名詞需要解釋一下，一個是 ViewModel，另一個則是 POP：&lt;/p&gt;
&lt;h2 id=&#34;viewmodel&#34;&gt;ViewModel&lt;/h2&gt;
&lt;p&gt;在 iOS 的開發模式中，從你新建一個新專案的時候，它的預設內容是以 MVC 的架構為底；
而在 MVVM 的架構中，會在 View 以及 Model 之間，多夾帶一層 ViewModel 來分工。
在實作 ViewModel 的時候，我是以 structure 的方式才建構 ViewModel，
並在裡頭宣告 init(model: Model) 的方式，來將 Model 轉成 ViewModel。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserViewModel&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hi, 我是 &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;，今年 &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; 歲！&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pop&#34;&gt;POP&lt;/h2&gt;
&lt;p&gt;POP（Protocol-Oriendted Programing）是以 Protocol 來傳遞的方式；
以 UITableViewCell 來說，我會建立一個：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UITableViewCellRepresentable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;associatedtype&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CellType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITableViewCell&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;cell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IndexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;Self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CellType&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後讓 UserViewModel 或是相關的 CellViewModel 來遵守這個 protocol，
這樣 CellViewModel 都可以直接取用出相對應的 Cell！
UITableViewDataSource 的 cellForRowAt 就可以簡單一些：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IndexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;viewModels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indexPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>iOS UIView shadow</title>
        <link>https://www.archie.tw/p/ios-uiview-shadow/</link>
        <pubDate>Thu, 10 Aug 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/ios-uiview-shadow/</guid>
        <description>&lt;p&gt;最近在寫的專案，使用到比較多的陰影效果，就來列列有關陰影效果的一些內容。&lt;/p&gt;
&lt;h1 id=&#34;calayer&#34;&gt;CALayer&lt;/h1&gt;
&lt;p&gt;陰影相關的實作方式，是以 CALayer 底下的這五個變數來控制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shadowColor: CGColor?&lt;/li&gt;
&lt;li&gt;shadowPath: CGPath?&lt;/li&gt;
&lt;li&gt;shadowOffset: CGSize&lt;/li&gt;
&lt;li&gt;shadowRadius: CGFloat&lt;/li&gt;
&lt;li&gt;shadowOpacity: Float&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shadowcolor&#34;&gt;shadowColor&lt;/h2&gt;
&lt;p&gt;預設值為不透明的黑色，我們可以透過這個參數來調整陰影的顏色。&lt;/p&gt;
&lt;h2 id=&#34;shadowpath&#34;&gt;shadowPath&lt;/h2&gt;
&lt;p&gt;預設值為 null，並支援 animated，可以在這邊調整陰影的路徑，
所以當 UIView 在透過 animated 調整大小時，我們可以一併調整 shadowPath 來跟著做變化。&lt;/p&gt;
&lt;h2 id=&#34;shadowoffset&#34;&gt;shadowOffset&lt;/h2&gt;
&lt;p&gt;預設值為 [0, -3]，來調整陰影的位移。&lt;/p&gt;
&lt;h2 id=&#34;shadowradius&#34;&gt;shadowRadius&lt;/h2&gt;
&lt;p&gt;預設值為 3，系統本身會進行發散的動作。&lt;/p&gt;
&lt;h2 id=&#34;shadowopacity&#34;&gt;shadowOpacity&lt;/h2&gt;
&lt;p&gt;預設值為 0，也就是完全透明；
所以如果只是要陰影，並沒有需要客製化的話，
只需要修改 shadowOpacity，畫面上就會有 offset = [0, -3], radius = 3 的不透明黑色陰影出現。&lt;/p&gt;
&lt;h2 id=&#34;cornerradius&#34;&gt;cornerRadius&lt;/h2&gt;
&lt;p&gt;這邊有點需要注意到的是，若要有 shadow 效果的話，下面兩者必須為 false&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;layer.masksToBounds&lt;/li&gt;
&lt;li&gt;clipsToBounds&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因為若將 layer 只關閉在 bounds 的話，則無法呈現陰影的效果；
但偏偏若需要圓角效果的話，則必須更改為 true。
而這邊，我的做法是，
先建立一個透明色的 UIView，來做陰影的效果，
再疊加一層 subview 來做圓角的效果，
這樣便可以做出有陰影效果的圓角 UIView 了！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>iOS User Interface Default Value</title>
        <link>https://www.archie.tw/p/ios-user-interface-default-value/</link>
        <pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/ios-user-interface-default-value/</guid>
        <description>&lt;p&gt;我們在開發 iOS App 的時候，對於 User interface 的開發模式有幾種流派&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Storyboard&lt;/li&gt;
&lt;li&gt;Storyboard + xib&lt;/li&gt;
&lt;li&gt;xib&lt;/li&gt;
&lt;li&gt;Code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而這篇的主題，先撇除純 Code 流的開發方式，來聊聊使用 Storyboard 和 xib 的朋友，會遇到什麼事。&lt;/p&gt;
&lt;h3 id=&#34;先說說為什麼我使用-user-interfacestoryboard-xib&#34;&gt;先說說為什麼我使用 User interface（Storyboard, xib）&lt;/h3&gt;
&lt;p&gt;一方面是因為一開始學習的時候，教學是從拉拉元件，連動按鈕開始，
比起純 Code 的寫法，這樣也讓人比較好上手；
再來便開始弄一些 Auto layout，讓畫面越來越完整。
而其中一點是，方便和設計師做討論，
看著畫面來調整 UI 會比我一直重新 Build 出 App 還快得一些。
但也正是為了讓設計師可以看到畫面，我可能得在一些 UIKit 的元件上先放置好預設的值，
好比說：&lt;/p&gt;
&lt;p&gt;儘管這個 UIViewController 在 viewDidLoad 的時候，會再配置一次多語系的文案以及更換些 icon 或者顏色，
但至少在初步上可以看到大概會長什麼樣子。&lt;/p&gt;
&lt;h3 id=&#34;若不清空預設值呢&#34;&gt;若不清空預設值呢？&lt;/h3&gt;
&lt;p&gt;我們就可能在部分畫面上會看到，原本打在 xib 的 UITextField 上的值（e.g Hinet CHT Auto），
甚至是可能有些元件的 isHidden 是由程式判斷出需不需要呈現，
而畫面顯示到判斷完畢的中間，會造成畫面上元件閃現的情況。
於是原先我的做法會：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清空 xib 上的所有預設值&lt;/li&gt;
&lt;li&gt;在 viewDidLoad 的狀態，執行清空的動作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者的做法，會影響到的就是 xib 失去了給設計師觀看的意義，
因為全空的畫面並不符合使用者的情境；
而後者的做法，當元件一多的時候，有時便會有疏忽。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIViewController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;weak&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;nameTextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;weak&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;passwordTextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;weak&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;addressTextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;
    
    &lt;span class=&#34;kr&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kc&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;setUpView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setUpView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;nameTextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;placeholder&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;給值&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;passwordTextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;placeholder&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;給值&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;addressTextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;placeholder&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;給值&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上圖，我會在 setUpView() 的時候對 UIKit 元件一一設置。
後來，某天看到了另一種方式處理這一塊：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIViewController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;weak&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;nameTextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;didSet&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;nameTextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;placeholder&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;給值&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;weak&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;passwordTextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;didSet&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;passwordTextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;placeholder&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;給值&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;weak&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;addressTextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UITextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;didSet&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;addressTextField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;placeholder&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;給值&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是將元件建構的動作寫在 UIKit 的元件 didSet 的時候，對於每個元件該做哪些事情就會有比較清楚的說明。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>GraphQL</title>
        <link>https://www.archie.tw/p/graphql/</link>
        <pubDate>Tue, 08 Aug 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/graphql/</guid>
        <description>&lt;h1 id=&#34;graphql-vs-rest&#34;&gt;GraphQL v.s REST&lt;/h1&gt;
&lt;p&gt;首先，看到這個標題，要先了解一下什麼是「REST」；
我們在先前的文章中有提到關於 Firebase Database REST API 的內容，
但並沒有在文章內解釋其含義是什麼。&lt;/p&gt;
&lt;h2 id=&#34;rest&#34;&gt;REST&lt;/h2&gt;
&lt;p&gt;REST（Representational State Transfer），是一種架構，而非協定或是標準；
透過 HTTP 協議所提供的動作（POST、GET、PUT、DELETE）來對資源進行 CRUD（Create、Read、Update、Delete），
並以 URI 的方式來指定資源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POST /games：建立遊戲&lt;/li&gt;
&lt;li&gt;GET /games：取得遊戲清單&lt;/li&gt;
&lt;li&gt;PUT /games/123：修改 id = 123 的遊戲內容&lt;/li&gt;
&lt;li&gt;DELETE /games/123：刪除 id = 123 的遊戲
在 iOS 開發的串接 RESTful API 的經驗中，不論是取得的資料，或是回傳回 server 的資料，
大多是以 JSON 的格式在做溝通。
前後端之間可以透過 RESTful 的方式進行明確的溝通，進而開發出相對應的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rest-的缺點&#34;&gt;REST 的缺點&lt;/h3&gt;
&lt;p&gt;但有時候還是會遇到一些問題&lt;/p&gt;
&lt;h3 id=&#34;會拿到多餘的欄位&#34;&gt;會拿到多餘的欄位&lt;/h3&gt;
&lt;p&gt;巢狀資源的處理
越來越多支 API
會拿到多餘的欄位&lt;/p&gt;
&lt;p&gt;有時候我們為了顯示一個商品，在畫面上需要呈現&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商品名稱&lt;/li&gt;
&lt;li&gt;價錢&lt;/li&gt;
&lt;li&gt;照片 URL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但可能在 GET /products/1 的時候，會拿到整個商品的資料回來：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商品 ID&lt;/li&gt;
&lt;li&gt;名稱&lt;/li&gt;
&lt;li&gt;價錢&lt;/li&gt;
&lt;li&gt;剩餘數量&lt;/li&gt;
&lt;li&gt;照片 URL&lt;/li&gt;
&lt;li&gt;建立時間&lt;/li&gt;
&lt;li&gt;最後更新時間
不過在顯示端僅需要呈現三個項目，那麼其他回傳的資料就浪費了彼此之間的網路傳輸。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;巢狀資源的處理&#34;&gt;巢狀資源的處理&lt;/h3&gt;
&lt;p&gt;像是在一個畫面中，需要顯示「我的最愛」；
在 REST 的架構下，我們會設計出兩支 API：&lt;/p&gt;
&lt;p&gt;GET /users/1/favorites：取得 id = 1 的會員的最愛清單
GET /books/123：取得 id = 123 的書本資料
我們會在第一支 API 中取得一個書本 ID 列表，再來呼叫第二支 API 來取得書本資訊；
如果將書本的資訊直接併入最愛之中，雖然可以減少查詢的次數，但又會在某些不需要關聯的時候，
而讓書本成為多餘的欄位。&lt;/p&gt;
&lt;h3 id=&#34;於是乎就會越來越多支-api&#34;&gt;於是乎就會越來越多支 API&lt;/h3&gt;
&lt;p&gt;上述幾種狀況，可能就會開始出現：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET /products-with-photo&lt;/li&gt;
&lt;li&gt;GET /products-with-price&lt;/li&gt;
&lt;li&gt;GET /products-with-users
之類的，為了配合某些前端的顯示需求而特化的 API，為了一次取得多個物件回傳，
但這也破壞了 REST 原先的架構設計風格。
所以，Facebook 便在 2012 年開始在公司內部使用另一種架設風格來解決這些問題：&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;graphql&#34;&gt;GraphQL&lt;/h2&gt;
&lt;p&gt;GraphQL 是由 Facebook 所提出的一種 query language，從 2012 年內部開始使用，到 2015 年 7 月開源。
其精神便是將所有的 API 都統整成一支 GraphQL 的 API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET /graphql?query={ user(id: “1”) { name, address { zipCode } } }&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Archie&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;zipCode&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;12345&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;回傳的資料由呼叫 API 的人決定，有點像是讓呼叫人的負責下 query 的條件。
讓前後端共同使用一份 schema 來定義出個物件的 type 和定義好 Query 這個物件的內容，
再來就由呼叫方來自由發揮需要取得哪些資訊自訂組裝。
比較強烈的比較在於：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有一支 API（也就是只有一個 endpoint）&lt;/li&gt;
&lt;li&gt;可以自行處理巢狀資料&lt;/li&gt;
&lt;li&gt;可以自行決定拿到哪些欄位
進而改善上面所提到的問題。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;結論&#34;&gt;結論&lt;/h1&gt;
&lt;p&gt;對於 iOS 的開發人員而言，是一種蠻新潮且有趣的串接方式，
但在後端就不知道是一個怎樣的複雜程度了⋯⋯畢竟我比較著重在 iOS 的應用方面，
有興趣的人可以看看我所一開始看的這篇文章。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>chmod with ssh key</title>
        <link>https://www.archie.tw/p/chmod-with-ssh-key/</link>
        <pubDate>Mon, 07 Aug 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/chmod-with-ssh-key/</guid>
        <description>&lt;p&gt;chmod 是由 &lt;code&gt;ch&lt;/code&gt;ange &lt;code&gt;mod&lt;/code&gt;e 所組成，其指令功能便是更改檔案或者資料夾底下所有檔案的權限。
而權限位是由 9 個權限位來控制，每 3 位為一組，分別為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User&lt;/li&gt;
&lt;li&gt;Group&lt;/li&gt;
&lt;li&gt;Other&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;chmod 的八進位語法的數字說明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r: read – 4&lt;/li&gt;
&lt;li&gt;w: write -2&lt;/li&gt;
&lt;li&gt;x: execute – 1
所以，舉個例子：
5 = 可讀可執行（4 + 1）
6 = 可讀可寫（4 + 2）
7 = 可讀可寫可執行（4 + 2 + 1）
那麼，chmod 600 則就代表著 User 可讀可寫，但 Group 和 Other 則無法使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chmod-ssh-key&#34;&gt;chmod ssh key&lt;/h3&gt;
&lt;p&gt;若我們更改一下 ssh 的 private key，會發生什麼事呢？&lt;/p&gt;
&lt;p&gt;如圖片測試結果所示，ssh 的 private key 僅能開放 User 的權限，
Group 和 Other 則都不能開放，否則就會無法使用。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Firebase Database REST API</title>
        <link>https://www.archie.tw/p/firebase-database-rest-api/</link>
        <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/firebase-database-rest-api/</guid>
        <description>&lt;p&gt;這篇主要的內容會是簡單地記錄一下 Firebase Database RESTful API，
所提供的相關內容和使用方式。&lt;/p&gt;
&lt;h1 id=&#34;firebase-database&#34;&gt;Firebase Database&lt;/h1&gt;
&lt;p&gt;Firebase database 的儲存資料方式是屬於 NoSQL 的方式，
利用一組 key 配對一組 value 的模式來建構資料庫；
而在 Database 的介面中，我們可以清楚地看到資料是以 JSON 的格式呈現。&lt;/p&gt;
&lt;p&gt;在 iOS 開發的過程中，如果要使用 Firebase 的相關內容，
可以使用官方所提供的 Firebase iOS SDK；
或是在使用 Python 開發的時候，我會選擇使用官方推薦的 Pyrebase，
那若你目前的開發方式沒有相對應的 SDK 或是 third party 可以使用的話呢？
那麼你就只能一起用 REST API 來完成要做的事情了！&lt;/p&gt;
&lt;h2 id=&#34;rest-api&#34;&gt;REST API&lt;/h2&gt;
&lt;p&gt;Firebase 提供了五種 Http method&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;PUT&lt;/li&gt;
&lt;li&gt;POST&lt;/li&gt;
&lt;li&gt;PATCH&lt;/li&gt;
&lt;li&gt;DELETE
其中 GET 和 DELETE 就沒什麼特別好說的，你就是取得一個 JSON 或是刪除一個。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;put&#34;&gt;PUT&lt;/h3&gt;
&lt;p&gt;PUT 就和平常使用 PUT 的方式一樣，
它會把整個 JSON 覆蓋成你目前丟上去的 JSON。&lt;/p&gt;
&lt;h3 id=&#34;post&#34;&gt;POST&lt;/h3&gt;
&lt;p&gt;POST 的話就有些不一樣，當你 POST 一個資料到某個 JSON 的時候，
它會自行建立一組 key 並回傳 name 回來。
而你所丟的資料會是那組 key 所對應的 value，
所以簡單來說 POST 就是在做新增物件時使用，且 ID 是由它所建立的。&lt;/p&gt;
&lt;h3 id=&#34;patch&#34;&gt;PATCH&lt;/h3&gt;
&lt;p&gt;PATCH 則是負責更新內容，它會先找到匹配的 key，再更新其 value；
若沒有找到相對應的 key 的話，則會建立一筆新的 key-value。&lt;/p&gt;
&lt;h3 id=&#34;如果有其中一個無法使用呢&#34;&gt;如果有其中一個無法使用呢？&lt;/h3&gt;
&lt;p&gt;若遇到你所使用的開發語言或是瀏覽器等等，無法使用其中一項 method 時；
舉個例子，DELETE 無法使用的話，Firebase 有提供你覆寫 method 的功能，
method 使用 POST，而在 header 加上：
X-HTTP-Method-Override: DELETE
便可以等同於上述所說的 DELETE。
或是加在 url 裡頭也可以：
https://[PROJECT_ID].firebaseio/[JSON_NAME].json?x-http-method-override=DELETE&lt;/p&gt;
&lt;h3 id=&#34;firebase-etag&#34;&gt;Firebase ETag&lt;/h3&gt;
&lt;p&gt;Firebase 也有支援 ETag，
在 header 上加上 X-Firebase-ETag: true，它便會在回傳的 headers 中加上
Access-Control-Expose-Headers = ETag
ETag = kmHkuKx9sCx742tosJOV4oH+JBQ=
而我們可以下一次的 request 中，在 header 放上 if-match:[ETAG_VALUE]，
伺服器端便會驗證是否可以執行這次的要求；
若最後一次的 ETag 和 if-match 的值相符的話，Firebase 便會回傳 412 Precondition failed。
而 ETag 相關的資訊可以看這邊。&lt;/p&gt;
&lt;h1 id=&#34;最後&#34;&gt;最後&lt;/h1&gt;
&lt;p&gt;整理完這些資訊後，就可以著手寫一些 database 的存取方法到 Vapor 的專案了！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Vapor</title>
        <link>https://www.archie.tw/p/vapor/</link>
        <pubDate>Thu, 03 Aug 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/vapor/</guid>
        <description>&lt;h1 id=&#34;vapor&#34;&gt;Vapor&lt;/h1&gt;
&lt;p&gt;在 Swift 開源之後，開發者們便開始將這語言往更多層面去發展，而 web app 便是其中一項。
Vapor 是一款以 Swift 作為主要語言的 Server 建構服務，讓我們可以透過它來開發 Web 相關的應用；
對於 iOS 開發人員而言，Swift 可以用來開發 web app 是一件有趣的事情，
其代表著我們可以使用同一個語言來開發一個產品，從 server 到 client。&lt;/p&gt;
&lt;h2 id=&#34;安裝方式&#34;&gt;安裝方式&lt;/h2&gt;
&lt;p&gt;不同於在安裝 iOS 第三方套件的流程，Vapor 需要透過 terminal 來安裝相關內容：
首先，得先安裝 Vapor 的 CLI&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -sL toolbox.qutheory.io | sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安裝完之後，便可以在 terminal 底下使用 vapor 的指令。&lt;/p&gt;
&lt;h2 id=&#34;建立新專案&#34;&gt;建立新專案&lt;/h2&gt;
&lt;p&gt;我們可以透過下方的指令，來建立一個新專案：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vapor new ProjectName
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中第三方套件的管理方式，是使用 Swift Package Manager，
所以我們會在目錄下看到一個 Package.swift 和 Package.pins，
這方面倒是有些像 CocoaPods 所使用的 Podfile 的概念。&lt;/p&gt;
&lt;h2 id=&#34;使用-xcode-開發&#34;&gt;使用 Xcode 開發&lt;/h2&gt;
&lt;p&gt;有了專案後，你可以選擇直接打開 main.swift 來進行開發，
但如果比較喜歡使用 Xcode 開啟一個專案，而非單一檔案，
則可以透過下方指令才建立 .project。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vapor xcode
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣系統就會幫我們產生 .project 檔，開發起來就和原本寫 iOS 差不多了。&lt;/p&gt;
&lt;h2 id=&#34;server-的相關設定&#34;&gt;Server 的相關設定&lt;/h2&gt;
&lt;p&gt;Vapor 的 server 相關設定會放置在 Config 的資料夾底下，
其中包含五個 .json 檔案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app.json&lt;/li&gt;
&lt;li&gt;crypto.json&lt;/li&gt;
&lt;li&gt;droplet.json&lt;/li&gt;
&lt;li&gt;fluent.json&lt;/li&gt;
&lt;li&gt;server.json
像是我們可以在 server.json 裡頭看到 host、port 的相關內容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;build--run&#34;&gt;Build &amp;amp; Run&lt;/h2&gt;
&lt;p&gt;若你是開啟 Xcode 專案的方式，那麼 build 和 run 的方式就和以往開發 iOS 的方式一樣；
但若是沒有建立 .project 的話，也可以透過 vapor build 以及 run 的方式，就是在目錄下執行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vapor build &amp;amp;&amp;amp; vapor run
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;droplet&#34;&gt;Droplet&lt;/h2&gt;
&lt;p&gt;在看到 Vapor 的 icon 之後，不難想像為何其主要的核心物件名稱為 droplet。
在初始時，main.swift 會有基本的 demo code，
我們可以直接在 try drop.setup() 下方加入一些內容。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;drop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣便會在 0.0.0.0:8080/ 時，得到 Hello World!，
而也可以透過路徑來帶入參數，像是 0.0.0.0:8080/name/Archie 的寫法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;drop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;!&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Error retrieving parameters.&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;當連過去時，便會顯示 Hello Archie!。&lt;/p&gt;
&lt;p&gt;Views
Vapor 將 Views 放置在 /Resources/Views 裡頭，並可以使用 drop.view(“檔案名稱”) 的方式回傳畫面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;drop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/view&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;demoView.html&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上便是 Vapor 的一些基本的簡單介紹，有興趣的人可以一起研究研究！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Fastlane - match</title>
        <link>https://www.archie.tw/p/fastlane-match/</link>
        <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/fastlane-match/</guid>
        <description>&lt;h3 id=&#34;fastlane-是什麼&#34;&gt;Fastlane 是什麼？&lt;/h3&gt;
&lt;p&gt;簡單來說，它可以替你解決除了寫程式以外的很多事情；
像是「螢幕截圖」、「打包上傳到 Testflight」、「建立 App Store 的 App 資訊」等等，
尤其是在一個專案（project）擁有多個 target 的時候，
更是只需要一行就可以打包出十幾個 App，並且分別上架到 App Store。
而在這篇文章裡頭，會介紹其中一項功能的部分用法：&lt;/p&gt;
&lt;h3 id=&#34;match&#34;&gt;Match&lt;/h3&gt;
&lt;p&gt;Match 主要負責和 Certificate 相關的處理，這邊所要帶給大家的使用情境是，
一個 iOS 專案同時有需要多人同時開發，我們通常會採取的作法有下列幾種：&lt;/p&gt;
&lt;p&gt;在 Apple Developer Team 之中加入專案各個開發人員使用自己的 Apple ID
在 Apple Developer Team 之中加入專案各個開發人員的公司 Apple ID
提供給專案各個開發人員相對應的 Provisioning Profile
第一種和第二種的做法差不多，但其壞處就是管理者無法有效地管理 Certificate，
所以有可能會時常出現一些奇怪的 App IDs 或是 iOS Provisioning Profile，
或是誰又不小心把誰的 certificate revoke ⋯⋯&lt;/p&gt;
&lt;h3 id=&#34;所以我們需要權限劃分清楚&#34;&gt;所以我們需要權限劃分清楚&lt;/h3&gt;
&lt;p&gt;建議的做法是註冊一組公用的開發者帳號，不和任何人產生連結性&lt;/p&gt;
&lt;p&gt;e.g &lt;a class=&#34;link&#34; href=&#34;mailto:dev@apple.com&#34; &gt;dev@apple.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;只放這組帳號在 Apple Developer Team 裡頭，開發相關的處理皆由這組帳號來負責，
而帳號密碼無需流通到僅負責開發的人員手中；
意思是指，讓單純寫 Code 開發的人員，無須註冊特別的 Apple ID 或是加入哪個 Team，
只需要透過 fastlane match 的方式來獲得 Certificate，可以開發就好！&lt;/p&gt;
&lt;h3 id=&#34;建置流程&#34;&gt;建置流程&lt;/h3&gt;
&lt;p&gt;首先，先建立一個 private 的 repo 用來準備放置 match 的相關內容，
接著到專案的資料夾下，執行 fastlane match init，接著會在資料夾中看到 Matchfile：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git_url &amp;quot;這邊放置你剛剛所建立的 git repo url&amp;quot;

type &amp;quot;development&amp;quot;

app_identifier [&amp;quot;這邊放置你在 App IDs 裡頭新建好的 Bundle Ifentifier&amp;quot;]
username &amp;quot;這邊放置你所要來處理 Certificate 相關的帳號名稱&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;照著上述修改後，執行 fastlane match 後，它便會自動幫你建立好 Certificate 和 Provisioning Profile。
第一次執行的時候，會需要填入一組 passphrase。
（之後其他人要匯入 Certificate 的時候也需要填入相同的密碼）
p.s 如果專案原先就有 certificate ，執行 fastlane match nuke 就可以將它清除掉。
另外，需要將 Signing 的 Automatically manage signing 取消勾選，&lt;/p&gt;
&lt;p&gt;並將 Provisioning Profile 選擇由 match 所建立的 Provisioning Profile。&lt;/p&gt;
&lt;p&gt;這樣便建構完成了！
當之後專案有其他人手需要加入開發的時候，只需要 clone 專案下來，
不用將他的帳號加入到 Apple Developer Team 之中，
只需要執行 fastlane match，便擁有開發的相關憑證和 Provisioning Profile 可以使用～&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Socket</title>
        <link>https://www.archie.tw/p/socket/</link>
        <pubDate>Sat, 15 Jul 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/socket/</guid>
        <description>&lt;p&gt;最近在接觸即時通訊相關的開發內容，撇除使用第三方服務的串接，
大多數都是建議使用 Socket 來和伺服器端進行連接和溝通。
而研究了一下，在 TCP / IP 架構下，sockets 可以分為兩種&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Datagram sockets(connectionless)&lt;/li&gt;
&lt;li&gt;Stream sockets(connection-oriented)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;datagram-socketsconnectionless&#34;&gt;Datagram sockets(connectionless)&lt;/h3&gt;
&lt;p&gt;Datagram sockets 是使用 UDP 封包來進行傳送，
其主要的特色是速度快但不能保證資料的完整性以及次序有可能會有誤；
所以大多是使用在廣播資訊或是傳送一些較不是那麼重要的內容。&lt;/p&gt;
&lt;h3 id=&#34;stream-socketsconnection-oriented&#34;&gt;Stream sockets(connection-oriented)&lt;/h3&gt;
&lt;p&gt;而 Stream sockets 則是使用 TCP 封包來傳遞，
其因為會先需要確認 Server 和 Client 兩者連接狀態後再傳遞，
故速度較慢一些，但至少能確認資料的有序性以及完整度。&lt;/p&gt;
&lt;h3 id=&#34;簡單的總結&#34;&gt;簡單的總結&lt;/h3&gt;
&lt;p&gt;以中華郵政的觀點來看，以結果來區分的話，
我們可以簡略地將 UDP 視為平信、TCP 視為掛號信。
而即時通訊的部分，依照上述的特色來看，就得選擇使用 TCP 的方式來進行溝通。&lt;/p&gt;
&lt;h3 id=&#34;server-和-client-的溝通流程&#34;&gt;Server 和 Client 的溝通流程&lt;/h3&gt;
&lt;p&gt;首先，伺服器端和用戶端兩者必須使用同一類的封包才能互相通訊，
意思便是指 Server 建立了一個 UDP Socket，Client 也必須使用 UDP Socket 才能兩者打通。
而 Socket name 會需要包含 IP、Port、以及使用哪種協定；
當 Client 端的 Socket 成功聯繫上 Server 端的 Socket 時，
這兩者便形成一組 association。&lt;/p&gt;
&lt;h3 id=&#34;ios-上的-socket-實作方式&#34;&gt;iOS 上的 Socket 實作方式&lt;/h3&gt;
&lt;p&gt;我這邊是使用第三方套件的方式來協助實作，Github 上有不少相關的開源碼可以使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;socket.io&lt;/li&gt;
&lt;li&gt;CocoaAsyncSocket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這篇就先以 CocoaAsyncSocket 作為內容主軸來當後面的說明。
比照上方的流程圖，首先我們要先建立一個 socket，再來進行 connect 的動作，
之後相關的 callback，會以 delegate 的方式來做處理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CocoaAsyncSocket&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delegate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GCDAsyncSocketDelegate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?#&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delegateQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?#&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toHost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;onPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// GCDAsyncSocketDelegate&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didConnectToHost&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 連接上後，需要執行 readData 等候 Server 執行 writeData 的動作&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;readData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didRead&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;withTag&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 讀完資料後，還是需要再執行一次 readData，來等候下一次的資料傳輸過來&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;readData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socketDidDisconnect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;withError&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didWriteDataWithTag&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不過這邊要比較注意到的是，會需要主動的執行 readData 的動作，
來告知底層，目前可以讀取傳輸進來的資料。&lt;/p&gt;
&lt;p&gt;在 RxSwift 內的實作方式
讓 socket 的動作和事件是可被訂閱的，參考了一些實作的方式，
讓 CocoaAsyncSocket 和 RxSwift 結合在一塊：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//  RxCocoaAsyncSocket.swift&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//  Created by 家齊 on 2017/7/14.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//  Copyright © 2017年 張家齊. All rights reserved.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Foundation&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RxSwift&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RxCocoa&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CocoaAsyncSocket&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SocketEvent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connected&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disconnected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RxCocoaAsyncSocketDelegateProxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DelegateProxy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fileprivate&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;subject&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PublishSubject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SocketEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fileprivate&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;weak&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;delegate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocketDelegate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
    
    &lt;span class=&#34;kr&#34;&gt;required&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parentObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;AnyObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parentObject&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocket&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;delegate&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delegate&lt;/span&gt;
        &lt;span class=&#34;kc&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parentObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parentObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;deinit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onCompleted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RxCocoaAsyncSocketDelegateProxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocketDelegate&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didConnectToHost&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onNext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;readData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didRead&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;withTag&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;readData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onNext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socketDidDisconnect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;withError&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onNext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;disconnected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didWriteDataWithTag&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RxCocoaAsyncSocketDelegateProxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DelegateProxyType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setCurrentDelegate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delegate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;AnyObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;toObject&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;AnyObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocket&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delegate&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delegate&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocketDelegate&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;currentDelegateFor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;AnyObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;AnyObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocket&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delegate&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Reactive&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCDAsyncSocket&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SocketEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RxCocoaAsyncSocketDelegateProxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;proxyForObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subject&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;connected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;disconnected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]?&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JSONSerialization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]))&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有興趣的人可以參考參考！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>多個帳號的 SSH Config 設定</title>
        <link>https://www.archie.tw/p/%E5%A4%9A%E5%80%8B%E5%B8%B3%E8%99%9F%E7%9A%84-ssh-config-%E8%A8%AD%E5%AE%9A/</link>
        <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E5%A4%9A%E5%80%8B%E5%B8%B3%E8%99%9F%E7%9A%84-ssh-config-%E8%A8%AD%E5%AE%9A/</guid>
        <description>&lt;p&gt;一般的情形下，我們不會太需要去做 config 檔案的設定，
因為其實不太需要建立太多組的 SSH key 來增加管理上的麻煩；
但隨著身份的增加（大多數是因為工作關係），
我們會需要用到其他組 SSH key 來連接 git server。&lt;/p&gt;
&lt;h3 id=&#34;如果公司使用的-git-server是我原本就沒有使用的呢&#34;&gt;如果公司使用的 git server，是我原本就沒有使用的呢？&lt;/h3&gt;
&lt;p&gt;那就沒什麼差了。
就像是我第一份工作，公司所使用的 git server 為 AWS 的 CodeCommit，
而原先我根本就不用使用到那邊的服務，所以建立一組 SSH key 在 AWS 上使用也沒什麼衝突。
且 AWS 上的教學文件，會讓你在 ~/.ssh/config 之中，以 Host 作為區別；
所以它只會在 AWS 上使用你為了 AWS 所建立的 key。&lt;/p&gt;
&lt;h3 id=&#34;但最容易發生的情形就是&#34;&gt;但⋯最容易發生的情形就是：&lt;/h3&gt;
&lt;p&gt;公司也使用 Github 作為組織的 git server
通常我們會有一組自己私人的 Github 帳號，若公司不反對你使用私人帳號加入組織的話，
其實你也就沒什麼差了；
但大多數的情形是會給你一組（或是請你申請一組）公司信箱的 Github 帳號，
來維護 private git repository。&lt;/p&gt;
&lt;h3 id=&#34;public-key&#34;&gt;Public key&lt;/h3&gt;
&lt;p&gt;我們先來看看 ssh 的 public key 裡頭，帶了哪些資訊：
重點便是最後的 &lt;a class=&#34;link&#34; href=&#34;mailto:xpopchi@gmail.com&#34; &gt;xpopchi@gmail.com&lt;/a&gt;。
這把 key 會知道是和哪個信箱綁定在一起的，所以在 Github 上，
公司和私人的帳號便無法共用同一組 SSH key。&lt;/p&gt;
&lt;h3 id=&#34;所以我們得替公司的信箱再建立一組-ssh-key&#34;&gt;所以我們得替公司的信箱再建立一組 SSH key&lt;/h3&gt;
&lt;p&gt;建立的流程可以看 Github 上的文件，不過會需要在建立時，替它取不同的名稱：
e.g Archie_Apple.pub
個人的習慣是在後面加上公司的名稱來做區別。
它都會放置在 ~/.ssh/ 裡頭，我們需要透過編輯 ~/.ssh/config 的方式，
以及 git url 的調整，來做到使用不同的 key 連接同一個 git server。&lt;/p&gt;
&lt;h3 id=&#34;sshconfig-的設定方式&#34;&gt;~/.ssh/config 的設定方式&lt;/h3&gt;
&lt;p&gt;我們透過不同的 Host 命名方式，來定義裡頭要使用的哪一把 key 去做連結：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Host github.com-Apple
HostName github.com
User git
IdentityFile ~/.ssh/Archie_Apple
 
Host github.com
HostName github.com
User git
IdentityFile ~/.ssh/github
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊可以看到，我在 Host 那邊區隔出 github.com-Apple 及 github.com，
意思便代表著當 SSH 的 url，host 為 github.com-Apple 時，
會使用 Archie_Apple 這把 key；
而其他的 github 就照舊使用私人帳號的那把。&lt;/p&gt;
&lt;p&gt;最後，使用的方式
在你原先進行的 url 之中，做一些調整：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;mailto:git@github.com&#34; &gt;git@github.com&lt;/a&gt;:ArchieR7/APNsPusher.git&lt;/p&gt;
&lt;p&gt;這是使用私人帳號的方式，而若要使用 Archie_Apple的話：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;mailto:git@github.com-Apple&#34; &gt;git@github.com-Apple&lt;/a&gt;:ArchieR7/APNsPusher.git&lt;/p&gt;
&lt;p&gt;這樣就能夠使用另一把 key 來進行動作了。
不過最好是在 ~/.ssh/config 之中補上 user.name 和 user.email，
否則之後再進行 commit 時，都會以預設的名稱和信箱作為 commit 的作者。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>print</title>
        <link>https://www.archie.tw/p/print/</link>
        <pubDate>Fri, 07 Jul 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/print/</guid>
        <description>&lt;h2 id=&#34;print&#34;&gt;print&lt;/h2&gt;
&lt;p&gt;在第一次接觸一個沒學過的程式語言時，我們多半可以看到會以「Hello, world!」作為開頭；
而你第一個所使用的 method，也很有可能就是印出東西相關的。
我在這邊寫的是 print，可能在別的語言並不是這個詞，是 printf 或是 console.log() 之類，
但這邊（或是這整個網站XD）就以 Swift 為主。&lt;/p&gt;
&lt;h2 id=&#34;nslog-vs-print&#34;&gt;NSLog v.s print&lt;/h2&gt;
&lt;p&gt;有接觸過 iOS 開發的人，你可能也會看過別人使用 NSLog，而這邊就解釋一下兩者的差異：&lt;/p&gt;
&lt;h3 id=&#34;nslog&#34;&gt;NSLog&lt;/h3&gt;
&lt;p&gt;它是屬於 Fundation 的一個 function：&lt;/p&gt;
&lt;p&gt;會加上 timestamp
會加上 identifier
會印在 device console
會花較多一些些的效能，所以會比較慢一些（因為前兩者）&lt;/p&gt;
&lt;h3 id=&#34;print-1&#34;&gt;print&lt;/h3&gt;
&lt;p&gt;會印在 debugger console
所以，若你只是需要記錄在 debugger console 的話，則建議就使用 print 就好。&lt;/p&gt;
&lt;h2 id=&#34;開始使用&#34;&gt;開始使用&lt;/h2&gt;
&lt;p&gt;為了瞭解程式的執行內容，我們便開始在一些地方加上 print 的功能，像是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a 等於 1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a 不等於 1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣就可以在 debugger console 那看到程式目前是進到哪個判斷式裡頭，
不過他大概就很簡略地顯示&lt;/p&gt;
&lt;p&gt;a 等於 1&lt;/p&gt;
&lt;p&gt;只能透過 print 的訊息來判斷是在哪，發生什麼事；
如果我們只是印出各種 print(error)，就會比較難知道是誰發生了什麼事。&lt;/p&gt;
&lt;p&gt;在輸出時加上檔案名稱及 function 和列數
在 Swift 裡頭，我們可以寫 #file #function #line 來取得相關資訊，並且簡單地分類：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ALogDebug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;#file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;#line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;📒 &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;separatedBy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ALogWarn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;#file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;#line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;⚠️ &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;separatedBy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ALogInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;#file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;#line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ℹ️ &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;separatedBy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ALogError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;#file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;#line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;🚨 &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;separatedBy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我個人習慣分成 Debug、Warn、Info、Error，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debug：為了開發需要看到的資訊&lt;/li&gt;
&lt;li&gt;Warn：不應該執行到的警告，但不會造成 Crash 的程度&lt;/li&gt;
&lt;li&gt;Info：像是網路回傳的資訊內容&lt;/li&gt;
&lt;li&gt;Error：就⋯⋯紀錄 Error 的內容XDD
這樣就可以在 debugger console 看到比較詳細的內容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（我沒有放 function name，有需要的記得要以參數的方式帶上）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Apple Pay</title>
        <link>https://www.archie.tw/p/apple-pay/</link>
        <pubDate>Wed, 05 Jul 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/apple-pay/</guid>
        <description>&lt;h3 id=&#34;apple-pay&#34;&gt;Apple Pay&lt;/h3&gt;
&lt;p&gt;Apple Pay 已經在台灣流通一段時間，第三方支付的相關業者也相接著推出串接的服務；
而撇除串接第三方支付的 SDK， iOS 開發者本身的流程呢？&lt;/p&gt;
&lt;h3 id=&#34;apple-developer-相關設定&#34;&gt;Apple developer 相關設定&lt;/h3&gt;
&lt;p&gt;首先，你需要先到 Apple developer &amp;gt; Identifiers &amp;gt; Merchant IDs 註冊一個 Identifier&lt;/p&gt;
&lt;p&gt;新建完之後，點擊裡頭的 edit，需要補上 CSR 檔；
而如果你只是要測試這個流程，沒有要走到金流相關的測試的話，可以先跳過這段。&lt;/p&gt;
&lt;h3 id=&#34;xcode-相關設定&#34;&gt;Xcode 相關設定&lt;/h3&gt;
&lt;p&gt;接著到你的專案裡頭，打開 Apple Pay 的開關並填入剛剛註冊的 Merchant ID。&lt;/p&gt;
&lt;p&gt;以及 import PassKit，便可以在專案中使用 Apple Pay！&lt;/p&gt;
&lt;h3 id=&#34;流程解釋&#34;&gt;流程解釋&lt;/h3&gt;
&lt;p&gt;使用者按下 Apple Pay 的按鈕後，我們該做的流程為&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立訂單（PKPaymentRequest）&lt;/li&gt;
&lt;li&gt;填寫訂單相關內容&lt;/li&gt;
&lt;li&gt;建立 Apple Pay 的畫面（PKPaymentAuthorizationViewController）&lt;/li&gt;
&lt;li&gt;設定 PKPaymentAuthorizationViewController 的 delegate&lt;/li&gt;
&lt;li&gt;present Apple Pay 的畫面
而訂單相關內容可以填寫寄送相關（ship）以及聯絡人相關（contact）和金額那些基本的。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;applePay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKPaymentRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;merchantIdentifier&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;merchant.tw.archie&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;merchantCapabilities&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;capability3DS&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;countryCode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;US&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currencyCode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;USD&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;supportedNetworks&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;visa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;paymentSummaryItems&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PKPaymentSummaryItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Archie&amp;#39;s shake hand&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;amount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shippingType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;storePickup&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;contact&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKContact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;contact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;emailAddress&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;xpopchi@gmail.com&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PersonNameComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nickname&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Archie&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;contact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;phone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CNPhoneNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stringValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;0912345678&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;contact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;phoneNumber&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;billingContact&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;contact&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;applePayController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKPaymentAuthorizationViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;paymentRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;applePayController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delegate&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;present&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;applePayController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;animated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;completion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;畫面上就會出現 Apple Pay 的 View&lt;/p&gt;
&lt;h3 id=&#34;出現之後&#34;&gt;出現之後⋯⋯&lt;/h3&gt;
&lt;p&gt;我們可以透過 PKPaymentAuthorizationViewControllerDelegate 來做後續的事情：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paymentAuthorizationViewControllerDidFinish&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKPaymentAuthorizationViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paymentAuthorizationViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKPaymentAuthorizationViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didAuthorizePayment&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKPayment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;completion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;escaping&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PKPaymentAuthorizationStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Swift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paymentAuthorizationViewControllerWillAuthorizePayment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKPaymentAuthorizationViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paymentAuthorizationViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKPaymentAuthorizationViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didSelect&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;paymentMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKPaymentMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;completion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;escaping&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PKPaymentSummaryItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paymentAuthorizationViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKPaymentAuthorizationViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didSelect&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shippingMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKShippingMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;completion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;escaping&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PKPaymentAuthorizationStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PKPaymentSummaryItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paymentAuthorizationViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKPaymentAuthorizationViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didSelectShippingContact&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;contact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKContact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;completion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;escaping&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PKPaymentAuthorizationStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PKShippingMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PKPaymentSummaryItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;像是最重要的是，付款完之後的 payment.token 以及 payment 裡頭的相關資訊等，
再來就看專案要做哪些事情了XD&lt;/p&gt;
&lt;h3 id=&#34;最後給設計師&#34;&gt;最後，給設計師&lt;/h3&gt;
&lt;p&gt;Apple Pay 有規範一些它的 style 相關的設計要求，可以看&lt;a class=&#34;link&#34; href=&#34;https://developer.apple.com/ios/human-interface-guidelines/technologies/apple-pay/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;這邊&lt;/a&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>JWT</title>
        <link>https://www.archie.tw/p/jwt/</link>
        <pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/jwt/</guid>
        <description>&lt;h1 id=&#34;jwt&#34;&gt;JWT&lt;/h1&gt;
&lt;p&gt;JWT（ JSON Web Token）和 iOS 比較有相關聯的地方，
便是在於 APNs p8 是使用 JWT 格式作為傳遞；
而有關於 JWT 的相關資料，可以參考 &lt;a class=&#34;link&#34; href=&#34;https://jwt.io/introduction/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;這個網站&lt;/a&gt;。
以之前所提到的 &lt;a class=&#34;link&#34; href=&#34;https://www.archie.tw/apns&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;APNs&lt;/a&gt; 來說，是由三個部分所組成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Header&lt;/li&gt;
&lt;li&gt;Payload&lt;/li&gt;
&lt;li&gt;Verify signature&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;header&#34;&gt;Header&lt;/h2&gt;
&lt;p&gt;在 APNs 裡頭，需要包含這兩者&lt;/p&gt;
&lt;p&gt;alg：所使用的加密方式（algorithm），p8 是使用 ES256 作為加密方式
kid：鑰匙的 ID（key identifier）
例如：
alg: ES256
kid: 12345678&lt;/p&gt;
&lt;h2 id=&#34;payload&#34;&gt;Payload&lt;/h2&gt;
&lt;p&gt;iss：所發送的人（issuer），這邊為開發者的 Team ID
iat：所發送的時間（issued at）&lt;/p&gt;
&lt;h2 id=&#34;verify-signature&#34;&gt;Verify signature&lt;/h2&gt;
&lt;p&gt;這邊便是將上述兩者，分別做 base 64 加密後輸出成字串，再加上 p8 的 key，
一起做 ES256 加密後的結果，所以大概長這樣：
{header base 64 encode}.{payload base 64 encode}.{ES256 hash[(header base 64 encode).(payload base 64 encode),key]}&lt;/p&gt;
&lt;h3 id=&#34;swift-版本的-apns&#34;&gt;Swift 版本的 APNs&lt;/h3&gt;
&lt;p&gt;這幾天便是在研究如何在 Swift 中，實做推播的功能，目前卡在內建的加密方式是 HMAC 的為主，
並沒有 ECDSA p-256 的方式（ES256 = ECDSA p-256 加上 SHA 256），
故加密那段仍未能完成。&lt;/p&gt;
&lt;h3 id=&#34;徵求&#34;&gt;徵求&lt;/h3&gt;
&lt;p&gt;對 ES256 有研究的大大，分享一下如何在 Swift 上實作 ES256 加密！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Wifi 密碼 – 共享密碼的平台</title>
        <link>https://www.archie.tw/p/wifi-%E5%AF%86%E7%A2%BC-%E5%85%B1%E4%BA%AB%E5%AF%86%E7%A2%BC%E7%9A%84%E5%B9%B3%E5%8F%B0/</link>
        <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/wifi-%E5%AF%86%E7%A2%BC-%E5%85%B1%E4%BA%AB%E5%AF%86%E7%A2%BC%E7%9A%84%E5%B9%B3%E5%8F%B0/</guid>
        <description>&lt;p&gt;上週利用一些閒暇時間，串接一些服務寫了這個簡單的小工具，
主要為了解決每次到一間新的店家時，都得先找找 Wifi 的資訊：
找店員問、找菜單上有沒有寫、找牆壁有沒有貼⋯⋯
於是乎想找一個地方，把我所知道的 Wifi 帳號及密碼記下來，
儘管只要連線過一次，就不會再詢問了，但至少下次人家問我的時候可以告訴他。&lt;/p&gt;
&lt;h3 id=&#34;使用流程&#34;&gt;使用流程&lt;/h3&gt;
&lt;p&gt;打開 Wifi 密碼 – 共享密碼的平台 後，會需要使用 Facebook 做登入的動作，
其主要原因是，裡頭的資訊是由全部使用者共同維護的（共筆的概念），
所以其實會紀錄是哪個使用者新增 Wifi 資訊，但並不會顯示出來。
為了讓使用者承擔一點點微薄的責任，來讓大家都可以比較信任 Wifi 裡頭的資訊可信度，
便加入的登入的系統。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://i0.wp.com/a4.mzstatic.com/us/r30/Purple117/v4/36/68/07/3668075d-1735-c23f-1651-2b2056bf3ef6/screen696x696.jpeg?resize=392%2C696&#34; &gt;
		&lt;img src=&#34;https://i0.wp.com/a4.mzstatic.com/us/r30/Purple117/v4/36/68/07/3668075d-1735-c23f-1651-2b2056bf3ef6/screen696x696.jpeg?resize=392%2C696&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;登入畫面&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;登入畫面&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接著我們會看到主畫面：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://i0.wp.com/a4.mzstatic.com/us/r30/Purple127/v4/3f/19/33/3f193350-748a-44cc-a94d-fad154dea76c/screen696x696.jpeg?resize=392%2C696&#34; &gt;
		&lt;img src=&#34;https://i0.wp.com/a4.mzstatic.com/us/r30/Purple127/v4/3f/19/33/3f193350-748a-44cc-a94d-fad154dea76c/screen696x696.jpeg?resize=392%2C696&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Wifi 列表&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Wifi 列表&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到目前共筆上，有哪些 Wifi 的資訊：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名稱&lt;/li&gt;
&lt;li&gt;地點&lt;/li&gt;
&lt;li&gt;狀態&lt;/li&gt;
&lt;li&gt;最後更新時間
點擊進去之後，有可能會跳出 &lt;a class=&#34;link&#34; href=&#34;../admob-%e7%8d%8e%e5%8b%b5%e5%bc%8f%e5%bb%a3%e5%91%8a%e5%af%a6%e4%bd%9c&#34; &gt;AdMob 的獎勵型影片廣告&lt;/a&gt;，可以點擊連結看看當初實作的流程。
看完廣告之後才能進到內容頁面，來觀看 Wifi 密碼。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;舉報無效&#34;&gt;舉報無效&lt;/h3&gt;
&lt;p&gt;下方有個按鈕可以點選，便可以更改此 Wifi 資訊的狀態為「不可用」，
而目前版本會在前面的列表之中就直接篩選掉，所以並不會看到不可用的內容。
若是有人一直將你家的 Wifi 貼上來，你一直舉報也無法遏止這行為的話，請麻煩告知我⋯⋯&lt;/p&gt;
&lt;h3 id=&#34;實作方向--登入&#34;&gt;實作方向 – 登入&lt;/h3&gt;
&lt;p&gt;臉書的登入參照 Facebook Developer 的相關文件，先建立一個 Facebook 的應用程式；
以及利用 Firebase 的 Auth，裡頭有和 Facebook 結合的文件可以依循著做。&lt;/p&gt;
&lt;h3 id=&#34;資料庫&#34;&gt;資料庫&lt;/h3&gt;
&lt;p&gt;這邊是繼續使用 Firebase 上的 Database，它是 NoSQL 的架構，並且可以在 rules 上設計相關規則；
目前我只有使用 .indexOn 和判斷 Auth 是否合法，來決定資料庫的讀寫權限。&lt;/p&gt;
&lt;p&gt;###使用到的 Framework&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firebase&lt;/li&gt;
&lt;li&gt;RxSwift&lt;/li&gt;
&lt;li&gt;RxCocoa&lt;/li&gt;
&lt;li&gt;ReachabilitySwift&lt;/li&gt;
&lt;li&gt;MapKit&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;下載連結&#34;&gt;下載連結&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://appsto.re/tw/cHvLkb.i&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wifi 密碼 – 共享密碼的平台&lt;/a&gt;
有興趣的大大，可以下載下來玩玩！
目前裡頭資訊還很少，大多數是我從自己 MacBook 裡頭的 Wifi 資訊貼上去的；
希望藉由大家的共享來充實這方面的資訊。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>APNs</title>
        <link>https://www.archie.tw/p/apns/</link>
        <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/apns/</guid>
        <description>&lt;h3 id=&#34;apns-apple-push-notification-service&#34;&gt;APNs（ Apple Push Notification service）&lt;/h3&gt;
&lt;p&gt;相信有在開發 iOS app 的開發者，對於這個詞應該都不會太陌生；
簡單來說，它就是推播的功能。
而推播其實有分成兩種：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local notification&lt;/li&gt;
&lt;li&gt;Remote notification
這兩者的差異就如同名字的一般，前者是本地的通知，後者為遠端的通知。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;local-notification&#34;&gt;Local notification&lt;/h3&gt;
&lt;p&gt;本地推播在 iOS 10 以後，可以參考 UserNotifications 這個 framework。
這邊附上以區域範圍為觸發條件的推播寫法：
&lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/ArchieR7/85ee0a2d8cdd652d78d6c08eebfd0fae&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gist.github.com/ArchieR7/85ee0a2d8cdd652d78d6c08eebfd0fae&lt;/a&gt;
而鬧鐘那種概念的，或是遊戲提醒（例如遊戲的愛心已經回滿了，趕快回來玩哦！），
這種以時間作為觸發條件的，則是設定 notification.fireDate，給它一個 Date 便會在那時候觸發。&lt;/p&gt;
&lt;h3 id=&#34;remote-notification&#34;&gt;Remote notification&lt;/h3&gt;
&lt;p&gt;遠端的推播則是如同聊天軟體常常收到的那種推播（ＯＯＯ傳送貼圖給您！），
在 AppDelegate.swift 註冊那些的就不寫在這了～
如果是在公司上班或者和後端合作，寫完註冊推播及回傳 deviceToken 和收到之後要幹嘛的動作，
通常就不會碰到「該如何打推播給 App」的問題，因為 iOS 只需要知道收到該怎辦XD
但總會有需要自己打推播測試、或是開發自己 app  的時候，
這邊就來談談 iOS 開發者該怎麼做！&lt;/p&gt;
&lt;h3 id=&#34;apns-key&#34;&gt;APNs key&lt;/h3&gt;
&lt;p&gt;以往我們在產生 APNs key 的時候，是會得到一組有期限的 .p12 檔案，
其中不同的 bundle identifier 會配對到不同的 .p12 檔案；
這是一件蠻麻煩的事情，我們需要管理不同 App 的 APNs key，
上架 20 個有推播功能的 app，就需要維護 20 組 .p12 檔案。&lt;/p&gt;
&lt;h3 id=&#34;有沒有比較方便的做法&#34;&gt;有沒有比較方便的做法？&lt;/h3&gt;
&lt;p&gt;答案是，有！
如果你是看完這篇文章，才開始接觸推播的話，
那你應該已經找不太到 .p12 要去哪裡產生了！
前陣子是 .p12 和新的 .p8 同時共存在 Apple Developer 的頁面，
而目前畫面則長這個樣子：&lt;/p&gt;
&lt;p&gt;在產生 keys 的頁面，我們可以看到只剩下「One key is used for all of your apps.」這種的（.p8），
也就是說，只需要一把 key 便可以打給你所有開發的 app，且它並不會過期！
產生完 key 之後，只有在當下可以下載 .p8 的檔案；
若你當下沒下載，就按完成的話，之後點開則會發現 Download 的按鈕是灰色不可按的，
所以需要好好保存，別把它搞丟了，否則只能夠重新產生一把新的來替換。&lt;/p&gt;
&lt;h3 id=&#34;接下來&#34;&gt;接下來？&lt;/h3&gt;
&lt;p&gt;有了 .p8 檔案之後，我是用 Python 來實作打推播的動作，附上我的檔案&lt;/p&gt;
&lt;p&gt;apns_key_id = xxxxxxxxxx（你剛剛下載下來的 .p8 檔名）
apns_key_name = ‘AuthKey_xxxxxxxxxx.p8’
team_id = 你的 developer team id
bundle_id = 推播要送到哪個 bundle id&lt;/p&gt;
&lt;h3 id=&#34;建置-python-環境&#34;&gt;建置 Python 環境&lt;/h3&gt;
&lt;p&gt;這邊會需要安裝一些 python 的套件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cryptography&lt;/li&gt;
&lt;li&gt;pyjwt&lt;/li&gt;
&lt;li&gt;hyper
可以下載 requirements.txt 放到和 .p8 及剛剛 .py 的同個資料夾，並執行
pip install -r requirements.txt
便會將所需要的套件下載安裝；
如果沒有安裝 pip⋯⋯建議可以自行先去 Google 一下XDD&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;萬事俱備後&#34;&gt;萬事俱備後&lt;/h3&gt;
&lt;p&gt;把上述的檔案更改好後，和 .p8 放到同一個資料夾，接著開啟 terminal 執行 python。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;apns&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ApnsPusher&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ApnsPusher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Test Title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Test Body&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;device token&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Test Title：推播的標題
Test Body：推播的內容
device token：要收到推播的裝置 token
False：我最後一個參數是來控制要打給 production server 還是 development server
Python 和 Swift 看起來有點類似，所以應該不難看懂 APNs.py 是在幹嘛～
有問題可以留言給我，或是留在 gist 上！&lt;/p&gt;
&lt;h3 id=&#34;更新&#34;&gt;更新：&lt;/h3&gt;
&lt;p&gt;我將文中內的內容整理至 &lt;a class=&#34;link&#34; href=&#34;https://github.com/ArchieR7/APNsPusher&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github&lt;/a&gt; 上，有興趣的人也可以直接去那 clone 下來研究。&lt;/p&gt;
&lt;h3 id=&#34;最後&#34;&gt;最後&lt;/h3&gt;
&lt;p&gt;如果這篇文章對你有一點點幫助的話，可以幫我點個廣告來維持這網站的伺服器月費，
或是在相關的 gist 上給個 Star 鼓勵鼓勵！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AdMob 獎勵式廣告實作</title>
        <link>https://www.archie.tw/p/admob-%E7%8D%8E%E5%8B%B5%E5%BC%8F%E5%BB%A3%E5%91%8A%E5%AF%A6%E4%BD%9C/</link>
        <pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/admob-%E7%8D%8E%E5%8B%B5%E5%BC%8F%E5%BB%A3%E5%91%8A%E5%AF%A6%E4%BD%9C/</guid>
        <description>&lt;h3 id=&#34;admob&#34;&gt;AdMob&lt;/h3&gt;
&lt;p&gt;在 Google 的廣告投放服務之中，是以 AdSense 作為主軸，整合所有廣告相關的服務；
而 AdMob 則是其中一個專門針對行動裝置的部分。
所以若 iOS 的開發者想在其應用上放置廣告單元，則需要從 AdMob 著手。&lt;/p&gt;
&lt;h3 id=&#34;建立廣告單元&#34;&gt;建立廣告單元&lt;/h3&gt;
&lt;p&gt;首先，需要先到 AdMob 的控制台中，新建一個新的應用程式，
並將 app 的相關資訊填寫完整。&lt;/p&gt;
&lt;p&gt;再者，則是建立一個廣告單元，而這篇所要分享的是「獎勵式廣告」的實作。&lt;/p&gt;
&lt;h3 id=&#34;什麼是獎勵式廣告&#34;&gt;什麼是獎勵式廣告？&lt;/h3&gt;
&lt;p&gt;獎勵式廣告的意思就如其名，是一個可以在編輯時設定，
反饋給觀看玩廣告的使用者一些獎勵的一種廣告模式；
如大部分的手機遊戲，觀看影片後可以得到一些鑽石、金幣或者特殊加成等。&lt;/p&gt;
&lt;h3 id=&#34;設定廣告獎勵&#34;&gt;設定廣告獎勵&lt;/h3&gt;
&lt;p&gt;我們可以在這個畫面中，去設定使用者觀看頻率的限制以及獎勵數量。&lt;/p&gt;
&lt;p&gt;而在後面程式實作的時候，會講解這邊設定會影響到什麼。&lt;/p&gt;
&lt;h3 id=&#34;framework-安裝&#34;&gt;Framework 安裝&lt;/h3&gt;
&lt;p&gt;你可以透過 CocoaPods 或是直接下載拉進專案之中；
這邊由於我所加入廣告的 App 有整合 Firebase 的相關服務，
而 Firebase 官方並無支援 Carthage，所以在這就一併使用 CocoaPods 來做套件的管理。
因為使用 Firebase，所以只需要在原先的 Podfile 之中加上&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;pod&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Firebase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AdMob&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;並且執行 pod install，即可完成安裝。&lt;/p&gt;
&lt;h3 id=&#34;appdelegateswift&#34;&gt;AppDelegate.swift&lt;/h3&gt;
&lt;p&gt;先在上方 import GoogleMobileAds，並需要在 FirebaseApp.configure() 之後，加上 AdMob 的廣告設定：
GADMobileAds.configure(withApplicationID: Your_Ads_ApplicationID)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Firebase&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;GoogleMobileAds&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didFinishLaunchingWithOptions&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;launchOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UIApplicationLaunchOptionsKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]?)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;FirebaseApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;GADMobileAds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withApplicationID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Your_Ads_ApplicationID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣便可以在一開啟 app 時，和 AdMob 做連結。&lt;/p&gt;
&lt;p&gt;獎勵式廣告的流程
獎勵式廣告和一般掛在下方的簽入式廣告不同，它的流程為
一、先和 AdMob 發送獎勵式廣告的 request&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;loadAdMob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;GADRewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sharedInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delegate&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GADRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;GADRewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sharedInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;withAdUnitID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AdUnitID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二、主動式地去詢問 AdMob 的獎勵式廣告是否就緒；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GADRewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sharedInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isReady&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;GADRewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sharedInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;present&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fromRootViewController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//do something&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三、影片完整備看完後，它會以 delegate 的方式告知你剛剛投放的獎勵式廣告，其相關內容設定&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GADRewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didRewardUserWith&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GADAdReward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//give user reward&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GADRewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;didFailToLoadWithError&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Reward based video ad failed to load: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;localizedDescription&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rewardBasedVideoAdDidReceive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GADRewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Reward based video ad is received.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rewardBasedVideoAdDidOpen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GADRewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Opened reward based video ad.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rewardBasedVideoAdDidStartPlaying&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GADRewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Reward based video ad started playing.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rewardBasedVideoAdDidClose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GADRewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Reward based video ad is closed.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rewardBasedVideoAdWillLeaveApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GADRewardBasedVideoAd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Reward based video ad will leave application.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;大致上的流程就是這樣，接著回到前面所說的設定；
若你有限制使用者觀看的頻率，在觀看完後的限制時間內，會在步驟二的地方得到 false，
所以在流程上需要稍作注意。
而獎勵數量則是會在廣告結束後的 delegate 之中，以 reward 這個物件回傳回來，
它底下會有 amount 這個的參數，便是剛剛所設定的獎勵數量。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>淺談 Android 的逆向工程</title>
        <link>https://www.archie.tw/p/%E6%B7%BA%E8%AB%87-android-%E7%9A%84%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</link>
        <pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E6%B7%BA%E8%AB%87-android-%E7%9A%84%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</guid>
        <description>&lt;h3 id=&#34;android&#34;&gt;Android？&lt;/h3&gt;
&lt;p&gt;是的，這篇正是要寫有關於 Android 的逆向工程，儘管這也很可能是本站唯一一篇XD&lt;/p&gt;
&lt;h3 id=&#34;起因&#34;&gt;起因&lt;/h3&gt;
&lt;p&gt;看到放在「Hack」的分類上，便可以得知，是因為想要修改遊戲參數而開始涉略⋯⋯
提到 Android 的遊戲開發方式，我們可以簡單地分為兩種類型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以 Java 開發&lt;/li&gt;
&lt;li&gt;以 Unity 開發
這篇主要會以 Java 開發的遊戲作為內容分享（因為我想改的遊戲是此類型XD）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先說結論
我目前還沒有修改成功，因為這款遊戲有對 apk 進行混淆的動作⋯⋯&lt;/p&gt;
&lt;p&gt;以至於一時之間無法找到我需要的參數來做修改⋯⋯
不過，就先記錄一下如何走到看得到程式碼這一步！&lt;/p&gt;
&lt;p&gt;使用到的工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apk tool&lt;/li&gt;
&lt;li&gt;dex2jar&lt;/li&gt;
&lt;li&gt;jd-gui&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;apk-tool&#34;&gt;Apk tool&lt;/h3&gt;
&lt;p&gt;apk tool 主要負責將 .apk 拆開來，在反編譯之後，可以看到一堆 .smali 及 resource 的相關檔案，
也是負責將修改完的檔案重新包回 apk 的工具。
而由於我沒有修改任何 Code，所以只有解出 .smali 和 resource，看看裡頭有什麼東西和圖片影音檔而已。&lt;/p&gt;
&lt;h3 id=&#34;dex2jar-和-jd-gui&#34;&gt;dex2jar 和 jd-gui&lt;/h3&gt;
&lt;p&gt;dex2jar 的功用在於將 .apk 轉成 .jar，配合 jd-gui 打開 .jar 來探究其 source code 內容是什麼。&lt;/p&gt;
&lt;h3 id=&#34;流程總結&#34;&gt;流程總結&lt;/h3&gt;
&lt;p&gt;配合上述的三個工具，大概的流程應該是先以 dex2jar 和 jd.gui 來研究程式碼，
並使用 apk tool 拆開 .apk 後修改 .smali，最後重新打包成一個 .apk 安裝到模擬器或手機之中。
因為和 Android 不熟，所以只能進展到這邊就停下腳步⋯⋯
希望有經驗的高手們能夠給予一些協助及引導！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>開發人員與 UI / UX 設計師之間的合作模式</title>
        <link>https://www.archie.tw/p/%E9%96%8B%E7%99%BC%E4%BA%BA%E5%93%A1%E8%88%87-ui-/-ux-%E8%A8%AD%E8%A8%88%E5%B8%AB%E4%B9%8B%E9%96%93%E7%9A%84%E5%90%88%E4%BD%9C%E6%A8%A1%E5%BC%8F/</link>
        <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E9%96%8B%E7%99%BC%E4%BA%BA%E5%93%A1%E8%88%87-ui-/-ux-%E8%A8%AD%E8%A8%88%E5%B8%AB%E4%B9%8B%E9%96%93%E7%9A%84%E5%90%88%E4%BD%9C%E6%A8%A1%E5%BC%8F/</guid>
        <description>&lt;h3 id=&#34;ui--ux-設計師&#34;&gt;UI / UX 設計師&lt;/h3&gt;
&lt;p&gt;在工作了一段時間後，陸續接觸了幾位不同的 UI / UX 設計師，
而每個人做事的方法都有所差異，在這邊簡單地列出幾個想法。&lt;/p&gt;
&lt;h3 id=&#34;設計師所使用的工具&#34;&gt;設計師所使用的工具&lt;/h3&gt;
&lt;p&gt;在 UX 設計師裏頭，有配合過使用 Axure、Adobe Xd、或是用 Sketch 直接和 UI 一起出的。
而在 Sketch 的模式下，它裡頭有個詞叫做「symbol」，其意義和 iOS 裡頭的 UIView 相關物件相同。&lt;/p&gt;
&lt;h3 id=&#34;物件的概念&#34;&gt;物件的概念&lt;/h3&gt;
&lt;p&gt;Sketch 提供了 Symbol 的建立，讓使用者在設計時，能夠把一些重複使用到的元件，做成一個 symbol，
而它會自動定義這個 symbol 哪些值是可以被異動的：&lt;/p&gt;
&lt;p&gt;如同上方寫的「中華電信」，便是可被異動的值，但更改這個字串並不會影響整體的外觀。&lt;/p&gt;
&lt;h3 id=&#34;以-ios-developer-來說&#34;&gt;以 iOS developer 來說&lt;/h3&gt;
&lt;p&gt;設計師可以了解到，UINavigationBar 的樣貌大概是長這樣，並明白 UIBarButtonItem 能夠控制的外觀欄位有哪些，像是這邊顯示的 Edit 字串。
而設計師也可以自行建構 symbol，來增加重複使用的便利性；這點也如同我們在開發 App 一樣，
會建立一些較容易重複使用到的 UIView 來呈現畫面。
設計師可以更明確地定義物件哪些欄位是會怎麼變動的，像是一個「客製化的按鈕」，
可以先明白它的背景色可能會在其他頁面做換色、或是字體會更改，
這都可以讓開發人員在一開始設計這個按鈕時，都考慮進去來增加彈性。&lt;/p&gt;
&lt;h3 id=&#34;維持一致性&#34;&gt;維持一致性&lt;/h3&gt;
&lt;p&gt;symbol 的概念，可以維持整個專案的外觀一致性；
也就是說當設計師需要調整剛剛所說的「客製化按鈕」，
想把圓角從 5 pixel 改為 10 pixel，便只需要更改 symbol 即可，
不需要再到各個使用到相同外觀的按鈕，都去一一調整為 10 pixel；
developer 也一樣，只需要更改其類別即可，省去重複定義的時間。
也可降低設計師和開發人員之間的溝通成本，讓彼此能夠更專注地做好自己的工作。&lt;/p&gt;
&lt;h3 id=&#34;接下來呢&#34;&gt;接下來呢？&lt;/h3&gt;
&lt;p&gt;照著上述的做法，我們已經可以較清楚地和設計師們以一致的用詞溝通元件：
設計師：「在登入畫面的圓形按鈕，背景色要用藍色」
：「等等⋯⋯你說的藍，是什麼藍？」
我們可以理解圓形按鈕是之前所建構的 CircleButton（舉例），但顏色呢？
「就 157AFB 啊～」
這絕對不是一個友善的方式啊⋯⋯
在設計稿中可能會出現的顏色，建議的做法是請設計師都幫它們取個名稱，
並使用一個 structure 來宣告這些顏色。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UIKit&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UISetting&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;blue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;colorLiteralRed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;122&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;251&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣我們便可以很輕鬆地讓這句話和程式產生連結
「在登入畫面的圓形按鈕，背景色要用藍色」&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setUpView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;loginButton&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CircleButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;loginButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundColor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UISetting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blue&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只需要一開始多花一些心思，定義一下彼此之間的「用詞」，
出份規格表
xxx app –
blue = #157AFB
white = #FFFFFF
要溝通或者調整的時候，就可以省下許多時間了！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Unit test with async functions</title>
        <link>https://www.archie.tw/p/unit-test-with-async-functions/</link>
        <pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/unit-test-with-async-functions/</guid>
        <description>&lt;h3 id=&#34;ios-unit-test&#34;&gt;iOS Unit test&lt;/h3&gt;
&lt;p&gt;在寫 Unit test 的時候，有時候會遇到要測試的 function 是 async 的，
但在 Unit test 的 function 之中，它本身就是走單一 thread 來決定測試結果；
若沒有多做其他處理，closure 或是其他 thread 做的事情，便不會反應到結果上。
所以我們需要告知 Unit test，要等待一下我們要測的內容。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testAsyncFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;expectation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Async Expectation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;NetworkManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;completeHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fulfill&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;waitForExpectations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;建立一個 expectation，並在 closure 裏頭執行一些測試結果判斷，
判斷完後，補上 exp.fulfill() 來告知 waitForExpectations 可以結束等待。
這樣就可以做 async functions 的 Unit test 了！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>dismiss function</title>
        <link>https://www.archie.tw/p/dismiss-function/</link>
        <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/dismiss-function/</guid>
        <description>&lt;h3 id=&#34;dismissanimatedcompletion&#34;&gt;dismiss(animated:completion:)&lt;/h3&gt;
&lt;p&gt;這個 method 對於大家而言，應該都不陌生；
UIViewController 可以呼叫這個 method 來關閉，而它所關閉的概念如下：
UINavigationController&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UIViewController1&lt;/li&gt;
&lt;li&gt;UIViewController2&lt;/li&gt;
&lt;li&gt;UIViewController3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不論現在 presentingViewController 是 UIViewController 1、2、或者是 3，
在這三者呼叫 dismiss(animated:completion:) 時，
都會把 UINavigationController 的所有 viewControllers 都 dismiss。
然而一個很常的使用方式是，我們會在 UIViewController 的物件之中，自行呼叫 dismiss：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;dismiss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;animated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;completion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不過這麼做的話，執行 present(, animated: , completion: ) 的 UIViewController，
就不會知道是在哪個流程或是哪個畫面 dismiss 的。
比較好的做法是，會被 present 的 UIViewController 都能透過 delegate 的方式，
告知原本的 UIViewController 「我按下了什麼按鈕」，
再由前面的 UIViewController 來決定是否 dismiss 或是做其他事。&lt;/p&gt;
&lt;p&gt;讓整體的流程能夠得到比較好的控制，也讓 UIViewController 彼此之間的關係有個清楚的釐清。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>網域相關設定</title>
        <link>https://www.archie.tw/p/%E7%B6%B2%E5%9F%9F%E7%9B%B8%E9%97%9C%E8%A8%AD%E5%AE%9A/</link>
        <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E7%B6%B2%E5%9F%9F%E7%9B%B8%E9%97%9C%E8%A8%AD%E5%AE%9A/</guid>
        <description>&lt;p&gt;昨天，終於在 PChome 購買到 &lt;a class=&#34;link&#34; href=&#34;http://www.Archie.tw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.Archie.tw&lt;/a&gt;
來和大家分享一下這段經歷。
首先，從要建設這個網站的時候，就已經打算購買 Archie.tw 的網域名稱；
一來，讓人方便和我本身聯想在一塊，
二來，是為了解決這個問題：&lt;/p&gt;
&lt;p&gt;通常在 Organization Identifier 會建議填上倒裝的網址，如 com.facebook、com.google 之類的，
而我之前私人所寫的 App，多半是隨便打⋯⋯（因為那時候沒有一個依循的地方）。&lt;/p&gt;
&lt;p&gt;不過，當初在 PChome 要點購買時，發現其實這是有人註冊走的⋯⋯
但還好，它的期限剛好最近會到期（2017-05-12）。
想當然耳，我便是在等到 5 月 12 日時，馬上前往去註冊，深怕自己錯過！
只是上頭的文字依舊是 2017-05-12 過期，並且還是之前那個人的相關資訊，
意思就是說其實網域是還沒被釋放出來的⋯⋯&lt;/p&gt;
&lt;p&gt;於是便去查詢了相關的資訊，原來網域到期後，會有一段贖回期和釋放期，
原先註冊的人可以在那段時間贖回其網域；
以 .tw 來說，贖回期為 30 天、刪除期為 3 天，
於是乎 2017-05-12 到期的這個網域，其實我得等到 33 天後的 2017-06-14 才能註冊。&lt;/p&gt;
&lt;p&gt;而就在昨日（2017-06-14）中午時，再更新一次購買的網頁，便發現可以註冊了！
費用為 800 元 / 一年，透過線上刷卡的方式解決了這一個多月來的網域問題！
等付款過後的一、兩個小時內，便可以設定 DNS，將原先 vultr 上的 IP 設定進去，
就可以透過 Archie.tw 連到 vultr 的機器了～&lt;/p&gt;
&lt;p&gt;另外，vultr 以及 WordPress 都需要做相關的設定，將原先顯示 IP 的地方，
都更改為剛剛獲得的網域名稱，並順道設定 https 的問題。&lt;/p&gt;
&lt;h3 id=&#34;ssl-憑證相關流程&#34;&gt;SSL 憑證相關流程&lt;/h3&gt;
&lt;p&gt;我是到 SSL for free 去申請，並按照其流程取得 .crt 和 .key，
然後使用 vultr 建置 WordPress 時，它會自行在 /etc/nginx/ssl 中建立預設的 server.crt 及 server.key，
個人的做法是將 SSL for free 取得的 .crt 和 .key 重新命名為 server.crt 和 server.key，&lt;/p&gt;
&lt;p&gt;並透過 FileZilla 來替換掉原本的檔案，並在 vultr 上重新啟動 server 便解決了 SSL 的憑證問題！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>KVOController</title>
        <link>https://www.archie.tw/p/kvocontroller/</link>
        <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/kvocontroller/</guid>
        <description>&lt;h3 id=&#34;kvocontroller&#34;&gt;KVOController&lt;/h3&gt;
&lt;p&gt;有關 Observe 的相關做法，在 Swift 上我會選擇使用 RxSwift，那 Objective-C 呢？
在這邊簡單介紹一下 KVOController 的 solution 給 Objective-C 的開發者。
在 NSObject 的子類別下，都會繼承到一個 FBKVOController 的物件，名字為 KVOController；
而這邊要使用的 method 是這個：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objective-C&#34; data-lang=&#34;objective-C&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;observe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nullable&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;keyPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keyPath&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSKeyValueObservingOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FBKVONotificationBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;object 是我們要觀察的物件
keyPath 是 object 底下的要觀察的值，它的名稱（key）
options 則是填入 NSKeyValueObservingOptions
block 再來決定當 object 的 keyPath 那物件有更動時，要做些什麼事&lt;/p&gt;
&lt;h3 id=&#34;舉個例子&#34;&gt;舉個例子&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objective-C&#34; data-lang=&#34;objective-C&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KVOController&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;observe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;
                            &lt;span class=&#34;nl&#34;&gt;keyPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSStringFromSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;@selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;observeObjectName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                            &lt;span class=&#34;nl&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSKeyValueObservingOptionInitial&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSKeyValueObservingOptionNew&lt;/span&gt;
                              &lt;span class=&#34;nl&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;id&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;_Nullable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;observer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Nonnull&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSDictionary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Nonnull&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;change&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                            &lt;span class=&#34;c1&#34;&gt;//do something
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;observe:self&lt;/li&gt;
&lt;li&gt;keyPath:NSStringFromSelector(@selector(observeObjectName))&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;翻成白話文就是 self 去觀察 self.observeObjectName 的 value 變化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block 裡頭的 observer = 觀察的物件，object 則是被觀察的物件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在這個例子之中，observer 剛好和 object 是同一個物件（self），
而我們可以在 //do something 裡頭寫些東西，像是當 observeObjectName 有值更動時，畫面上 UILabel 的 text 會跟著改變之類的。&lt;/p&gt;
&lt;h3 id=&#34;不過這邊要注意兩點&#34;&gt;不過這邊要注意兩點&lt;/h3&gt;
&lt;p&gt;KVOController 不像 RxCocoa 一樣，有提供 observe UIKit 物件的功能。
readonly 的物件，因為 observe 為監聽 set 的動作，若是直接使用 _observeObjectName = @””; 的方式，則不會被監聽到。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Optional</title>
        <link>https://www.archie.tw/p/optional/</link>
        <pubDate>Tue, 23 May 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/optional/</guid>
        <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;Optional 正如其名，就是個可選擇或者說是可有可無的意思。&lt;/p&gt;
&lt;h3 id=&#34;optional&#34;&gt;Optional&lt;/h3&gt;
&lt;p&gt;在 Swift 的開發過程之中，我們可以看到「 ! 」、「 ? 」存在於變數之後，像是  var userName: String? 正式意味著 userName 這個 String 有可能是 nil。
有關 Swift optional 的解釋和 nil 對於 Swift 的介紹可以看看這篇，由小草哥所攥寫的文章。
這邊要補充的是，在 Objective-C 裏頭，則是使用 nonnull 和 nullable 來代表著 Swift 裡頭的「 ! 」、「 ? 」。
而在 Objective-C 之中，可以使用 NS_ASSUME_NONNULL_BEGIN 及 NS_ASSUME_NONNULL_END 來作為區域性的宣告 @property 的屬性為 nonnull；若其中有需要宣告成 nullable 的，則再補上即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objective-C&#34; data-lang=&#34;objective-C&#34;&gt;&lt;span class=&#34;n&#34;&gt;NS_ASSUME_NONNULL_BEGIN&lt;/span&gt;
  
&lt;span class=&#34;k&#34;&gt;@interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DemoObject&lt;/span&gt; : &lt;span class=&#34;nc&#34;&gt;NSObject&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;@property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;nonatomic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;@property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;nonatomic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nullable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;@property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;nonatomic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;phoneNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;@end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;NS_ASSUME_NONNULL_END&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>七天學會設計模式 - Facade</title>
        <link>https://www.archie.tw/p/%E4%B8%83%E5%A4%A9%E5%AD%B8%E6%9C%83%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-facade/</link>
        <pubDate>Tue, 09 May 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E4%B8%83%E5%A4%A9%E5%AD%B8%E6%9C%83%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-facade/</guid>
        <description>&lt;h3 id=&#34;facade&#34;&gt;Facade&lt;/h3&gt;
&lt;p&gt;其實 Facade 的概念簡單來說，就是簡化使用物件方的介面。
舉個例來說，我建立了一個 Calendar 的 UICollectionView，可能裡頭會需要很多的邏輯判斷；像是「計算 Cell 的 Size」、「判斷日期是否為假日」、「判斷月份」⋯⋯等，但使用這個物件的人，基本上不需要（也不應該）去煩惱這些事情。
如同我們吹電風扇，只需要「強、中、弱、關」的使用介面，並不需要知道它內部是調整不同的功率去達到這效果，但對使用者而言並不是那麼的重要。
而在 MVC 的架構底下便是如此，使用者只需要 ViewController 上可以操作的 function 即可，底部的 Model 是如何操作以及邏輯運算如何，就相對的沒那麼重要，丟給系統去做就好！
所以在 Facade 的設計模式下，每個物件的介面需要被規劃過，哪些需要使用 private、fileprivate、class 等，適時地分配各個變數或常數及方法的使用權限。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>七天學會設計模式 – Observe</title>
        <link>https://www.archie.tw/p/%E4%B8%83%E5%A4%A9%E5%AD%B8%E6%9C%83%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-observe/</link>
        <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E4%B8%83%E5%A4%A9%E5%AD%B8%E6%9C%83%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-observe/</guid>
        <description>&lt;h3 id=&#34;訂閱&#34;&gt;訂閱&lt;/h3&gt;
&lt;p&gt;有使用過網誌或是一些新聞類型的網站時，通常可以在旁邊看到「訂閱」的按鈕，接著點擊下去後就可以在作者有發動或異動文章時，收到通知。&lt;/p&gt;
&lt;h3 id=&#34;observe&#34;&gt;Observe&lt;/h3&gt;
&lt;p&gt;這個設計模式的概念類似於「訂閱」的功能，我們會去「訂閱」某個物件，當它做了某些事情或者其值改變時，可以去做相對應的動作。&lt;/p&gt;
&lt;h3 id=&#34;應用&#34;&gt;應用&lt;/h3&gt;
&lt;p&gt;舉個比較常會遇到的案例：鍵盤
我們通常會希望在鍵盤升起來時，調整我們的畫面，看是移動 View 的 frame，或是設定 TableView 的 ContentOffset 之類的。
而大多數採取的方式是「監聽」 NotificationCenter 的「鍵盤升起」的事件，所以當「鍵盤升起」時，我們可以做相對應的處理；而當「鍵盤收起」時，我們也可以執行另一段 function。
這，便是 Observe 的設計模式。
我們去「訂閱」或者「監聽」某個事件，像是 Value changed 或是某個 function 被呼叫，來做相對應的處理。&lt;/p&gt;
&lt;h3 id=&#34;第三方套件&#34;&gt;第三方套件&lt;/h3&gt;
&lt;p&gt;RxSwift、ReactiveCocoa 便都是圍繞在 Observe 設計模式的框架，來做響應式的開發。&lt;/p&gt;
&lt;h3 id=&#34;響應式開發&#34;&gt;響應式開發&lt;/h3&gt;
&lt;p&gt;如名稱所述，意思是指當 Model 或者 ViewModel 的狀態（值）更動時，畫面可以很即時地跟著變動。
對 RxSwift 有興趣的人，可以看看這篇文章 &lt;a class=&#34;link&#34; href=&#34;../%e7%b7%9a%e4%b8%8a%e8%ae%80%e6%9b%b8%e6%9c%83-rxswift-%e5%88%86%e4%ba%ab&#34; &gt;線上讀書會 RxSwift 分享&lt;/a&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Weak</title>
        <link>https://www.archie.tw/p/weak/</link>
        <pubDate>Fri, 05 May 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/weak/</guid>
        <description>&lt;p&gt;在 iOS 的開發語言之中，不論是 Objective-C 或者 Swift，你或許都有看過這個詞&lt;/p&gt;
&lt;h3 id=&#34;weak&#34;&gt;weak&lt;/h3&gt;
&lt;p&gt;你可能會知道它可以避免 retain cycle，但其背後的觀念是什麼？&lt;/p&gt;
&lt;h3 id=&#34;arc&#34;&gt;ARC&lt;/h3&gt;
&lt;p&gt;在目前大家所熟悉的開發環境之中，記憶體的管理是由 iOS 或 macOS 自行去解決的；它會在你宣告或者呼叫物件的時候，替它在計數器上 +1，而當你用不到時，便會 -1。
當計數器為零的時候，便釋放掉這個物件的記憶體位置。
舉個例子，我在某個 ViewController 裏頭，宣告了一個變數 A 及執行一個異步的閉包（closure），並在裡頭使用到 A。
此時，A 在剛剛宣告產生的時候，計數器會是 +1，而在閉包內被使用到，故計數器會再 +1，所以在閉包執行時，它會是 2。&lt;/p&gt;
&lt;p&gt;那如果我們這時候，離開了 ViewController，照理說其裡頭的 instance 應該都要被釋放記憶體位置；但因為異步閉包的關係，我們無法確定在離開的時候，異步閉包是否在其他執行緒中正在執行，造成 A 的計數器仍為 1，且會繼續執行異步閉包的內容。&lt;/p&gt;
&lt;p&gt;weak 簡單來說就是，它並不會讓這個物件在計數器上 +1，並且在記憶體被釋放之後，指標會指向 nil；而在 Objective-C 及 Swift 裏頭，nil 的物件呼叫方法時，是不會造成崩潰的。&lt;/p&gt;
&lt;p&gt;retain cycle 就像是 A 使用到 B，並且 B 也使用到 A，兩者互相幫對方在計數器上 +1，那僅管我們今天離開了這個畫面，系統幫 A – 1 之後，仍然會因為 B 有使用到它，故釋放不掉 A，而 A 有使用 B，所以 B 也釋放不掉。（很饒舌，我知道）
所以在 A 裡頭使用到 B 時，將 B 宣告成 weak B，便不會幫 B 在計數器上記上一筆；當 A 要被釋放掉的時候，也不會因為 B 使用 A，而釋放不掉。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>502 Bad Gateway Error with nginx</title>
        <link>https://www.archie.tw/p/502-bad-gateway-error-with-nginx/</link>
        <pubDate>Thu, 04 May 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/502-bad-gateway-error-with-nginx/</guid>
        <description>&lt;h3 id=&#34;源頭&#34;&gt;源頭&lt;/h3&gt;
&lt;p&gt;在攥寫&lt;a class=&#34;link&#34; href=&#34;../%e4%b8%83%e5%a4%a9%e5%ad%b8%e6%9c%83%e8%a8%ad%e8%a8%88%e6%a8%a1%e5%bc%8f-singleton&#34; &gt;七天學會設計模式 – Singleton&lt;/a&gt;時，發生了點小狀況。
我點擊 WordPress 的「全部文章」時，顯示 502 Bad Gateway 的錯誤訊息；
由於點下去後不久（一、兩秒內）就跳轉出錯誤，故猜測不是 timeout 的關係，
便開始了一段 debug 的故事⋯⋯&lt;/p&gt;
&lt;h3 id=&#34;環境&#34;&gt;環境&lt;/h3&gt;
&lt;p&gt;我是使用 WordPress（不是重點）的框架，並架設在 Vultr 的主機上；
主機的主要規格為 CPU 1 vCore、RAM 1024 MB、25 GB SSD。&lt;/p&gt;
&lt;h3 id=&#34;原因&#34;&gt;原因&lt;/h3&gt;
&lt;p&gt;透過 nginx 的 error log（cat /var/log/nginx/wordpress_https_error.log），
發現關鍵字：
upstream sent too big header while reading response header from upstream
拿去餵狗的結果是，需要調整 nginx.conf（vim /etc/nginx/nginx.conf），
加上&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http {    
    proxy_buffer_size   128k;
    proxy_buffers   4 256k;
    proxy_busy_buffers_size   256k;

    fastcgi_buffer_size 128k;
    fastcgi_buffers 4 256k;
    fastcgi_busy_buffers_size 128k;
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;來調整 buffer size，來避免資源不足直接捨棄的情況（502）。
由於 5 塊美金的方案，Vultr 僅提供 1024 MB 的記憶體大小，但它有 25 GB 的 SSD！
故可以透過 Swap 的方式，用硬碟換取記憶體的效能。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd /var
touch swap.img
chmod 600 swap.img
dd if=/dev/zero of=/var/swap.img bs=1024k count=1000
mkswap /var/swap.img
swapon /var/swap.img
# swapoff /var/swap.img
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;依序輸入完後，可以輸入「free」來看 swap 是否有使用相對應的 size 了！
便可以解決 nginx 因資源不足所產生的 502 Bad Gateway error！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>工作一年半的一些心得分享</title>
        <link>https://www.archie.tw/p/%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%B9%B4%E5%8D%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/</link>
        <pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%B9%B4%E5%8D%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/</guid>
        <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;前陣子在 &lt;a class=&#34;link&#34; href=&#34;https://www.ptt.cc/bbs/MacDev/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PTT MacDev 版&lt;/a&gt;寫了篇心得，這邊就轉載過來&lt;/p&gt;
&lt;h3 id=&#34;正文開始&#34;&gt;正文開始&lt;/h3&gt;
&lt;p&gt;各位好，這篇文章主要是給新手一些方向和想法～
純屬個人的經歷和看法，可以一起以輕鬆的態度聊聊～
我個人是在 2015 年中開始接觸 iOS 的開發，以 Objective-C 為一開始自學方向。 從簡單遊戲開始下手，像是猜數字、圈圈叉叉之類的， 練練基本的拉拉 UI、認識Storyboard、.h 的宣告、.m 的實作等。
接著剛好 Xcode 7 開始讓免費的開發者可以裝 App 至實體裝置上， 發現自己原本都用 4.7 吋的模擬器執行，而到了 5.7 吋的裝置上時， 會有跑版的問題，於是花了一些時間學習 AutoLayout。
而基本上 AutoLayout 有個概念熟悉即可， 除非是比較特別的效果需要思考一下彼此之間的 priority， 不然一般 App 都還蠻輕易解決這方面的問題； 而比較有趣的是，像在 ScrollView 裏頭做 AutoLayout 時， 要有 contentSize 的概念，而不要輕易的點「讓系統補完 constraints」的按鈕。&lt;/p&gt;
&lt;p&gt;接著，在我準備面試前的一兩個月，加入了一些 iOS 的開發社群 （e.g iOS @ Taipei、Cocoaheads Taipei等） 厚著臉皮加了版上比較活躍的幾位前輩，並詢問他們一些問題和方向， 於是開始練習其他實作：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://opendata.cwb.gov.tw/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;氣象資料開放平臺&lt;/a&gt;：
練習接 Api，當時我是寫了一個去接目前各雨量觀測站的 App， 篩選 10 分鐘內有偵測到雨量的， 並在 MapView 上放上大頭針，顯示當區目前雨量。 （AFNetworking、MapKit）&lt;/p&gt;
&lt;p&gt;QR Code 掃瞄器：
當初瘋狂失敗的原因在於模擬器無法執行打開相機的功能， 一開就會報 Crash，而後來在裝到手機上才發覺當初懊惱的自己有多傻XD 不過這也學到了要好好 Google 的一課， 畢竟後來想想這明明是很簡單下的關鍵字，且網路上很多人會告訴你這件事…&lt;/p&gt;
&lt;p&gt;縣市的各學校地址清單：
而因為當時有這需求，便寫了一個可以讀特定格式的資料， 然後畫面簡單地透過 UINavigationController 控制前後頁， 跳轉到縣市 -&amp;gt; 鄉鎮 -&amp;gt; 學校 -&amp;gt; 資訊等， 練習一下 ViewController 間的切換和流程安排。&lt;/p&gt;
&lt;p&gt;午餐電話簿：
結合上述所學（不包含 QR Code）， 便寫了一個會先判斷離自己最近的雨量偵測站是否有偵測到 10 分鐘內下雨， 來作為篩選依據（下雨的話就只隨機挑選有外送的）， 隨機挑選後並可以決定是否今天要吃XD 再透過 FMDB 的方式記錄下來成清單，告訴自己這幾天都吃什麼… （很無聊的功能，就只是想練習 FMDB）
而上述都有使用到一些第三方套件，也選擇了 Cocoapods 來做管理。 於是我便拿著這些沒什麼商業價值的小工具上台北面試了… 很幸運的是，在面了兩間之後，就拿到其中一間的 Offer， 便開始了以 iOS 作為工作的生活。&lt;/p&gt;
&lt;p&gt;接著在這一年半左右的時間，開始寫 Swift（報到的第一天被告知要寫 Swift XDDDDD） 學習 ViewController 的生命週期，也體會到 Storyboard 和 Xib 之間的優缺點， 甚至用 Code 直接刻 View 的好處等。&lt;/p&gt;
&lt;p&gt;很多事情都要等你真的遇到了，才會很深刻地體會到， 為什麼當初有些前輩會這樣建議你… 而自己在這段時間又玩了 Parse、Firebase、Fastlane、Fabric、Carthage， 以及和 Android 之間透過 Bonjour 聯繫之類的一些不是太重要的技能XDD
看似沒什麼重點的文章，想告訴新人們的是一句我從 iOS @ Taipei 聚會中聽來的觀念： 「在這領域的知識累積，並非是線性的成長，而是一個一個的點； 你平常能觸及的東西越多，點越多，才能構成一個知識的平面。」&lt;/p&gt;
&lt;p&gt;而社群的意義就在這，它幫你集結了在 iOS 各領域開發的人， 分享他們花了數個、或數十個晚上所得到的經驗，讓你了解其中的運作原理和設計想法。
產品和想法多數都是在互相碰撞的時候，產生而來的， 像是會使用 Firebase 的 real-time database， 和藍芽裝配的配對的話，那是不是能做一個即時的數據報告， 再加入類似 AWS 的 Cloud watch 的功能，送推播到另一個裝置幹嘛幹嘛（還沒想到XD）
對自己自學程式還沒有想法的人，不如先放下手機看看你周遭的生活， 你想透過手機 App 幫你解決什麼問題？ 然而你便會找到方向，並找到一份適合你的工作，讓你接觸到更多 🙂&lt;/p&gt;
</description>
        </item>
        <item>
        <title>線上讀書會 RxSwift 分享</title>
        <link>https://www.archie.tw/p/%E7%B7%9A%E4%B8%8A%E8%AE%80%E6%9B%B8%E6%9C%83-rxswift-%E5%88%86%E4%BA%AB/</link>
        <pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E7%B7%9A%E4%B8%8A%E8%AE%80%E6%9B%B8%E6%9C%83-rxswift-%E5%88%86%E4%BA%AB/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?=OyCN04p-uS8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://img.youtube.com/vi/OyCN04p-uS8/maxresdefault.jpg&#34; &gt;
		&lt;img src=&#34;https://img.youtube.com/vi/OyCN04p-uS8/maxresdefault.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;線上讀書會 RxSwift 分享&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;線上讀書會 RxSwift 分享&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Privacy Policy</title>
        <link>https://www.archie.tw/p/privacy-policy/</link>
        <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/privacy-policy/</guid>
        <description>&lt;p&gt;This Privacy Policy governs the manner in which Archie collects, uses, maintains and discloses information collected from users (each, a &amp;ldquo;User&amp;rdquo;) of the &lt;a class=&#34;link&#34; href=&#34;https://www.Archie.tw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.Archie.tw&lt;/a&gt; website (&amp;ldquo;Site&amp;rdquo;).&lt;/p&gt;
&lt;h3 id=&#34;personal-identification-information&#34;&gt;Personal identification information&lt;/h3&gt;
&lt;p&gt;We may collect personal identification information from Users in a variety of ways, including, but not limited to, when Users visit our site, register on the site, and in connection with other activities, services, features or resources we make available on our Site. Users may be asked for, as appropriate, email address. Users may, however, visit our Site anonymously. We will collect personal identification information from Users only if they voluntarily submit such information to us. Users can always refuse to supply personally identification information, except that it may prevent them from engaging in certain Site related activities.&lt;/p&gt;
&lt;h3 id=&#34;non-personal-identification-information&#34;&gt;Non-personal identification information&lt;/h3&gt;
&lt;p&gt;We may collect non-personal identification information about Users whenever they interact with our Site. Non-personal identification information may include the browser name, the type of computer and technical information about Users means of connection to our Site, such as the operating system and the Internet service providers utilized and other similar information.&lt;/p&gt;
&lt;h3 id=&#34;web-browser-cookies&#34;&gt;Web browser cookies&lt;/h3&gt;
&lt;p&gt;Our Site may use “cookies” to enhance User experience. User’s web browser places cookies on their hard drive for record-keeping purposes and sometimes to track information about them. User may choose to set their web browser to refuse cookies, or to alert you when cookies are being sent. If they do so, note that some parts of the Site may not function properly.&lt;/p&gt;
&lt;h3 id=&#34;how-we-use-collected-information&#34;&gt;How we use collected information&lt;/h3&gt;
&lt;p&gt;Archie may collect and use Users personal information for the following purposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To run and operate our Site
We may need your information display content on the Site correctly.&lt;/li&gt;
&lt;li&gt;To improve customer service
Information you provide helps us respond to your customer service requests and support needs more efficiently.&lt;/li&gt;
&lt;li&gt;To improve our Site
We may use feedback you provide to improve our products and services.&lt;/li&gt;
&lt;li&gt;To send periodic emails
We may use the email address to send them information and updates pertaining to their order.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-we-protect-your-information&#34;&gt;How we protect your information&lt;/h3&gt;
&lt;p&gt;We adopt appropriate data collection, storage and processing practices and security measures to protect against unauthorized access, alteration, disclosure or destruction of your personal information, username, password, transaction information and data stored on our Site.&lt;/p&gt;
&lt;h3 id=&#34;sharing-your-personal-information&#34;&gt;Sharing your personal information&lt;/h3&gt;
&lt;p&gt;We do not sell, trade, or rent Users personal identification information to others. We may share generic aggregated demographic information not linked to any personal identification information regarding visitors and users with our business partners, trusted affiliates and advertisers for the purposes outlined above.&lt;/p&gt;
&lt;h3 id=&#34;third-party-websites&#34;&gt;Third party websites&lt;/h3&gt;
&lt;p&gt;Users may find advertising or other content on our Site that link to the sites and services of our partners, suppliers, advertisers, sponsors, licensors and other third parties. We do not control the content or links that appear on these sites and are not responsible for the practices employed by websites linked to or from our Site. In addition, these sites or services, including their content and links, may be constantly changing. These sites and services may have their own privacy policies and customer service policies. Browsing and interaction on any other website, including websites which have a link to our Site, is subject to that website’s own terms and policies.&lt;/p&gt;
&lt;h3 id=&#34;changes-to-this-privacy-policy&#34;&gt;Changes to this privacy policy&lt;/h3&gt;
&lt;p&gt;Archie has the discretion to update this privacy policy at any time. When we do, we will post a notification on the main page of our Site. We encourage Users to frequently check this page for any changes to stay informed about how we are helping to protect the personal information we collect. You acknowledge and agree that it is your responsibility to review this privacy policy periodically and become aware of modifications.&lt;/p&gt;
&lt;h3 id=&#34;your-acceptance-of-these-terms&#34;&gt;Your acceptance of these terms&lt;/h3&gt;
&lt;p&gt;By using this Site, you signify your acceptance of this policy. If you do not agree to this policy, please do not use our Site. Your continued use of the Site following the posting of changes to this policy will be deemed your acceptance of those changes. This privacy policy was built the web’s favourite privacy policy generator.&lt;/p&gt;
&lt;h3 id=&#34;contacting-us&#34;&gt;Contacting us&lt;/h3&gt;
&lt;p&gt;If you have any questions about this Privacy Policy, the practices of this site, or your dealings with this site, please contact us.&lt;/p&gt;
&lt;p&gt;This document was last updated on May 30, 2018&lt;/p&gt;
</description>
        </item>
        <item>
        <title>七天學會設計模式 - Singleton</title>
        <link>https://www.archie.tw/p/%E4%B8%83%E5%A4%A9%E5%AD%B8%E6%9C%83%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-singleton/</link>
        <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.archie.tw/p/%E4%B8%83%E5%A4%A9%E5%AD%B8%E6%9C%83%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-singleton/</guid>
        <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;最近和同事一起購入&lt;a class=&#34;link&#34; href=&#34;http://www.books.com.tw/products/0010750585&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;七天學會設計模式&lt;/a&gt;，不過書中是以 Java 作為示範語言；
而這邊，我會以 Swift 及 Objective-C 來攥寫範例並補充些內容。&lt;/p&gt;
&lt;h2 id=&#34;singleton&#34;&gt;Singleton&lt;/h2&gt;
&lt;p&gt;如同它的命名一般，在整個 App 運作時，僅會有一個 instance。&lt;/p&gt;
&lt;h3 id=&#34;swift&#34;&gt;Swift&lt;/h3&gt;
&lt;p&gt;Swift 宣告 Singleton 的方式很簡單，就是在 class 底下宣告一個 static 的常數（constant）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SingletonDemo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;shared&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SingletonDemo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;objective-c&#34;&gt;Objective-C&lt;/h3&gt;
&lt;p&gt;而 Objective-C 底下，我們要注意一些事情；
在 Multi-Thread 的情況下，我們得避免同時有多個 thread 執行建立 instance，故在創建時，必須使用 &lt;code&gt;dispatch_once_t&lt;/code&gt; 來確保僅會有一個 thread 執行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;UIKit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;UIKit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SingletonDemo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSObject&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instancetype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SingletonDemo.h&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SingletonDemo&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instancetype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SingletonDemo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dispatch_once_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;once_token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;dispatch_once&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;once_token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SingletonDemo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;學會了如何創建 Singleton 之後，可以想想哪些物件適合以這種方式創建；
如「目前登入的使用者」，正是可以用 Singleton 的方式做設計，畢竟一個 App 同時僅能有一位使用者登入，是大多數軟體的設計，而這恰巧符合 Singleton 的精神。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
